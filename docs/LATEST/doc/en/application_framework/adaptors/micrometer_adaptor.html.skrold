


<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en" > <!--<![endif]-->
<head>
  <meta charset="utf-8">
  <meta http-equiv='content-language' content='ja'>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <title>Micrometer Adapter &mdash; ∇Nablarch  5u19 documentation</title>
  

  
  
  
  

  

  
  
    

  

  
  
    <link rel="stylesheet" href="../../_static/custom.css" type="text/css" />
  

  

  
  <link rel="canonical" href="https://nablarch.github.io/docs/LATEST/doc/application_framework/adaptors/micrometer_adaptor.html" />
  
    <link rel="top" title="∇Nablarch  5u19 documentation" href="../../index.html"/>
        <link rel="up" title="Adaptor" href="index.html"/>
        <link rel="next" title="Example" href="../example/index.html"/>
        <link rel="prev" title="SLF4J Adapter" href="slf4j_adaptor.html"/>
 

  
  <script src="../../_static/js/modernizr.min.js"></script>

</head>

<body class="wy-body-for-nav" role="document">

   
  <div class="wy-grid-for-nav">

    
    <nav data-toggle="wy-nav-shift" class="wy-nav-side">
      <div class="wy-side-scroll">
        <div class="wy-side-nav-search">
          
  
  <a href="../../index.html" id="sidebar-title" class="icon"> ∇Nablarch 
  

  
    <div id="sidebar-version">Version: 5u19</div>
  </a>

  <div role="search">
    <form id="google-search-form" class="wy-form" method="get" action="https://www.google.co.jp/search">
      <input type="text" name="text" placeholder="Search docs on google" id="text"/>
      <input type="hidden" name="q" id="q"/>
    </form>
  </div>
    
    

        </div>

        <div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
          
  
  
    <ul class="current">
<li class="toctree-l1"><a class="reference internal" href="../../about_nablarch/index.html">What is the Nablarch?</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../about_nablarch/concept.html">Nablarch Concept</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../about_nablarch/concept.html#robustness">Robustness</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../about_nablarch/concept.html#testability">Testability</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../about_nablarch/concept.html#ready-to-use">Ready-to-Use</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../about_nablarch/mvn_module.html">Module List of Nablarch</a></li>
<li class="toctree-l2"><a class="reference internal" href="../../about_nablarch/license.html">Information on Nablarch License</a></li>
</ul>
</li>
<li class="toctree-l1 current"><a class="reference internal" href="../index.html">Nablarch Application Framework</a><ul class="current">
<li class="toctree-l2"><a class="reference internal" href="../application_framework/index.html">Application Framework</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../application_framework/nablarch/index.html">1. What is Nablarch Application Framework?</a></li>
<li class="toctree-l3"><a class="reference internal" href="../application_framework/web/index.html">2. Web Application</a></li>
<li class="toctree-l3"><a class="reference internal" href="../application_framework/web_service/index.html">3. Web Service</a></li>
<li class="toctree-l3"><a class="reference internal" href="../application_framework/batch/index.html">4. Batch Application</a></li>
<li class="toctree-l3"><a class="reference internal" href="../application_framework/messaging/index.html">5. Messaging</a></li>
<li class="toctree-l3"><a class="reference internal" href="../application_framework/handlers/index.html">6. Standard Handler Provided by Nablarch</a></li>
<li class="toctree-l3"><a class="reference internal" href="../application_framework/libraries/index.html">7. Libraries Provided by Nablarch</a></li>
<li class="toctree-l3"><a class="reference internal" href="../application_framework/blank_project/index.html">8. Blank Project</a></li>
<li class="toctree-l3"><a class="reference internal" href="../application_framework/setting_guide/index.html">9. Nablarch Application Framework Configuration Guide</a></li>
<li class="toctree-l3"><a class="reference internal" href="../application_framework/configuration/index.html">10. Default Configuration List</a></li>
<li class="toctree-l3"><a class="reference internal" href="../application_framework/cloud_native/index.html">11. Nablarch Cloud Native Support</a></li>
</ul>
</li>
<li class="toctree-l2 current"><a class="reference internal" href="index.html">Adaptor</a><ul class="current">
<li class="toctree-l3"><a class="reference internal" href="log_adaptor.html">log Adapter</a></li>
<li class="toctree-l3"><a class="reference internal" href="router_adaptor.html">Routing Adapter</a></li>
<li class="toctree-l3"><a class="reference internal" href="webspheremq_adaptor.html">IBM WebSphere MQ Adapter</a></li>
<li class="toctree-l3"><a class="reference internal" href="jaxrs_adaptor.html">JAX-RS Adapter</a></li>
<li class="toctree-l3"><a class="reference internal" href="doma_adaptor.html">Doma Adapter</a></li>
<li class="toctree-l3"><a class="reference internal" href="jsr310_adaptor.html">JSR310(Date and Time API)Adapter</a></li>
<li class="toctree-l3"><a class="reference internal" href="mail_sender_freemarker_adaptor.html">E-mail FreeMarker Adapter</a></li>
<li class="toctree-l3"><a class="reference internal" href="mail_sender_thymeleaf_adaptor.html">E-mail Thymeleaf Adapter</a></li>
<li class="toctree-l3"><a class="reference internal" href="mail_sender_velocity_adaptor.html">E-mail Velocity Adapter</a></li>
<li class="toctree-l3"><a class="reference internal" href="web_thymeleaf_adaptor.html">Web Application Thymeleaf Adapter</a></li>
<li class="toctree-l3"><a class="reference internal" href="lettuce_adaptor.html">Lettuce Adapter</a></li>
<li class="toctree-l3"><a class="reference internal" href="slf4j_adaptor.html">SLF4J Adapter</a></li>
<li class="toctree-l3 current"><a class="current reference internal" href="">Micrometer Adapter</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../example/index.html">Example</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../example/index.html#procedure-to-build-the-environment">Procedure to build the environment</a></li>
<li class="toctree-l3"><a class="reference internal" href="../example/index.html#application-execution-procedure">Application execution procedure</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../extension_components/index.html">Nablarch extension component</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../extension_components/report/index.html">1. Form library</a></li>
<li class="toctree-l2"><a class="reference internal" href="../../extension_components/workflow/doc/index.html">2. Workflow library</a></li>
<li class="toctree-l2"><a class="reference internal" href="../../extension_components/workflow/tool/index.html">3. Workflow definition data generation tool</a></li>
<li class="toctree-l2"><a class="reference internal" href="../../extension_components/etl/index.html">4. ETL</a></li>
<li class="toctree-l2"><a class="reference internal" href="../../extension_components/etl/etl_maven_plugin.html">5. ETL Maven plugin</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../development_tools/index.html">Nablarch development tools</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../development_tools/java_static_analysis/index.html">1. Efficient Java Static Checks</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../development_tools/java_static_analysis/index.html#conduct-syntax-check">1.1. Conduct syntax check</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../development_tools/java_static_analysis/index.html#unify-the-format">1.2. Unify the format</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../development_tools/java_static_analysis/index.html#check-if-unauthorized-apis-are-being-used">1.3. Check if unauthorized APIs are being used</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../development_tools/ui_dev/index.html">2. Front-end UI development platform for advanced users</a></li>
<li class="toctree-l2"><a class="reference internal" href="../../development_tools/testing_framework/index.html">3. Testing framework</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../development_tools/testing_framework/guide/development_guide/05_UnitTestGuide/index.html">3.1. How to Execute Unit Tests</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../development_tools/testing_framework/guide/development_guide/06_TestFWGuide/index.html">3.2. How to Use the Automated Test Framework</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../development_tools/testing_framework/guide/development_guide/08_TestTools/index.html">3.3. Tools Used in the Programming Phase</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../development_tools/toolbox/index.html">4. Useful Tools When Developing Applications</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../development_tools/toolbox/JspStaticAnalysis/index.html">4.1. JSP Static Analysis Tool</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../development_tools/toolbox/SqlExecutor/SqlExecutor.html">4.2. Nablarch SQL Executor</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../development_tools/toolbox/JspVerifier/JspVerifier.html">4.3. Job Screen JSP Validation Tool</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../examples/index.html">Nablarch Implementation Examples</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../examples/01/index.html">Sample Password Encryption Function Using Database</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../examples/01/0101_PBKDF2PasswordEncryptor.html">Sample Password Encryption Function Using PBKDF2</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/01/index.html#delivery-package">Delivery package</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/01/index.html#summary">Summary</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/01/index.html#structure">Structure</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/01/index.html#how-to-use">How to Use</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../examples/02/index.html">Extended Validation Functions</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../examples/02/index.html#delivery-package">Delivery package</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/02/index.html#email-address-validation">Email address validation</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/02/index.html#validation-of-japan-telephone-numbers">Validation of Japan telephone numbers</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/02/index.html#code-value-validation">Code value validation</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../examples/03/index.html">Display a List of Search Results</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../examples/03/index.html#delivery-package">Delivery package</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/03/index.html#summary">Summary</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/03/index.html#structure">Structure</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/03/index.html#how-to-use">How to Use</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/03/index.html#listsearchinfo-class">ListSearchInfo class</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/03/index.html#listsearchresult-tag">listSearchResult tag</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/03/index.html#sort-search-results">Sort search results</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/03/index.html#how-to-implement-displaying-a-list-of-all-search-results-on-a-single-screen">How to implement displaying a list of all search results on a single screen</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/03/index.html#how-to-implement-the-initial-display-of-search-results-with-the-default-search-conditions">How to implement the initial display of search results with the default search conditions</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/03/index.html#default-settings-for-the-search-result-list-display-function">Default settings for the search result list display function</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/03/index.html#how-to-import-a-sample-implementation-tag-file-into-the-business-application">How to import a sample implementation (tag file) into the business application</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/03/index.html#tag-reference">Tag Reference</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../examples/04/index.html">Extended Formatter Functions</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../examples/04/0401_ExtendedDataFormatter.html">Data Formatter Expansion</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/04/0402_ExtendedFieldType.html">Field Type Expansion in the Data Formatter Function</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../examples/05/index.html">Sample File Management Function Using Database</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../examples/05/index.html#summary">Summary</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/05/index.html#delivery-package">Delivery package</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/05/index.html#functions">Functions</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/05/index.html#structure">Structure</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/05/index.html#how-to-use">How to Use</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../examples/06/index.html">CAPTCHA Function Sample</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../examples/06/06_Captcha_guide.html">How to Incorporate the CAPTCHA Function</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/06/index.html#delivery-package">Delivery package</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/06/index.html#summary">Summary</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/06/index.html#structure">Structure</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/06/index.html#how-to-use">How to Use</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../examples/07/index.html">Sample UserAgent Information Acquisition Function</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../examples/07/index.html#summary">Summary</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/07/index.html#structure">Structure</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/07/index.html#description-of-configuration">Description of configuration</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/07/index.html#use-case">Use case</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../examples/08/index.html">Sample of HTML Email Send Function</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../examples/08/index.html#summary">Summary</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/08/index.html#request">Request</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/08/index.html#structure">Structure</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/08/index.html#implementation-examples">Implementation examples</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../examples/09/index.html">How to Use a Sample to Send a Digitally Signed Email Using Bouncycastle</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../examples/09/index.html#environment-preparation">Environment preparation</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/09/index.html#structure-of-digitally-signed-email-send-function">Structure of digitally signed email send function</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/09/index.html#preparation-of-configuration-file">Preparation of configuration file</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/09/index.html#execution">Execution</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../examples/10/index.html">How to Use the Log Aggregation Sample</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../examples/10/index.html#list-of-samples-provided">List of samples provided</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../examples/11/index.html">Messaging Platform Test Simulator Sample</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../examples/11/index.html#uses">Uses</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/11/index.html#features">Features</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/11/index.html#request">Request</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/11/index.html#how-to-use">How to use</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../examples/11/index.html#expansion-example">Expansion example</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../nablarch_api/index.html">Nablarch API</a></li>
</ul>

  

        </div>
      </div>
    </nav>

    <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap">

      
      <nav class="wy-nav-top" role="navigation" aria-label="top navigation">
        
          <i data-toggle="wy-nav-top" class="fa fa-bars"></i>
          <a href="../../index.html">∇Nablarch </a>
        
      </nav>


      
      <div class="wy-nav-content">
        <div class="rst-content">
          

 



<div role="navigation" aria-label="breadcrumbs navigation">
  <ul class="wy-breadcrumbs">
    <li><a href="../../index.html">Docs</a> &raquo;</li>
      
          <li><a href="../index.html">Nablarch Application Framework</a> &raquo;</li>
      
          <li><a href="index.html">Adaptor</a> &raquo;</li>
      
    <li>Micrometer Adapter</li>
    <li class="wy-breadcrumbs-aside">
      <a href="https://github.com/nablarch" class="fa fa-github">GitHub</a>
    </li>
    <li class="wy-breadcrumbs-aside">
        <a href="https://nablarch.github.io/docs/LATEST/doc/index.html" class="ja">日本語</a>
    </li>
  </ul>
  <hr/>
</div>
          <div role="main" class="document" itemscope="itemscope" itemtype="http://schema.org/Article">
           <div itemprop="articleBody">
            
  <div class="section" id="micrometer-adapter">
<span id="micrometer-adaptor"></span><h1>Micrometer Adapter<a class="headerlink" href="#micrometer-adapter" title="Permalink to this headline">¶</a></h1>
<div class="contents local topic" id="table-of-contents">
<p class="topic-title first">Table of contents</p>
<ul class="simple">
<li><a class="reference internal" href="#module-list" id="id2">Module list</a></li>
<li><a class="reference internal" href="#setting-up-to-use-the-micrometer-adapter" id="id3">Setting up to use the Micrometer adapter</a><ul>
<li><a class="reference internal" href="#declare-the-defaultsmeterbinderlistprovider-as-a-component" id="id4">Declare the DefaultsMeterBinderListProvider as a component</a></li>
<li><a class="reference internal" href="#target-the-defaultsmeterbinderlistprovider-for-disposal" id="id5">Target the DefaultsMeterBinderListProvider for disposal</a></li>
<li><a class="reference internal" href="#declare-the-registry-s-factory-class-as-a-component" id="id6">Declare the registry&#8217;s factory class as a component</a></li>
<li><a class="reference internal" href="#creating-a-configuration-file" id="id7">Creating a configuration file</a></li>
<li><a class="reference internal" href="#execution-result" id="id8">Execution Result</a></li>
</ul>
</li>
<li><a class="reference internal" href="#registry-factory" id="id9">Registry factory</a></li>
<li><a class="reference internal" href="#configuration-file" id="id10">Configuration File</a><ul>
<li><a class="reference internal" href="#placement" id="id11">Placement</a></li>
<li><a class="reference internal" href="#format" id="id12">Format</a></li>
<li><a class="reference internal" href="#override-with-os-environment-variables-or-system-properties" id="id13">Override with OS environment variables or system properties</a></li>
<li><a class="reference internal" href="#changing-the-configuration-prefix" id="id14">Changing the configuration prefix</a></li>
<li><a class="reference internal" href="#changing-the-place-of-the-configuration-file" id="id15">Changing the place of the configuration file</a></li>
</ul>
</li>
<li><a class="reference internal" href="#metrics-collected-by-the-defaultmeterbinderlistprovider" id="id16">Metrics collected by the DefaultMeterBinderListProvider</a></li>
<li><a class="reference internal" href="#configuring-common-tags" id="id17">Configuring Common Tags</a></li>
<li><a class="reference internal" href="#working-with-monitoring-services" id="id18">Working with monitoring services</a><ul>
<li><a class="reference internal" href="#working-with-datadog" id="id19">Working with Datadog</a></li>
<li><a class="reference internal" href="#working-with-cloudwatch" id="id20">Working with CloudWatch</a></li>
<li><a class="reference internal" href="#working-with-azure" id="id21">Working with Azure</a></li>
<li><a class="reference internal" href="#working-with-datadog-using-statsd" id="id22">Working with Datadog using StatsD</a></li>
</ul>
</li>
<li><a class="reference internal" href="#examples-of-metrics-for-each-application-type" id="id23">Examples of metrics for each application type.</a><ul>
<li><a class="reference internal" href="#examples-of-metrics-for-web-applications" id="id24">Examples of metrics for web applications</a></li>
<li><a class="reference internal" href="#examples-of-metrics-for-batch-applications" id="id25">Examples of metrics for batch applications</a></li>
</ul>
</li>
<li><a class="reference internal" href="#handler-to-measure-processing-time" id="id26">Handler to measure processing time</a><ul>
<li><a class="reference internal" href="#collect-the-percentiles" id="id27">Collect the percentiles</a></li>
<li><a class="reference internal" href="#the-provided-handlermetricsmetadatabuilder-implementation" id="id28">The provided HandlerMetricsMetaDataBuilder implementation</a><ul>
<li><a class="reference internal" href="#collect-the-processing-time-of-http-requests" id="id29">Collect the processing time of HTTP requests</a></li>
</ul>
</li>
</ul>
</li>
<li><a class="reference internal" href="#measure-the-processing-time-per-transaction-of-a-batch" id="id30">Measure the processing time per transaction of a batch</a></li>
<li><a class="reference internal" href="#measure-the-count-that-was-processed-by-batch" id="id31">Measure the count that was processed by batch</a></li>
<li><a class="reference internal" href="#measure-the-output-count-per-log-level" id="id32">Measure the output count per log level</a><ul>
<li><a class="reference internal" href="#configure-logpublisher" id="id33">Configure LogPublisher</a></li>
<li><a class="reference internal" href="#create-a-custom-defaultmeterbinderlistprovider" id="id34">Create a custom DefaultMeterBinderListProvider</a></li>
<li><a class="reference internal" href="#log-level-to-be-aggregated" id="id35">Log level to be aggregated</a></li>
</ul>
</li>
<li><a class="reference internal" href="#measure-sql-processing-time" id="id36">Measure SQL processing time</a></li>
<li><a class="reference internal" href="#measure-the-value-obtained-from-any-mbean-as-a-metric" id="id37">Measure the value obtained from any MBean as a metric</a><ul>
<li><a class="reference internal" href="#obtain-the-status-of-the-tomcat-thread-pool" id="id38">Obtain the status of the Tomcat thread pool</a></li>
<li><a class="reference internal" href="#obtain-the-status-of-the-hikaricp-connection-pool" id="id39">Obtain the status of the HikariCP connection pool</a><ul>
<li><a class="reference internal" href="#about-the-warning-log-output-when-the-server-is-started" id="id40">About the warning log output when the server is started</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<p>Provides an adapter to perform metrics collection using <a class="reference external" href="https://micrometer.io/">Micrometer (external site)</a> .</p>
<p>This adapter can be used to do the following. This provides the advantage of easier operational monitoring of the application.</p>
<ul class="simple">
<li>Can collect application metrics such as JVM memory usage and CPU usage.</li>
<li>The collected metrics can be linked to monitoring services such as <a class="reference external" href="https://www.datadoghq.com/">Datadog (external site)</a> and <a class="reference external" href="https://aws.amazon.com/cloudwatch/">CloudWatch (external site)</a> .</li>
</ul>
<div class="section" id="module-list">
<h2><a class="toc-backref" href="#id2">Module list</a><a class="headerlink" href="#module-list" title="Permalink to this headline">¶</a></h2>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="c">&lt;!-- Micrometer adapter --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.nablarch.integration<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>nablarch-micrometer-adaptor<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Tests are conducted using Micrometer version 1.5.4.
If you change the version, the project  should be tested to make sure it is working.</p>
</div>
</div>
<div class="section" id="setting-up-to-use-the-micrometer-adapter">
<h2><a class="toc-backref" href="#id3">Setting up to use the Micrometer adapter</a><a class="headerlink" href="#setting-up-to-use-the-micrometer-adapter" title="Permalink to this headline">¶</a></h2>
<p>In order to collect metrics in Micrometer, need to create a class called <a class="reference external" href="https://micrometer.io/docs/concepts#_registry">Registry (external site)</a> .
This adapter provides a <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/repository/di/ComponentFactory.html" title="nablarch.core.repository.di.ComponentFactory">ComponentFactory</a> to register this registry in the System Repository.</p>
<p>In this section,  describe how to set up <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/logging/LoggingMeterRegistryFactory.html" title="nablarch.integration.micrometer.logging.LoggingMeterRegistryFactory">LoggingMeterRegistryFactory</a> as an example, registering <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/logging/LoggingMeterRegistry.html">LoggingMeterRegistry (external site)</a> as a component.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p><a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/logging/LoggingMeterRegistry.html">LoggingMeterRegistry (external site)</a> provides the feature to log metrics using SLF4J or Java Util Logging.
When no specific configuration is made, metrics are output to standard output using Java Util Logging, which is useful for a quick behavior check.</p>
<p class="last">Other registries require a lot of work to prepare the services to be federated and to create an implementation to output the collected metrics.
For this reason, we have used <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/logging/LoggingMeterRegistry.html">LoggingMeterRegistry (external site)</a> , which is the easiest to behavior check.</p>
</div>
<p>In this example, use <a class="reference external" href="https://github.com/nablarch/nablarch-example-web">Web application Example (external site)</a> as the base application.</p>
<div class="section" id="declare-the-defaultsmeterbinderlistprovider-as-a-component">
<span id="micrometer-adaptor-declare-default-meter-binder-list-provider-as-component"></span><h3><a class="toc-backref" href="#id4">Declare the DefaultsMeterBinderListProvider as a component</a><a class="headerlink" href="#declare-the-defaultsmeterbinderlistprovider-as-a-component" title="Permalink to this headline">¶</a></h3>
<p>The Micrometer has an interface called <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/binder/MeterBinder.html">MeterBinder (external site)</a>  .</p>
<p>The collection of frequently used metrics, such as JVM memory usage and CPU usage, is provided in advance as a class that implements this interface.
(e.g., <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/binder/jvm/JvmMemoryMetrics.html">JvmMemoryMetrics (external site)</a> for JVM memory usage and <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/binder/system/ProcessorMetrics.html">ProcessorMetrics (external site)</a> for CPU usage)</p>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/DefaultMeterBinderListProvider.html" title="nablarch.integration.micrometer.DefaultMeterBinderListProvider">DefaultMeterBinderListProvider</a> is a class that provides this <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/binder/MeterBinder.html">MeterBinder (external site)</a> list , which can be used to collect metrics such as JVM memory usage and CPU usage.</p>
<p>First, add this <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/DefaultMeterBinderListProvider.html" title="nablarch.integration.micrometer.DefaultMeterBinderListProvider">DefaultMeterBinderListProvider</a> declaration to <code class="docutils literal"><span class="pre">src/main/resources/web-component-configuration.xml</span></code> .</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;meterBinderListProvider&quot;</span>
           <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.DefaultMeterBinderListProvider&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<p>For a specific description of the metrics that are collected, see <a class="reference internal" href="#micrometer-default-metrics"><span>Metrics collected by the DefaultMeterBinderListProvider</span></a> .</p>
</div>
<div class="section" id="target-the-defaultsmeterbinderlistprovider-for-disposal">
<h3><a class="toc-backref" href="#id5">Target the DefaultsMeterBinderListProvider for disposal</a><a class="headerlink" href="#target-the-defaultsmeterbinderlistprovider-for-disposal" title="Permalink to this headline">¶</a></h3>
<p>Because the <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/DefaultMeterBinderListProvider.html" title="nablarch.integration.micrometer.DefaultMeterBinderListProvider">DefaultMeterBinderListProvider</a> is a component that needs to be disposed of, declare it for disposal as follows.</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;disposer&quot;</span>
    <span class="na">class=</span><span class="s">&quot;nablarch.core.repository.disposal.BasicApplicationDisposer&quot;</span><span class="nt">&gt;</span>

  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;disposableList&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;component-ref</span> <span class="na">name=</span><span class="s">&quot;meterBinderListProvider&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>

<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<p>For the object disposal process, see <a class="reference internal" href="../application_framework/libraries/repository.html#repository-dispose-object"><span>Handling the disposal of objects</span></a> .</p>
</div>
<div class="section" id="declare-the-registry-s-factory-class-as-a-component">
<h3><a class="toc-backref" href="#id6">Declare the registry&#8217;s factory class as a component</a><a class="headerlink" href="#declare-the-registry-s-factory-class-as-a-component" title="Permalink to this headline">¶</a></h3>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.logging.LoggingMeterRegistryFactory&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="na">ref=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applicationDisposer&quot;</span> <span class="na">ref=</span><span class="s">&quot;disposer&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<p>Next, declare the factory class as a component, which is provided for each registry to be used.</p>
<p>In doing so, configure two properties, <code class="docutils literal"><span class="pre">meterBinderListProvider</span></code> and <code class="docutils literal"><span class="pre">applicationDisposer</span></code> .
For each property, configure <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/DefaultMeterBinderListProvider.html" title="nablarch.integration.micrometer.DefaultMeterBinderListProvider">DefaultMeterBinderListProvider</a> and <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/repository/disposal/BasicApplicationDisposer.html" title="nablarch.core.repository.disposal.BasicApplicationDisposer">BasicApplicationDisposer</a> as declared above.</p>
<p>The factory classes provided by this adapter are listed in <a class="reference internal" href="#micrometer-registry-factory"><span>Registry factory</span></a> .</p>
</div>
<div class="section" id="creating-a-configuration-file">
<h3><a class="toc-backref" href="#id7">Creating a configuration file</a><a class="headerlink" href="#creating-a-configuration-file" title="Permalink to this headline">¶</a></h3>
<p>Finally, create a text file named <code class="docutils literal"><span class="pre">micrometer.properties</span></code> under <code class="docutils literal"><span class="pre">src/main/resources</span></code> .</p>
<p>Describe the contents as follows.</p>
<div class="highlight-properties"><div class="highlight"><pre><span></span><span class="c"># Output metrics every 5 seconds (1 minute in default)</span>
<span class="na">nablarch.micrometer.logging.step</span><span class="o">=</span><span class="s">5s</span>
<span class="c"># Configuring to output log at disposal process</span>
<span class="c"># even if the application is terminated earlier than the time specified in step.</span>
<span class="na">nablarch.micrometer.logging.logInactive</span><span class="o">=</span><span class="s">true</span>
</pre></div>
</div>
<div class="admonition important">
<p class="first admonition-title">Important</p>
<p class="last"><code class="docutils literal"><span class="pre">micrometer.properties</span></code> must be placed even if the content is empty.</p>
</div>
</div>
<div class="section" id="execution-result">
<span id="micrometer-metrics-output-example"></span><h3><a class="toc-backref" href="#id8">Execution Result</a><a class="headerlink" href="#execution-result" title="Permalink to this headline">¶</a></h3>
<p>Now you can collect metrics using the <code class="docutils literal"><span class="pre">LoggingMeterRegistry</span></code> .</p>
<p>Launching the application, can see that the collected metrics are output to standard output as follows</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>2020-09-04 15:33:40.689 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.gc.count{memory.manager.name=PS Scavenge} throughput=2.6/s
2020-09-04 15:33:40.690 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.gc.count{memory.manager.name=PS MarkSweep} throughput=0.4/s
2020-09-04 15:33:40.691 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.buffer.count{id=mapped} value=0 buffers
2020-09-04 15:33:40.691 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.buffer.count{id=direct} value=2 buffers
2020-09-04 15:33:40.692 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.buffer.memory.used{id=direct} value=124 KiB
2020-09-04 15:33:40.692 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.buffer.memory.used{id=mapped} value=0 B
2020-09-04 15:33:40.692 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.buffer.total.capacity{id=mapped} value=0 B
2020-09-04 15:33:40.692 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.buffer.total.capacity{id=direct} value=124 KiB
2020-09-04 15:33:40.693 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.classes.loaded{} value=9932 classes
2020-09-04 15:33:40.693 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.gc.live.data.size{} value=0 B
2020-09-04 15:33:40.693 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.gc.max.data.size{} value=2.65918 GiB
2020-09-04 15:33:40.694 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.committed{area=heap,id=PS Old Gen} value=182.5 MiB
2020-09-04 15:33:40.694 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.committed{area=heap,id=PS Survivor Space} value=44 MiB
2020-09-04 15:33:40.694 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.committed{area=heap,id=PS Eden Space} value=197 MiB
2020-09-04 15:33:40.694 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.committed{area=nonheap,id=Code Cache} value=29.125 MiB
2020-09-04 15:33:40.694 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.committed{area=nonheap,id=Compressed Class Space} value=6.796875 MiB
2020-09-04 15:33:40.695 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.committed{area=nonheap,id=Metaspace} value=55.789062 MiB
2020-09-04 15:33:40.695 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.max{area=heap,id=PS Old Gen} value=2.65918 GiB
2020-09-04 15:33:40.695 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.max{area=heap,id=PS Survivor Space} value=44 MiB
2020-09-04 15:33:40.696 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.max{area=nonheap,id=Code Cache} value=240 MiB
2020-09-04 15:33:40.696 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.max{area=nonheap,id=Metaspace} value=-1 B
2020-09-04 15:33:40.696 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.max{area=heap,id=PS Eden Space} value=1.243652 GiB
2020-09-04 15:33:40.696 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.max{area=nonheap,id=Compressed Class Space} value=1 GiB
2020-09-04 15:33:40.697 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.used{area=nonheap,id=Code Cache} value=28.618713 MiB
2020-09-04 15:33:40.697 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.used{area=nonheap,id=Compressed Class Space} value=6.270714 MiB
2020-09-04 15:33:40.697 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.used{area=nonheap,id=Metaspace} value=54.118324 MiB
2020-09-04 15:33:40.698 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.used{area=heap,id=PS Old Gen} value=69.320663 MiB
2020-09-04 15:33:40.698 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.used{area=heap,id=PS Survivor Space} value=7.926674 MiB
2020-09-04 15:33:40.698 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.memory.used{area=heap,id=PS Eden Space} value=171.750542 MiB
2020-09-04 15:33:40.698 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.threads.daemon{} value=28 threads
2020-09-04 15:33:40.698 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.threads.live{} value=29 threads
2020-09-04 15:33:40.699 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.threads.peak{} value=31 threads
2020-09-04 15:33:40.702 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.threads.states{state=blocked} value=0 threads
2020-09-04 15:33:40.703 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.threads.states{state=runnable} value=9 threads
2020-09-04 15:33:40.703 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.threads.states{state=new} value=0 threads
2020-09-04 15:33:40.703 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.threads.states{state=timed-waiting} value=3 threads
2020-09-04 15:33:40.703 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.threads.states{state=terminated} value=0 threads
2020-09-04 15:33:40.704 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: jvm.threads.states{state=waiting} value=17 threads
2020-09-04 15:33:41.199 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: process.cpu.usage{} value=0.111672
2020-09-04 15:33:41.199 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: process.start.time{} value=444222h 33m 14.544s
2020-09-04 15:33:41.199 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: process.uptime{} value=26.729s
2020-09-04 15:33:41.200 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: system.cpu.count{} value=8
2020-09-04 15:33:41.200 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: system.cpu.usage{} value=0.394545
</pre></div>
</div>
</div>
</div>
<div class="section" id="registry-factory">
<span id="micrometer-registry-factory"></span><h2><a class="toc-backref" href="#id9">Registry factory</a><a class="headerlink" href="#registry-factory" title="Permalink to this headline">¶</a></h2>
<p>This adapter provides the following registry factory classes.</p>
<table border="1" class="docutils">
<colgroup>
<col width="33%" />
<col width="33%" />
<col width="33%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td>Registry</td>
<td>Factory class</td>
<td>The version of the adapter being provided</td>
</tr>
<tr class="row-even"><td><a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/simple/SimpleMeterRegistry.html">SimpleMeterRegistry (external site)</a></td>
<td><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/simple/SimpleMeterRegistryFactory.html" title="nablarch.integration.micrometer.simple.SimpleMeterRegistryFactory">SimpleMeterRegistryFactory</a></td>
<td><code class="docutils literal"><span class="pre">1.0.0</span></code> or higher</td>
</tr>
<tr class="row-odd"><td><a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/logging/LoggingMeterRegistry.html">LoggingMeterRegistry (external site)</a></td>
<td><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/logging/LoggingMeterRegistryFactory.html" title="nablarch.integration.micrometer.logging.LoggingMeterRegistryFactory">LoggingMeterRegistryFactory</a></td>
<td><code class="docutils literal"><span class="pre">1.0.0</span></code> or higher</td>
</tr>
<tr class="row-even"><td><a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-registry-cloudwatch2/1.5.4/io/micrometer/cloudwatch2/CloudWatchMeterRegistry.html">CloudWatchMeterRegistry (external site)</a></td>
<td><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/cloudwatch/CloudWatchMeterRegistryFactory.html" title="nablarch.integration.micrometer.cloudwatch.CloudWatchMeterRegistryFactory">CloudWatchMeterRegistryFactory</a></td>
<td><code class="docutils literal"><span class="pre">1.0.0</span></code> or higher</td>
</tr>
<tr class="row-odd"><td><a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-registry-datadog/1.5.4/io/micrometer/datadog/DatadogMeterRegistry.html">DatadogMeterRegistry (external site)</a></td>
<td><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/datadog/DatadogMeterRegistryFactory.html" title="nablarch.integration.micrometer.datadog.DatadogMeterRegistryFactory">DatadogMeterRegistryFactory</a></td>
<td><code class="docutils literal"><span class="pre">1.0.0</span></code> or higher</td>
</tr>
<tr class="row-even"><td><a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-registry-statsd/1.5.4/io/micrometer/statsd/StatsdMeterRegistry.html">StatsdMeterRegistry (external site)</a></td>
<td><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/statsd/StatsdMeterRegistryFactory.html" title="nablarch.integration.micrometer.statsd.StatsdMeterRegistryFactory">StatsdMeterRegistryFactory</a></td>
<td><code class="docutils literal"><span class="pre">1.0.0</span></code> or higher</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="configuration-file">
<span id="micrometer-configuration"></span><h2><a class="toc-backref" href="#id10">Configuration File</a><a class="headerlink" href="#configuration-file" title="Permalink to this headline">¶</a></h2>
<div class="section" id="placement">
<h3><a class="toc-backref" href="#id11">Placement</a><a class="headerlink" href="#placement" title="Permalink to this headline">¶</a></h3>
<p>Create a configuration file for this adapter to be placed directly under the classpath with the name <code class="docutils literal"><span class="pre">micrometer.properties</span></code> .</p>
</div>
<div class="section" id="format">
<h3><a class="toc-backref" href="#id12">Format</a><a class="headerlink" href="#format" title="Permalink to this headline">¶</a></h3>
<p>Describe it in the following format</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>nablarch.micrometer.&lt;subPrefix&gt;.&lt;key&gt;=&lt;value&gt;
</pre></div>
</div>
<p>The value specified for <code class="docutils literal"><span class="pre">&lt;subPrefix&gt;</span></code> is different for each registry factory used.</p>
<p>For each registry factory, the following table lists the values to specify for <code class="docutils literal"><span class="pre">&lt;subPrefix&gt;</span></code>.</p>
<table border="1" class="docutils">
<colgroup>
<col width="69%" />
<col width="31%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Registry factory</th>
<th class="head">subPrefix</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><code class="docutils literal"><span class="pre">SimpleMeterRegistryFactory</span></code></td>
<td><code class="docutils literal"><span class="pre">simple</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">LoggingMeterRegistryFactory</span></code></td>
<td><code class="docutils literal"><span class="pre">logging</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">CloudWatchMeterRegistryFactory</span></code></td>
<td><code class="docutils literal"><span class="pre">cloudwatch</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">DatadogMeterRegistryFactory</span></code></td>
<td><code class="docutils literal"><span class="pre">datadog</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">StatsdMeterRegistryFactory</span></code></td>
<td><code class="docutils literal"><span class="pre">statsd</span></code></td>
</tr>
</tbody>
</table>
<p><code class="docutils literal"><span class="pre">&lt;key&gt;</span></code> should be the same name as the method defined in <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/config/MeterRegistryConfig.html">configuration class (external site)</a>  that Micrometer provides per registry.</p>
<p>For example, there is a configuration class named <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-registry-datadog/1.5.4/io/micrometer/datadog/DatadogConfig.html">DatadogConfig (external site)</a> for <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-registry-datadog/1.5.4/io/micrometer/datadog/DatadogMeterRegistry.html">DatadogMeterRegistry (external site)</a> .
And in this configuration class, a method named <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-registry-datadog/1.5.4/io/micrometer/datadog/DatadogConfig.html#apiKey()">apyKey (external site)</a> is defined.</p>
<p>Therefore, can configure your <code class="docutils literal"><span class="pre">apiKey</span></code> by writing in your <code class="docutils literal"><span class="pre">micrometer.properties</span></code> like this.</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>nablarch.micrometer.datadog.apiKey=XXXXXXXXXXXXXXXXXXXX
</pre></div>
</div>
</div>
<div class="section" id="override-with-os-environment-variables-or-system-properties">
<h3><a class="toc-backref" href="#id13">Override with OS environment variables or system properties</a><a class="headerlink" href="#override-with-os-environment-variables-or-system-properties" title="Permalink to this headline">¶</a></h3>
<p>The configuration values in <code class="docutils literal"><span class="pre">micrometer.properties</span></code> can be overridden by OS environment variables or system properties.</p>
<p>The configuration values are adopted in the following order of priority.</p>
<ol class="arabic simple">
<li>The value specified in system properties</li>
<li>Value specified in OS environment variables</li>
<li>Configuration values for <code class="docutils literal"><span class="pre">micrometer.properties</span></code></li>
</ol>
<p>For example, suppose you have the following conditions set.</p>
<p>micrometer.properties</p>
<blockquote>
<div><div class="highlight-text"><div class="highlight"><pre><span></span>nablarch.micrometer.example.one=PROPERTIES
nablarch.micrometer.example.two=PROPERTIES
nablarch.micrometer.example.three=PROPERTIES
</pre></div>
</div>
</div></blockquote>
<p>OS environment variables</p>
<blockquote>
<div><div class="highlight-text"><div class="highlight"><pre><span></span>$ export NABLARCH_MICROMETER_EXAMPLE_TWO=OS_ENV

$ export NABLARCH_MICROMETER_EXAMPLE_THREE=OS_ENV
</pre></div>
</div>
</div></blockquote>
<p>system properties</p>
<blockquote>
<div><div class="highlight-text"><div class="highlight"><pre><span></span>-Dnablarch.micrometer.example.three=SYSTEM_PROP
</pre></div>
</div>
</div></blockquote>
<p>In this case, each set value will eventually adopt the following values</p>
<table border="1" class="docutils">
<colgroup>
<col width="38%" />
<col width="62%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Key</th>
<th class="head">Value adopted</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><code class="docutils literal"><span class="pre">one</span></code></td>
<td><code class="docutils literal"><span class="pre">PROPERTIES</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">two</span></code></td>
<td><code class="docutils literal"><span class="pre">OS_ENV</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">three</span></code></td>
<td><code class="docutils literal"><span class="pre">SYSTEM_PROP</span></code></td>
</tr>
</tbody>
</table>
<p>For rules on naming when overwriting with OS environment variables, see <a class="reference internal" href="../application_framework/libraries/repository.html#repository-overwrite-environment-configuration-by-os-env-var-naming-rule"><span>About the names of OS environment variables</span></a> .</p>
</div>
<div class="section" id="changing-the-configuration-prefix">
<h3><a class="toc-backref" href="#id14">Changing the configuration prefix</a><a class="headerlink" href="#changing-the-configuration-prefix" title="Permalink to this headline">¶</a></h3>
<p>The configuration prefix (<code class="docutils literal"><span class="pre">nablarch.micrometer.&lt;subPrefix&gt;</span></code>) can be changed by specifying the <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/MeterRegistryFactory.html#setPrefix-java.lang.String-" title="nablarch.integration.micrometer.MeterRegistryFactory.setPrefix(java.lang.String)">prefix</a> property for each registry factory.</p>
<p>Below is an example of changing the prefix.</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.logging.LoggingMeterRegistryFactory&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="na">ref=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applicationDisposer&quot;</span> <span class="na">ref=</span><span class="s">&quot;disposer&quot;</span> <span class="nt">/&gt;</span>

  <span class="c">&lt;!-- Configuring the prefix property with an arbitrary prefix --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;prefix&quot;</span> <span class="na">value=</span><span class="s">&quot;sample.prefix&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<p>In this case, the <code class="docutils literal"><span class="pre">micrometer.properties</span></code> can be configured as follows</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>sample.prefix.step=10s
</pre></div>
</div>
</div>
<div class="section" id="changing-the-place-of-the-configuration-file">
<h3><a class="toc-backref" href="#id15">Changing the place of the configuration file</a><a class="headerlink" href="#changing-the-place-of-the-configuration-file" title="Permalink to this headline">¶</a></h3>
<p>The place of the configuration file (<code class="docutils literal"><span class="pre">micrometer.properties</span></code>) can be changed in the following ways.</p>
<p>First, specify the path of the XML file to load the configuration file in <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/MeterRegistryFactory.html#setXmlConfigPath-java.lang.String-" title="nablarch.integration.micrometer.MeterRegistryFactory.setXmlConfigPath(java.lang.String)">xmlConfigPath</a> property of the registry factory.</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.logging.LoggingMeterRegistryFactory&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="na">ref=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applicationDisposer&quot;</span> <span class="na">ref=</span><span class="s">&quot;disposer&quot;</span> <span class="nt">/&gt;</span>

  <span class="c">&lt;!-- Specify the path of the XML file to load the configuration file --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;xmlConfigPath&quot;</span> <span class="na">value=</span><span class="s">&quot;config/metrics.xml&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<p>And, place the XML file to load the configuration file at the place specified in the <code class="docutils literal"><span class="pre">xmlConfigPath</span></code> property.
In the following configuration, <code class="docutils literal"><span class="pre">config/metrics.properties</span></code> in the classpath will be loaded as a configuration file.</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;component-configuration</span>
        <span class="na">xmlns=</span><span class="s">&quot;http://tis.co.jp/nablarch/component-configuration&quot;</span>
        <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
        <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://tis.co.jp/nablarch/component-configuration https://nablarch.github.io/schema/component-configuration.xsd&quot;</span><span class="nt">&gt;</span>

  <span class="c">&lt;!-- Load Micrometer adapter Configuration --&gt;</span>
  <span class="nt">&lt;config-file</span> <span class="na">file=</span><span class="s">&quot;config/metrics.properties&quot;</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;/component-configuration&gt;</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p>This XML file can be written in the same format as the component configuration file.</p>
<p class="last">However, even if you define a component in this file, you will not be able to get a reference from the System Repository.</p>
</div>
</div>
</div>
<div class="section" id="metrics-collected-by-the-defaultmeterbinderlistprovider">
<span id="micrometer-default-metrics"></span><h2><a class="toc-backref" href="#id16">Metrics collected by the DefaultMeterBinderListProvider</a><a class="headerlink" href="#metrics-collected-by-the-defaultmeterbinderlistprovider" title="Permalink to this headline">¶</a></h2>
<p><a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/binder/MeterBinder.html">MeterBinder (external site)</a> list generated by the <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/DefaultMeterBinderListProvider.html" title="nablarch.integration.micrometer.DefaultMeterBinderListProvider">DefaultMeterBinderListProvider</a> contains the following classes.</p>
<ul class="simple">
<li><a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/binder/jvm/JvmMemoryMetrics.html">JvmMemoryMetrics (external site)</a></li>
<li><a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/binder/jvm/JvmGcMetrics.html">JvmGcMetrics (external site)</a></li>
<li><a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/binder/jvm/JvmThreadMetrics.html">JvmThreadMetrics (external site)</a></li>
<li><a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/binder/jvm/ClassLoaderMetrics.html">ClassLoaderMetrics (external site)</a></li>
<li><a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/binder/system/ProcessorMetrics.html">ProcessorMetrics (external site)</a></li>
<li><a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/binder/system/FileDescriptorMetrics.html">FileDescriptorMetrics (external site)</a></li>
<li><a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/binder/system/UptimeMetrics.html">UptimeMetrics (external site)</a></li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/binder/jvm/NablarchGcCountMetrics.html" title="nablarch.integration.micrometer.instrument.binder.jvm.NablarchGcCountMetrics">NablarchGcCountMetrics</a></li>
</ul>
<p>This will enable the following metrics to be collected.</p>
<table border="1" class="docutils">
<colgroup>
<col width="50%" />
<col width="50%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td>Metrics Name</td>
<td>Description</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">jvm.buffer.count</span></code></td>
<td>The number of buffers in the buffer pool</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">jvm.buffer.memory.used</span></code></td>
<td>Buffer pool usage</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">jvm.buffer.total.capacity</span></code></td>
<td>Total capacity of the buffer pool</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">jvm.memory.used</span></code></td>
<td>Memory pool memory usage</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">jvm.memory.committed</span></code></td>
<td>The committed amount of memory in the memory pool</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">jvm.memory.max</span></code></td>
<td>The maximum amount of memory in the memory pool</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">jvm.gc.max.data.size</span></code></td>
<td>The maximum amount of memory in the OLD space</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">jvm.gc.live.data.size</span></code></td>
<td>Memory usage in the OLD space after Full GC</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">jvm.gc.memory.promoted</span></code></td>
<td>Incremental memory usage in the OLD space, increased before and after GC</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">jvm.gc.memory.allocated</span></code></td>
<td>Incremental memory usage in the young space from the previous GC to the current GC</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">jvm.gc.concurrent.phase.time</span></code></td>
<td>Concurrent phase processing time</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">jvm.gc.pause</span></code></td>
<td>Time spent on GC pause</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">jvm.threads.peak</span></code></td>
<td>Peak number of threads</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">jvm.threads.daemon</span></code></td>
<td>The number of current daemon threads</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">jvm.threads.live</span></code></td>
<td>The number of current non-demon threads</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">jvm.threads.states</span></code></td>
<td>The number of current threads per state</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">jvm.classes.loaded</span></code></td>
<td>The number of classes currently loaded</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">jvm.classes.unloaded</span></code></td>
<td>The number of classes that have been unloaded since the JVM was started</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">system.cpu.count</span></code></td>
<td>The number of processors available in the JVM</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">system.load.average.1m</span></code></td>
<td>Last minute system load average （Reference: <a class="reference external" href="https://docs.oracle.com/javase/jp/11/docs/api/java.management/java/lang/management/OperatingSystemMXBean.html#getSystemLoadAverage()">OperatingSystemMXBean(external site)</a> ）</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">system.cpu.usage</span></code></td>
<td>Recent system-wide CPU usage</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">process.cpu.usage</span></code></td>
<td>The JVM&#8217;s recent CPU usage</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">process.files.open</span></code></td>
<td>The number of open file descriptors</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">process.files.max</span></code></td>
<td>Maximum number of file descriptors</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">process.uptime</span></code></td>
<td>JVM uptime</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">process.start.time</span></code></td>
<td>JVM startup time (UNIX time)</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">jvm.gc.count</span></code></td>
<td>Number of GC</td>
</tr>
</tbody>
</table>
<p>See <a class="reference internal" href="#micrometer-metrics-output-example"><span>Execution Result</span></a> for an example of the actual metrics to be collected.</p>
</div>
<div class="section" id="configuring-common-tags">
<h2><a class="toc-backref" href="#id17">Configuring Common Tags</a><a class="headerlink" href="#configuring-common-tags" title="Permalink to this headline">¶</a></h2>
<p>The <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/MeterRegistryFactory.html#setTags-java.util.Map-" title="nablarch.integration.micrometer.MeterRegistryFactory.setTags(java.util.Map)">tags</a> property of the registry factory allows you to configure tags that are common to all metrics.</p>
<p>This feature can be used, for example, to set information that can identify the host, instance, region, etc. on which an application is running.</p>
<p>Describe how to set it up below.</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.logging.LoggingMeterRegistryFactory&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="na">ref=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applicationDisposer&quot;</span> <span class="na">ref=</span><span class="s">&quot;disposer&quot;</span> <span class="nt">/&gt;</span>

  <span class="c">&lt;!-- Configure common tags in the tags property --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;tags&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;map&gt;</span>
      <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;foo&quot;</span> <span class="na">value=</span><span class="s">&quot;FOO&quot;</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;bar&quot;</span> <span class="na">value=</span><span class="s">&quot;BAR&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/map&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<p>The <code class="docutils literal"><span class="pre">tags</span></code> property is of type <code class="docutils literal"><span class="pre">Map&lt;String,</span> <span class="pre">String&gt;</span></code>  and can be configured using a <code class="docutils literal"><span class="pre">&lt;map&gt;</span></code> tag.
In addition, the map key is mapped to the name of the tag and the map value is mapped to the tag value.</p>
<p>In the case of the above setup, the metrics to be collected are as follows.</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>（Omitted）
2020-09-04 17:30:06.656 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: process.start.time{bar=BAR,foo=FOO} value=444224h 29m 38.875000064s
2020-09-04 17:30:06.656 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: process.uptime{bar=BAR,foo=FOO} value=27.849s
2020-09-04 17:30:06.656 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: system.cpu.count{bar=BAR,foo=FOO} value=8
2020-09-04 17:30:06.657 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: system.cpu.usage{bar=BAR,foo=FOO} value=0.475654
</pre></div>
</div>
<p>Can see that all metrics are set with the tags <code class="docutils literal"><span class="pre">foo=FOO</span></code>, <code class="docutils literal"><span class="pre">bar=BAR</span></code> .</p>
</div>
<div class="section" id="working-with-monitoring-services">
<h2><a class="toc-backref" href="#id18">Working with monitoring services</a><a class="headerlink" href="#working-with-monitoring-services" title="Permalink to this headline">¶</a></h2>
<p>In order to work with monitoring services, the following settings need to be made, broadly categorized.</p>
<ol class="arabic simple">
<li>Add a Micrometer module for each monitoring service to the dependencies.</li>
<li>Define a registry factory for the monitoring service as a component.</li>
<li>Configuring other proprietary settings for each monitoring service.</li>
</ol>
<p>This section describes how to work with each of the monitoring services.</p>
<div class="section" id="working-with-datadog">
<h3><a class="toc-backref" href="#id19">Working with Datadog</a><a class="headerlink" href="#working-with-datadog" title="Permalink to this headline">¶</a></h3>
<dl class="docutils">
<dt>Adding Dependencies</dt>
<dd><div class="first last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>io.micrometer<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>micrometer-registry-datadog<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>1.5.4<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</pre></div>
</div>
</dd>
<dt>Declare the Registry Factory</dt>
<dd><div class="first last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.datadog.DatadogMeterRegistryFactory&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="na">ref=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applicationDisposer&quot;</span> <span class="na">ref=</span><span class="s">&quot;disposer&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
</dd>
<dt>Configuring the API key</dt>
<dd><div class="first highlight-text"><div class="highlight"><pre><span></span>nablarch.micrometer.datadog.apiKey=XXXXXXXXXXXXXXXX
</pre></div>
</div>
<p>The API key can be set in <code class="docutils literal"><span class="pre">nablarch.micrometer.datadog.apyKey</span></code> .</p>
<p class="last">See <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-registry-datadog/1.5.4/io/micrometer/datadog/DatadogConfig.html">DatadogConfig (external site)</a> for other configuration.</p>
</dd>
<dt>Disable the registry</dt>
<dd><div class="first highlight-text"><div class="highlight"><pre><span></span>nablarch.micrometer.datadog.enabled=false
nablarch.micrometer.datadog.apiKey=XXXXXXXXXXXXXXXX
</pre></div>
</div>
<p>You can disable the registry by setting <code class="docutils literal"><span class="pre">nablarch.micrometer.datadog.enabled</span></code> to <code class="docutils literal"><span class="pre">false</span></code> in <code class="docutils literal"><span class="pre">micrometer.properties</span></code>.
You can override this configuration by environment variable.
Therefor, you can enable the registry by setting <code class="docutils literal"><span class="pre">true</span></code> with environment variable only at production.</p>
<div class="last admonition important">
<p class="first admonition-title">Important</p>
<p class="last">Even if you disable the registry, you still need to set some value for <code class="docutils literal"><span class="pre">nablarch.micrometer.datadog.apiKey</span></code>.
You can set dummy value to the <code class="docutils literal"><span class="pre">apiKey</span></code>.</p>
</div>
</dd>
</dl>
</div>
<div class="section" id="working-with-cloudwatch">
<h3><a class="toc-backref" href="#id20">Working with CloudWatch</a><a class="headerlink" href="#working-with-cloudwatch" title="Permalink to this headline">¶</a></h3>
<dl class="docutils">
<dt>Adding Dependencies</dt>
<dd><div class="first last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>io.micrometer<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>micrometer-registry-cloudwatch2<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>1.5.4<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</pre></div>
</div>
</dd>
<dt>Declare the Registry Factory</dt>
<dd><div class="first last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.cloudwatch.CloudWatchMeterRegistryFactory&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="na">ref=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applicationDisposer&quot;</span> <span class="na">ref=</span><span class="s">&quot;disposer&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
</dd>
<dt>Configure the region, access keys, etc</dt>
<dd><div class="first highlight-bash"><div class="highlight"><pre><span></span>$ <span class="nb">export</span> <span class="nv">AWS_REGION</span><span class="o">=</span>ap-northeast-1

$ <span class="nb">export</span> <span class="nv">AWS_ACCESS_KEY_ID</span><span class="o">=</span>XXXXXXXXXXXXXXXXXXXXX

$ <span class="nb">export</span> <span class="nv">AWS_SECRET_ACCESS_KEY</span><span class="o">=</span>YYYYYYYYYYYYYYYYYYYYY
</pre></div>
</div>
<p>The <code class="docutils literal"><span class="pre">micrometer-registry-cloudwatch2</span></code> module uses the AWS SDK.
Therefore, the configuration of the region, access keys, etc. follows the AWS SDK ways.</p>
<p class="last">The above describes an example of how to set up an OS environment variable in Linux.
For more information, see the <a class="reference external" href="https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html">AWS documentation (external site)</a> .</p>
</dd>
<dt>Configuring the namespace</dt>
<dd><div class="first highlight-text"><div class="highlight"><pre><span></span>nablarch.micrometer.cloudwatch.namespace=test
</pre></div>
</div>
<p>Custom metrics namespaces can be configured in <code class="docutils literal"><span class="pre">nablarch.micrometer.cloudwatch.namespace</span></code> .</p>
<p class="last">See <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-registry-cloudwatch2/1.5.4/io/micrometer/cloudwatch2/CloudWatchConfig.html">CloudWatchConfig (external site)</a> for more configuration information.</p>
</dd>
<dt>More detailed configuration</dt>
<dd><p class="first">If want more detailed configuration that cannot be specified in the OS environment variables and configuration files, you can write a custom provider that implements <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/cloudwatch/CloudWatchAsyncClientProvider.html" title="nablarch.integration.micrometer.cloudwatch.CloudWatchAsyncClientProvider">CloudWatchAsyncClientProvider</a> .</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nn">example.micrometer.cloudwatch</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">nablarch.integration.micrometer.cloudwatch.CloudWatchAsyncClientProvider</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">software.amazon.awssdk.services.cloudwatch.CloudWatchAsyncClient</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomCloudWatchAsyncClientProvider</span> <span class="kd">implements</span> <span class="n">CloudWatchAsyncClientProvider</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">CloudWatchAsyncClient</span> <span class="nf">provide</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">CloudWatchAsyncClient</span>
                <span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">asyncConfiguration</span><span class="o">(...)</span> <span class="c1">// Do your own configuration</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/cloudwatch/CloudWatchAsyncClientProvider.html" title="nablarch.integration.micrometer.cloudwatch.CloudWatchAsyncClientProvider">CloudWatchAsyncClientProvider</a> has a <code class="docutils literal"><span class="pre">provide()</span></code> method that provides the <code class="docutils literal"><span class="pre">CloudWatchAsyncClient</span></code> .
A custom provider implements the <code class="docutils literal"><span class="pre">provide()</span></code> method to build and return the <code class="docutils literal"><span class="pre">CloudWatchAsyncClient</span></code> with your desired configuration.</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.cloudwatch.CloudWatchMeterRegistryFactory&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="na">ref=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applicationDisposer&quot;</span> <span class="na">ref=</span><span class="s">&quot;disposer&quot;</span> <span class="nt">/&gt;</span>

  <span class="c">&lt;!-- Configure a custom provider for the cloudWatchAsyncClientProvider property --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;cloudWatchAsyncClientProvider&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;example.micrometer.cloudwatch.CustomCloudWatchAsyncClientProvider&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<p>The custom provider you write will be configured in the <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/cloudwatch/CloudWatchMeterRegistryFactory.html#setCloudWatchAsyncClientProvider-nablarch.integration.micrometer.cloudwatch.CloudWatchAsyncClientProvider-" title="nablarch.integration.micrometer.cloudwatch.CloudWatchMeterRegistryFactory.setCloudWatchAsyncClientProvider(nablarch.integration.micrometer.cloudwatch.CloudWatchAsyncClientProvider)">cloudWatchAsyncClientProvider</a> property of the <code class="docutils literal"><span class="pre">CloudWatchMeterRegistryFactory</span></code> .</p>
<p>This enables the <code class="docutils literal"><span class="pre">CloudWatchAsyncClient</span></code> generated by the custom provider to be used in the cooperation of the metrics.</p>
<div class="last admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">By default, the instance created by <a class="reference external" href="https://javadoc.io/static/software.amazon.awssdk/cloudwatch/2.13.4/software/amazon/awssdk/services/cloudwatch/CloudWatchAsyncClient.html#create--">CloudWatchAsyncClient.create() (external site)</a> is used.</p>
</div>
</dd>
<dt>Disable the registry</dt>
<dd><div class="first highlight-text"><div class="highlight"><pre><span></span>nablarch.micrometer.cloudwatch.enabled=false
nablarch.micrometer.cloudwatch.namespace=test
</pre></div>
</div>
<p>You can disable the registry by setting <code class="docutils literal"><span class="pre">nablarch.micrometer.cloudwatch.enabled</span></code> to <code class="docutils literal"><span class="pre">false</span></code> in <code class="docutils literal"><span class="pre">micrometer.properties</span></code>.
You can override this configuration by environment variable.
Therefor, you can enable the registry by setting <code class="docutils literal"><span class="pre">true</span></code> with environment variable only at production.</p>
<div class="last admonition important">
<p class="first admonition-title">Important</p>
<p>Even if you disable the registry, you still need to set some value for <code class="docutils literal"><span class="pre">nablarch.micrometer.cloudwatch.namespace</span></code>.
You also need to set the environment variable <code class="docutils literal"><span class="pre">AWS_REGION</span></code>.</p>
<p class="last">You can set dummy values to the <code class="docutils literal"><span class="pre">namespace</span></code> and <code class="docutils literal"><span class="pre">AWS_REGION</span></code>.</p>
</div>
</dd>
</dl>
</div>
<div class="section" id="working-with-azure">
<h3><a class="toc-backref" href="#id21">Working with Azure</a><a class="headerlink" href="#working-with-azure" title="Permalink to this headline">¶</a></h3>
<dl class="docutils">
<dt>How to send metrics to Azure with Micrometer</dt>
<dd><p class="first">Azure provides the library using the Java agent (<strong>Java 3.0 agent</strong>) for sending metrics from Java applications to Azure.</p>
<ul class="simple">
<li><a class="reference external" href="https://docs.microsoft.com/en-us/azure/azure-monitor/app/java-in-process-agent">Java codeless application monitoring Azure Monitor Application Insights(external site)</a></li>
</ul>
<p>The Java 3.0 agent automatically collects metrics output to Micrometer&#8217;s <a class="reference external" href="https://micrometer.io/docs/concepts#_global_registry">Global Registry(external site)</a>, and sends to Azure.</p>
<ul class="simple">
<li><a class="reference external" href="https://docs.microsoft.com/en-us/azure/azure-monitor/app/java-in-process-agent#send-custom-telemetry-from-your-application">Send custom telemetry from your application(external site)</a></li>
</ul>
<div class="admonition important">
<p class="first admonition-title">Important</p>
<p>The Java 3.0 agent loads a large number of jar files during the initialization process.
This may cause frequent GC during the initialization process of the Java 3.0 agent.</p>
<p>Therefore, note that the performance may temporarily deteriorate due to GC for a while after the application is launched.</p>
<p class="last">Also, under heavy load, the overhead caused by the processing of the Java 3.0 agent may affect the performance.
Therefore, you should confirm the performance in the performance test with the Java 3.0 agent as in production.</p>
</div>
<p class="last">For information on how to set up a Java 3.0 agent, see <a class="reference internal" href="../application_framework/cloud_native/distributed_tracing/azure_distributed_tracing.html#azure-distributed-tracing"><span>Distributed Tracing in Azure</span></a> .</p>
</dd>
<dt>How to configure Micrometer adaptor</dt>
<dd><p class="first">You need to configure following settings to send metrics to Azure with Micrometer adaptor.</p>
<ul class="simple">
<li>Add the Java 3.0 agent to your application&#8217;s JVM args</li>
<li>Define a <code class="docutils literal"><span class="pre">MeterRegistry</span></code> component using the Global Registry</li>
</ul>
<p>See the <a class="reference external" href="https://docs.microsoft.com/en-us/azure/azure-monitor/app/java-in-process-agent#quickstart">Azure documentation(external site)</a> for how to set JVM args.</p>
<p>This adaptor provides <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/GlobalMeterRegistryFactory.html" title="nablarch.integration.micrometer.GlobalMeterRegistryFactory">GlobalMeterRegistryFactory</a> for factory of Global Registry component.
The following is an example of a component definition for this factory class.</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.GlobalMeterRegistryFactory&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="na">ref=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applicationDisposer&quot;</span> <span class="na">ref=</span><span class="s">&quot;disposer&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<p>This configuration makes the Global Registry to collect metrics.
The Java 3.0 agent sends metrics collected by the Global Registry to Azure.</p>
<div class="last admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last"><code class="docutils literal"><span class="pre">MeterRegistry</span></code> is not used in this approach using Java 3.0 agent.
Therefore, you can send metrics without additional dependent modules for Azure.</p>
</div>
</dd>
<dt>Configuration</dt>
<dd><p class="first">The metrics are sent by the Java 3.0 agent provided by Azure.
Therefore, you must use configuration options provided by the Java 3.0 agent.</p>
<p>For more information, see <a class="reference external" href="https://docs.microsoft.com/en-us/azure/azure-monitor/app/java-standalone-config">Configuration Options(external site)</a>.</p>
<div class="last admonition important">
<p class="first admonition-title">Important</p>
<p class="last">The configuration file for this adapter, <code class="docutils literal"><span class="pre">micrometer.properties</span></code>, is not used.
However, you must place the <code class="docutils literal"><span class="pre">micrometer.properties</span></code> file (the content can be empty).</p>
</div>
</dd>
<dt>Disable the registry</dt>
<dd>You can disable to send metrics by launching application without the Java 3.0 agent.</dd>
</dl>
</div>
<div class="section" id="working-with-datadog-using-statsd">
<h3><a class="toc-backref" href="#id22">Working with Datadog using StatsD</a><a class="headerlink" href="#working-with-datadog-using-statsd" title="Permalink to this headline">¶</a></h3>
<p>Datadog supports <a class="reference external" href="https://docs.datadoghq.com/developers/dogstatsd/?tab=hostagent">DogStatsD (external site)</a>, which is a cooperation using the <a class="reference external" href="https://github.com/statsd/statsd">StatsD (external site)</a> protocol.</p>
<p>Therefore, Can use <code class="docutils literal"><span class="pre">micrometer-registry-statsd</span></code> module to connect to Datadog with StatsD.</p>
<p>In this section, we will use the case of cooperation with Datadog using the StatsD protocol as an example.
For more information on how to install DogStatsD, refer to <a class="reference external" href="https://docs.datadoghq.com/agent/">Datadog&#8217;s site (external site)</a> .</p>
<dl class="docutils">
<dt>Adding Dependencies</dt>
<dd><div class="first last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>io.micrometer<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>micrometer-registry-statsd<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>1.5.4<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</pre></div>
</div>
</dd>
<dt>Declare the Registry Factory</dt>
<dd><div class="first last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.statsd.StatsdMeterRegistryFactory&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="na">ref=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;applicationDisposer&quot;</span> <span class="na">ref=</span><span class="s">&quot;disposer&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
</dd>
<dt>Write a configuration file if necessary</dt>
<dd><p class="first">The configuration for working with the StatsD daemon has been adjusted so that the default values match those of DogStatsD installed in its default configuration.</p>
<p>Therefore, if DogStatsD is installed in the default configuration, the cooperation by DogStatsD will work without any explicit settings.</p>
<p>If you have installed a non-default configuration, refer to <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-registry-statsd/1.5.4/io/micrometer/statsd/StatsdConfig.html">StatsdConfig (external site)</a> to configure it for actual environment.</p>
<div class="last highlight-text"><div class="highlight"><pre><span></span># Change Port
nablarch.micrometer.statsd.port=9999
</pre></div>
</div>
</dd>
<dt>Disable the registry</dt>
<dd><div class="first highlight-text"><div class="highlight"><pre><span></span>nablarch.micrometer.statsd.enabled=false
</pre></div>
</div>
<p class="last">You can disable the registry by setting <code class="docutils literal"><span class="pre">nablarch.micrometer.statsd.enabled</span></code> to <code class="docutils literal"><span class="pre">false</span></code> in <code class="docutils literal"><span class="pre">micrometer.properties</span></code>.
You can override this configuration by environment variable.
Therefor, you can enable the registry by setting <code class="docutils literal"><span class="pre">true</span></code> with environment variable only at production.</p>
</dd>
</dl>
</div>
</div>
<div class="section" id="examples-of-metrics-for-each-application-type">
<h2><a class="toc-backref" href="#id23">Examples of metrics for each application type.</a><a class="headerlink" href="#examples-of-metrics-for-each-application-type" title="Permalink to this headline">¶</a></h2>
<p>In this section, we will explain what metrics should be collected for each application type (web and batch).</p>
<div class="section" id="examples-of-metrics-for-web-applications">
<h3><a class="toc-backref" href="#id24">Examples of metrics for web applications</a><a class="headerlink" href="#examples-of-metrics-for-web-applications" title="Permalink to this headline">¶</a></h3>
<dl class="docutils">
<dt>Processing time for HTTP requests</dt>
<dd><p class="first">By measuring the processing time for each HTTP request, you can do the following.</p>
<ul class="simple">
<li>You can check how much traffic each URL</li>
<li>You can check how long it takes to process the request</li>
</ul>
<p>By measuring percentiles, you can also check how long it takes to process most of the requests.</p>
<p>See the following guide for more informations on how to collect these metrics.</p>
<ul class="last simple">
<li><a class="reference internal" href="#micrometer-timer-metrics-handler"><span>Handler to measure processing time</span></a></li>
<li><a class="reference internal" href="#micrometer-timer-metrics-handler-percentiles"><span>Collect the percentiles</span></a></li>
</ul>
</dd>
<dt>Processing time for SQL</dt>
<dd><p class="first">By measuring the SQL processing time, you can do the following.</p>
<ul class="simple">
<li>You can check how long it takes for each SQL to be processed</li>
<li>You can check for SQLs that are taking longer than expected</li>
</ul>
<p>See the following guide for more informations on how to collect metrics.</p>
<ul class="last simple">
<li><a class="reference internal" href="#micrometer-sql-time"><span>Measure SQL processing time</span></a></li>
</ul>
</dd>
<dt>Output count per log level</dt>
<dd><p class="first">By measuring the count of outputs per log level, you can do the following.</p>
<ul class="simple">
<li>You can check if the warning log is output an abnormal number of times (attack detection)</li>
<li>You can detect error logs</li>
</ul>
<p>See the following guide for more informations on how to collect metrics.</p>
<ul class="last simple">
<li><a class="reference internal" href="#micrometer-log-count"><span>Measure the output count per log level</span></a></li>
</ul>
</dd>
<dt>Status of resources provided by application servers and libraries</dt>
<dd><p class="first">By collecting metrics on the status of resources provided by application servers and libraries (thread pools, DB connection pools, etc.), you can use it as a source of information to identify the cause of system failures.</p>
<p>Many application servers expose the status of their resources through MBean in JMX.
See the following guide for more informations on how to collect metrics.</p>
<ul class="last simple">
<li><a class="reference internal" href="#micrometer-mbean-metrics"><span>Measure the value obtained from any MBean as a metric</span></a></li>
</ul>
</dd>
</dl>
</div>
<div class="section" id="examples-of-metrics-for-batch-applications">
<h3><a class="toc-backref" href="#id25">Examples of metrics for batch applications</a><a class="headerlink" href="#examples-of-metrics-for-batch-applications" title="Permalink to this headline">¶</a></h3>
<dl class="docutils">
<dt>Processing time for batch</dt>
<dd><p class="first">By measuring the processing time of batches in normally, you can know the processing time under normal conditions.
Therefore, you can quickly detect abnormalities when processing time deviates from normal.</p>
<p class="last">You can get processing time of batch by <code class="docutils literal"><span class="pre">process.uptime</span></code> described in <a class="reference internal" href="#micrometer-default-metrics"><span>Metrics collected by the DefaultMeterBinderListProvider</span></a>.</p>
</dd>
<dt>Processing time per transaction</dt>
<dd><p class="first">By measuring the processing time per transaction, you can check whether each threads are distributed evenly in the multi-thread batch.</p>
<p>As with processing time for batch, you can quickly detect abnormalities when processing time deviates from normal.</p>
<p>See the following guide for more informations on how to collect metrics.</p>
<ul class="last simple">
<li><a class="reference internal" href="#micrometer-adaptor-batch-transaction-time"><span>Measure the processing time per transaction of a batch</span></a></li>
</ul>
</dd>
<dt>Processed count with batch</dt>
<dd><p class="first">By measuring the count that was processed by batch, you can do the following.</p>
<ul class="simple">
<li>You can check the progress of the batch</li>
<li>You can check that the batch process is proceeding at the expected speed</li>
<li>You can check that the count processed with batch is expected</li>
</ul>
<p>See the following guide for more informations on how to collect metrics.</p>
<ul class="last simple">
<li><a class="reference internal" href="#micrometer-batch-processed-count"><span>Measure the count that was processed by batch</span></a></li>
</ul>
</dd>
<dt>Processing time for SQL</dt>
<dd><p class="first">By measuring the SQL processing time, you can do the following.</p>
<ul class="simple">
<li>You can check how long it takes for each SQL to be processed</li>
<li>You can check for SQLs that are taking longer than expected</li>
</ul>
<p>See the following guide for more informations on how to collect metrics.</p>
<ul class="last simple">
<li><a class="reference internal" href="#micrometer-sql-time"><span>Measure SQL processing time</span></a></li>
</ul>
</dd>
<dt>Output count per log level</dt>
<dd><p class="first">By measuring the count of outputs per log level, you can detect warning logs and error logs.</p>
<p>See the following guide for more informations on how to collect metrics.</p>
<ul class="last simple">
<li><a class="reference internal" href="#micrometer-log-count"><span>Measure the output count per log level</span></a></li>
</ul>
</dd>
<dt>Status of resources provided by libraries</dt>
<dd><p class="first">By collecting metrics on the status of resources provided by  libraries (DB connection pools, etc.), you can use it as a source of information to identify the cause of system failures.</p>
<p>Some libraries expose the status of the resource through MBean in JMX.
See the following guide for more informations on how to collect metrics.</p>
<ul class="last simple">
<li><a class="reference internal" href="#micrometer-mbean-metrics"><span>Measure the value obtained from any MBean as a metric</span></a></li>
</ul>
</dd>
</dl>
</div>
</div>
<div class="section" id="handler-to-measure-processing-time">
<span id="micrometer-timer-metrics-handler"></span><h2><a class="toc-backref" href="#id26">Handler to measure processing time</a><a class="headerlink" href="#handler-to-measure-processing-time" title="Permalink to this headline">¶</a></h2>
<p>By setting <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/handler/TimerMetricsHandler.html" title="nablarch.integration.micrometer.instrument.handler.TimerMetricsHandler">TimerMetricsHandler</a> to the handler queue, you can measure processing time of subsequent handlers as metrics.
You can monitor the average and maximum processing times in handler queue.</p>
<p><code class="docutils literal"><span class="pre">TimerMetricsHandler</span></code> needs an instance of a class that implements the <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/handler/HandlerMetricsMetaDataBuilder.html" title="nablarch.integration.micrometer.instrument.handler.HandlerMetricsMetaDataBuilder">HandlerMetricsMetaDataBuilder</a> interface.
The <code class="docutils literal"><span class="pre">HandlerMetrcisMetaDataBuilder</span></code> provides a function to build the following meta data for setting to collected metrics.</p>
<ul class="simple">
<li>Name of metrics</li>
<li>Description of metrics</li>
<li>Tag list of metrics</li>
</ul>
<p>The following is an example for implementation of <code class="docutils literal"><span class="pre">HandlerMetricsMetaDataBuilder</span></code>.</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">io.micrometer.core.instrument.Tag</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.fw.ExecutionContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.integration.micrometer.instrument.handler.HandlerMetricsMetaDataBuilder</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomHandlerMetricsMetaDataBuilder</span><span class="o">&lt;</span><span class="n">TData</span><span class="o">,</span> <span class="n">TResult</span><span class="o">&gt;</span>
    <span class="kd">implements</span> <span class="n">HandlerMetricsMetaDataBuilder</span><span class="o">&lt;</span><span class="n">TData</span><span class="o">,</span> <span class="n">TResult</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getMetricsName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">&quot;metrics.name&quot;</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getMetricsDescription</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">&quot;Description of this metrics.&quot;</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Tag</span><span class="o">&gt;</span> <span class="nf">buildTagList</span><span class="o">(</span><span class="n">TData</span> <span class="n">param</span><span class="o">,</span> <span class="n">ExecutionContext</span> <span class="n">executionContext</span><span class="o">,</span> <span class="n">TResult</span> <span class="n">tResult</span><span class="o">,</span> <span class="n">Throwable</span> <span class="n">thrownThrowable</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">Tag</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="s">&quot;FOO&quot;</span><span class="o">),</span> <span class="n">Tag</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="s">&quot;BAR&quot;</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
<p>You need implement methods <code class="docutils literal"><span class="pre">getMetricsName()</span></code> and <code class="docutils literal"><span class="pre">getMetricsDescription()</span></code> that return name and description of the metrics.</p>
<p><code class="docutils literal"><span class="pre">buildTagList()</span></code> is passed the parameters passed to the handler, the execution result of the subsequent handler, and any exceptions thrown by the subsequent handler (or <code class="docutils literal"><span class="pre">null</span></code> if no exceptions were thrown).
You need implement this method that returns list of tags for the metrics.</p>
<p>The following is an example for setting <code class="docutils literal"><span class="pre">TimerMetricsHandler</span></code> to the handler queue.</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="c">&lt;!-- Handler queue --&gt;</span>
<span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;webFrontController&quot;</span>
           <span class="na">class=</span><span class="s">&quot;nablarch.fw.web.servlet.WebFrontController&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;handlerQueue&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="c">&lt;!-- ... --&gt;</span>

      <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.instrument.handler.TimerMetricsHandler&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="na">ref=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="nt">/&gt;</span>

        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;handlerMetricsMetaDataBuilder&quot;</span><span class="nt">&gt;</span>
          <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;xxx.CustomHandlerMetricsMetaDataBuilder&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
      <span class="nt">&lt;/component&gt;</span>

      <span class="c">&lt;!-- ... --&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<p>Add <code class="docutils literal"><span class="pre">TimerMetricsHandler</span></code> to the handler queue and set the <code class="docutils literal"><span class="pre">HandlerMetricsMetaDataBuilder</span></code> component  to <code class="docutils literal"><span class="pre">handlerMetricsMetaDataBuilder</span></code> property.</p>
<p>Then, set the <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/MeterRegistry.html">MeterRegistry (external site)</a> created by registry factory to <code class="docutils literal"><span class="pre">meterRegistry</span></code> property.</p>
<p>Now the <code class="docutils literal"><span class="pre">TimerMetricsHandler</span></code> can collect the processing time of subsequent handlers as metrics.</p>
<p>Nablarch provides a class that implements <code class="docutils literal"><span class="pre">HandlerMetricsMetaDataBuilder</span></code> to provide the following function.
For more information, please refer to the linked explanation.</p>
<ul class="simple">
<li><a class="reference internal" href="#micrometer-adaptor-http-request-process-time-metrics"><span>Collect the processing time of HTTP requests</span></a></li>
</ul>
<div class="section" id="collect-the-percentiles">
<span id="micrometer-timer-metrics-handler-percentiles"></span><h3><a class="toc-backref" href="#id27">Collect the percentiles</a><a class="headerlink" href="#collect-the-percentiles" title="Permalink to this headline">¶</a></h3>
<p><code class="docutils literal"><span class="pre">TimerMetricsHandler</span></code> has the following properties to send percentiles to the monitoring services.</p>
<table border="1" class="docutils">
<colgroup>
<col width="50%" />
<col width="50%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td>Property</td>
<td>Description</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">percentiles</span></code></td>
<td>A list of percentile values to be collected.
If you want to collect the 95th percentile, specify <code class="docutils literal"><span class="pre">0.95</span></code>.</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">enablePercentileHistogram</span></code></td>
<td>A flag whether the bucket of collected histograms should be sent to the monitoring service.
If the monitoring service does not support a mechanism to calculate percentile values from histograms, this property will be ignored.</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">serviceLevelObjectives</span></code></td>
<td>A list of bucket values to be added to the histogram.
The unit is milliseconds.
This value is set based on the SLO (Service Level Objective).</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">minimumExpectedValue</span></code></td>
<td>A minimum value of the histogram bucket to be collected.
The unit is milliseconds.</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">maximumExpectedValue</span></code></td>
<td>A maximum value of the histogram bucket to be collected.
The unit is milliseconds.</td>
</tr>
</tbody>
</table>
<p>These properties are used as values to be set in <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/Timer.html">Timer(external site)</a> provided by Micrometer.
For more details, see the <a class="reference external" href="https://micrometer.io/docs/concepts#_histograms_and_percentiles">Micrometer documentation (external site)</a>.</p>
<p>These properties are unset by default. Therefore, no percentile information is collected.
You must configure these properties explicitly if you want collect percentiles.
The following is an example for configuration.</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.instrument.handler.TimerMetricsHandler&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="na">ref=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;handlerMetricsMetaDataBuilder&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.instrument.http.HttpRequestTimeMetricsMetaDataBuilder&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/property&gt;</span>

  <span class="c">&lt;!-- Collect 98th, 90th, 50th percentiles --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;percentiles&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;value&gt;</span>0.98<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;value&gt;</span>0.90<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;value&gt;</span>0.50<span class="nt">&lt;/value&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>

  <span class="c">&lt;!-- Send the histogram backets to the monitoring service  --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;enablePercentileHistogram&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>

  <span class="c">&lt;!-- Set 1000ms and 1500ms as SLO --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;serviceLevelObjectives&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;value&gt;</span>1000<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;value&gt;</span>1500<span class="nt">&lt;/value&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>

  <span class="c">&lt;!-- Set the minimum bucket value to 500ms --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;minimumExpectedValue&quot;</span> <span class="na">value=</span><span class="s">&quot;500&quot;</span> <span class="nt">/&gt;</span>
  <span class="c">&lt;!-- Set the maximum bucket value to 3000ms --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maximumExpectedValue&quot;</span> <span class="na">value=</span><span class="s">&quot;3000&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<p>If you use <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-registry-prometheus/1.5.4/io/micrometer/prometheus/PrometheusMeterRegistry.html">PrometheusMeterRegistry(external site)</a> as <code class="docutils literal"><span class="pre">MeterRegistry</span></code>, the above configuration will allow you to collect the following metrics.</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>http_server_requests_seconds{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,quantile=&quot;0.98&quot;,} 1.475346432
http_server_requests_seconds{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,quantile=&quot;0.9&quot;,} 1.408237568
http_server_requests_seconds{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,quantile=&quot;0.5&quot;,} 0.737148928
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;0.5&quot;,} 9.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;0.536870911&quot;,} 9.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;0.626349396&quot;,} 12.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;0.715827881&quot;,} 16.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;0.805306366&quot;,} 16.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;0.894784851&quot;,} 17.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;0.984263336&quot;,} 17.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;1.0&quot;,} 18.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;1.073741824&quot;,} 20.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;1.431655765&quot;,} 29.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;1.5&quot;,} 32.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;1.789569706&quot;,} 32.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;2.147483647&quot;,} 32.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;2.505397588&quot;,} 32.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;2.863311529&quot;,} 32.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;3.0&quot;,} 32.0
http_server_requests_seconds_bucket{class=&quot;com.nablarch.example.app.web.action.MetricsAction&quot;,exception=&quot;None&quot;,httpMethod=&quot;GET&quot;,method=&quot;index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,le=&quot;+Inf&quot;,} 32.0
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p>In above example, we use <code class="docutils literal"><span class="pre">PrometheusMeterRegistry</span></code> to show a concrete example of a histogram bucket(<code class="docutils literal"><span class="pre">http_server_requests_seconds_bucket</span></code>).
<a class="reference external" href="https://prometheus.io/">Prometheus(external site)</a> supports calculating percentiles by histogram.</p>
<p>However, this adaptor does not provide <code class="docutils literal"><span class="pre">MeterRegistryFactory</span></code> of <code class="docutils literal"><span class="pre">PrometheusMeterRegistry</span></code>.
If you want to try the metrics of the histogram bucket, you should create the following class.</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nn">example.micrometer.prometheus</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.micrometer.prometheus.PrometheusConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.micrometer.prometheus.PrometheusMeterRegistry</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.core.repository.di.DiContainer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.integration.micrometer.MeterRegistryFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.integration.micrometer.MicrometerConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.integration.micrometer.NablarchMeterRegistryConfig</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrometheusMeterRegistryFactory</span> <span class="kd">extends</span> <span class="n">MeterRegistryFactory</span><span class="o">&lt;</span><span class="n">PrometheusMeterRegistry</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="n">PrometheusMeterRegistry</span> <span class="nf">createMeterRegistry</span><span class="o">(</span><span class="n">MicrometerConfiguration</span> <span class="n">micrometerConfiguration</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">PrometheusMeterRegistry</span><span class="o">(</span><span class="k">new</span> <span class="n">Config</span><span class="o">(</span><span class="n">prefix</span><span class="o">,</span> <span class="n">micrometerConfiguration</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">PrometheusMeterRegistry</span> <span class="nf">createObject</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">doCreateObject</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Config</span> <span class="kd">extends</span> <span class="n">NablarchMeterRegistryConfig</span> <span class="kd">implements</span> <span class="n">PrometheusConfig</span> <span class="o">{</span>

        <span class="kd">public</span> <span class="nf">Config</span><span class="o">(</span><span class="n">String</span> <span class="n">prefix</span><span class="o">,</span> <span class="n">DiContainer</span> <span class="n">diContainer</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">prefix</span><span class="o">,</span> <span class="n">diContainer</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">protected</span> <span class="n">String</span> <span class="nf">subPrefix</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="s">&quot;prometheus&quot;</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="the-provided-handlermetricsmetadatabuilder-implementation">
<h3><a class="toc-backref" href="#id28">The provided HandlerMetricsMetaDataBuilder implementation</a><a class="headerlink" href="#the-provided-handlermetricsmetadatabuilder-implementation" title="Permalink to this headline">¶</a></h3>
<p>In this section, we explain the implementation class of <code class="docutils literal"><span class="pre">HandlerMetricsMetaDataBuilder</span></code>, which is provided by Nablarch.</p>
<div class="section" id="collect-the-processing-time-of-http-requests">
<span id="micrometer-adaptor-http-request-process-time-metrics"></span><h4><a class="toc-backref" href="#id29">Collect the processing time of HTTP requests</a><a class="headerlink" href="#collect-the-processing-time-of-http-requests" title="Permalink to this headline">¶</a></h4>
<p>The <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/http/HttpRequestTimeMetricsMetaDataBuilder.html" title="nablarch.integration.micrometer.instrument.http.HttpRequestTimeMetricsMetaDataBuilder">HttpRequestTimeMetricsMetaDataBuilder</a> builds meta data of metrics for measuring processing time of HTTP requrest.</p>
<p>This class uses <code class="docutils literal"><span class="pre">http.server.requirements</span></code> as the name of the metrics.</p>
<p>This class set the following tags to metrics.</p>
<table border="1" class="docutils">
<colgroup>
<col width="50%" />
<col width="50%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td>Tag name</td>
<td>Description</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">class</span></code></td>
<td>The name of the action class that handled the request (<code class="docutils literal"><span class="pre">Class.getName()</span></code>).
If it cannot be obtained, it will be <code class="docutils literal"><span class="pre">UNKNOWN</span></code>.</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">method</span></code></td>
<td>A string consisting of the method name of the action class that handled the request and the type name of the argument (<code class="docutils literal"><span class="pre">Class.getCanonicalName()</span></code>), joined by an underscore (<code class="docutils literal"><span class="pre">_</span></code>).
If it cannot be obtained, it will be <code class="docutils literal"><span class="pre">UNKNOWN</span></code>.</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">httpMethod</span></code></td>
<td>A HTTP method.</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">status</span></code></td>
<td>A HTTP status code.</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">outcome</span></code></td>
<td>A string indicating the status code type (1XX: <code class="docutils literal"><span class="pre">INFORMATION</span></code>, 2XX: <code class="docutils literal"><span class="pre">SUCCESS</span></code>, 3XX: <code class="docutils literal"><span class="pre">REDIRECTION</span></code>, 4XX: <code class="docutils literal"><span class="pre">CLIENT_ERROR</span></code>, 5XX: <code class="docutils literal"><span class="pre">SERVER_ERROR</span></code>, Others: <code class="docutils literal"><span class="pre">UNKNOWN</span></code>).</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">exception</span></code></td>
<td>A simple name of the exception thrown during request processing (or <code class="docutils literal"><span class="pre">None</span></code> if no exception was thrown).</td>
</tr>
</tbody>
</table>
<p>The following is an example using this class.</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="c">&lt;!-- Handler queue --&gt;</span>
<span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;webFrontController&quot;</span>
           <span class="na">class=</span><span class="s">&quot;nablarch.fw.web.servlet.WebFrontController&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;handlerQueue&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="c">&lt;!-- Handler to collect metrics of processing time of HTTP requests --&gt;</span>
      <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.instrument.handler.TimerMetricsHandler&quot;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- Set the MeterRegistry created by the registry factory to meterRegistry property --&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="na">ref=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="nt">/&gt;</span>

        <span class="c">&lt;!-- Set the HttpRequestTimeMetricsMetaDataBuilder to handlerMetricsMetaDataBuilder property --&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;handlerMetricsMetaDataBuilder&quot;</span><span class="nt">&gt;</span>
          <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.instrument.http.HttpRequestTimeMetricsMetaDataBuilder&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
      <span class="nt">&lt;/component&gt;</span>

      <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.fw.web.handler.HttpCharacterEncodingHandler&quot;</span><span class="nt">/&gt;</span>

      <span class="c">&lt;!-- ... --&gt;</span>
   <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<p>If you use <code class="docutils literal"><span class="pre">LoggingMeterRegistry</span></code>, you will get like the following metrics.</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>2020-10-06 13:52:10.309 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: http.server.requests{class=com.nablarch.example.app.web.action.AuthenticationAction,exception=None,httpMethod=POST,method=login_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext,outcome=REDIRECTION,status=303} throughput=0.2/s mean=0.4617585s max=0.4617585s
2020-10-06 13:52:10.309 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: http.server.requests{class=com.nablarch.example.app.web.action.IndustryAction,exception=None,httpMethod=GET,method=find,outcome=SUCCESS,status=200} throughput=0.2/s mean=0.103277s max=0.103277s
2020-10-06 13:52:10.310 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: http.server.requests{class=com.nablarch.example.app.web.action.AuthenticationAction,exception=None,httpMethod=GET,method=index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext,outcome=SUCCESS,status=200} throughput=0.2/s mean=4.7409146s max=4.7409146s
2020-10-06 13:52:10.310 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: http.server.requests{class=com.nablarch.example.app.web.action.ProjectAction,exception=None,httpMethod=GET,method=index_nablarch.fw.web.HttpRequest_nablarch.fw.ExecutionContext,outcome=SUCCESS,status=200} throughput=0.2/s mean=0.5329547s max=0.5329547s
</pre></div>
</div>
</div>
</div>
</div>
<div class="section" id="measure-the-processing-time-per-transaction-of-a-batch">
<span id="micrometer-adaptor-batch-transaction-time"></span><h2><a class="toc-backref" href="#id30">Measure the processing time per transaction of a batch</a><a class="headerlink" href="#measure-the-processing-time-per-transaction-of-a-batch" title="Permalink to this headline">¶</a></h2>
<p>You can measure the processing time per transaction of the <a class="reference internal" href="../application_framework/batch/nablarch_batch/index.html#nablarch-batch"><span>Nablarch Batch Application</span></a> as metrics with <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/batch/BatchTransactionTimeMetricsLogger.html" title="nablarch.integration.micrometer.instrument.batch.BatchTransactionTimeMetricsLogger">BatchTransactionTimeMetricsLogger</a>.
This will allow you to monitor the average and maximum processing time per transaction.</p>
<p>The <code class="docutils literal"><span class="pre">BatchTransactionTimeMetricsLogger</span></code> collects metrics with <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/Timer.html">Timer(external site)</a>.
Metrics name is <code class="docutils literal"><span class="pre">batch.transaction.time</span></code>.</p>
<p>You can change the name with <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/batch/BatchTransactionTimeMetricsLogger.html#setMetricsName-java.lang.String-" title="nablarch.integration.micrometer.instrument.batch.BatchTransactionTimeMetricsLogger.setMetricsName(java.lang.String)">setMetricsName(String)</a>.</p>
<p>Metrics have the following tag.</p>
<table border="1" class="docutils">
<colgroup>
<col width="50%" />
<col width="50%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td>Tag name</td>
<td>Description</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">class</span></code></td>
<td>The name of action class (This value is obtained from <a class="reference internal" href="../application_framework/batch/nablarch_batch/architecture.html#nablarch-batch-resolve-action"><span>-requestPath</span></a>).</td>
</tr>
</tbody>
</table>
<p>The following is an example to use <code class="docutils literal"><span class="pre">BatchTransactionTimeMetricsLogger</span></code>.</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="c">&lt;!-- Combining multiple CommitLoggers --&gt;</span>
<span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;commitLogger&quot;</span>
           <span class="na">class=</span><span class="s">&quot;nablarch.core.log.app.CompositeCommitLogger&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;commitLoggerList&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="c">&lt;!-- Configure the default CommitLogger --&gt;</span>
      <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.core.log.app.BasicCommitLogger&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;interval&quot;</span> <span class="na">value=</span><span class="s">&quot;${nablarch.commitLogger.interval}&quot;</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;/component&gt;</span>

      <span class="c">&lt;!-- Measuring the processing time per transaction --&gt;</span>
      <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.instrument.batch.BatchTransactionTimeMetricsLogger&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="na">ref=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;/component&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<p>First, define the <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/app/CompositeCommitLogger.html" title="nablarch.core.log.app.CompositeCommitLogger">CompositeCommitLogger</a> component with the name <code class="docutils literal"><span class="pre">commitLogger</span></code>.</p>
<p>Then, set  <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/app/BasicCommitLogger.html" title="nablarch.core.log.app.BasicCommitLogger">BasicCommitLogger</a> and <code class="docutils literal"><span class="pre">BatchTransactionTimeMetricsLogger</span></code> components to the <code class="docutils literal"><span class="pre">commitLoggerList</span></code> property.</p>
<p>Now you can measure time per transaction units.
In the following, we explain how it works.</p>
<p>The Nablarch batch controls the transaction commit interval by the <a class="reference internal" href="../application_framework/handlers/batch/loop_handler.html#loop-handler"><span>Transaction Loop Control Handler</span></a>.
This handler provides a mechanism to call the <code class="docutils literal"><span class="pre">increment(long)</span></code> method of the <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/app/CommitLogger.html" title="nablarch.core.log.app.CommitLogger">CommitLogger</a> when a transaction is committed.
This <code class="docutils literal"><span class="pre">CommitLogger</span></code> entity can be overridden by defining a component named <code class="docutils literal"><span class="pre">commitLogger</span></code>.</p>
<p>The <code class="docutils literal"><span class="pre">BatchTransactionTimeMetricsLogger</span></code> implements the <code class="docutils literal"><span class="pre">CommitLogger</span></code> interface.
Then, the <code class="docutils literal"><span class="pre">BatchTransactionTimeMetricsLogger</span></code> measures the time per transaction by measuring the interval between calls to <code class="docutils literal"><span class="pre">increment(long)</span></code>.
Therefore, you can measure time per transaction by defining the <code class="docutils literal"><span class="pre">BatchTransactionTimeMetricsLogger</span></code> component that is named <code class="docutils literal"><span class="pre">commitLogger</span></code>.</p>
<p>However, if you define <code class="docutils literal"><span class="pre">BatchTransactionTimeMetricsLogger</span></code> as <code class="docutils literal"><span class="pre">commitLogger</span></code>, the default component of <code class="docutils literal"><span class="pre">CommitLogger</span></code>, <code class="docutils literal"><span class="pre">BasicCommitLogger</span></code>, will not work.
Therefore, the above configuration example uses the <code class="docutils literal"><span class="pre">CompositeCommitLogger</span></code>, which can combine multiple CommitLoggers, to use the <code class="docutils literal"><span class="pre">BasicCommitLogger</span></code> and <code class="docutils literal"><span class="pre">BatchTransactionTimeMetricsLogger</span></code>.</p>
<p>If you use <code class="docutils literal"><span class="pre">LoggingMeterRegistry</span></code>, you will get like the following metrics.</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>Feb 18, 2021 11:51:54 AM io.micrometer.core.instrument.logging.LoggingMeterRegistry lambda$publish$5
INFO: batch.transaction.time{class=MetricsTestAction} throughput=0.8/s mean=2.394144925s max=4.692886s
</pre></div>
</div>
</div>
<div class="section" id="measure-the-count-that-was-processed-by-batch">
<span id="micrometer-batch-processed-count"></span><h2><a class="toc-backref" href="#id31">Measure the count that was processed by batch</a><a class="headerlink" href="#measure-the-count-that-was-processed-by-batch" title="Permalink to this headline">¶</a></h2>
<p>You can measure the count of input data processed by the <a class="reference internal" href="../application_framework/batch/nablarch_batch/index.html#nablarch-batch"><span>Nablarch Batch Application</span></a> with the <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/batch/BatchProcessedRecordCountMetricsLogger.html" title="nablarch.integration.micrometer.instrument.batch.BatchProcessedRecordCountMetricsLogger">BatchProcessedRecordCountMetricsLogger</a>.
This will allow you to monitor the progress of the batch and changes in processing speed.</p>
<p>The <code class="docutils literal"><span class="pre">BatchProcessedRecordCountMetricsLogger</span></code> collects metrics with <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/Counter.html">Counter(external site)</a>.
Metrics name is <code class="docutils literal"><span class="pre">batch.processed.record.count</span></code>.</p>
<p>You can change the name with <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/batch/BatchProcessedRecordCountMetricsLogger.html#setMetricsName-java.lang.String-" title="nablarch.integration.micrometer.instrument.batch.BatchProcessedRecordCountMetricsLogger.setMetricsName(java.lang.String)">setMetricsName(String)</a>.</p>
<p>Metrics have the following tag.</p>
<table border="1" class="docutils">
<colgroup>
<col width="50%" />
<col width="50%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td>Tag name</td>
<td>Description</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">class</span></code></td>
<td>The name of action class (This value is obtained from <a class="reference internal" href="../application_framework/batch/nablarch_batch/architecture.html#nablarch-batch-resolve-action"><span>-requestPath</span></a>).</td>
</tr>
</tbody>
</table>
<p>The following is an example to use <code class="docutils literal"><span class="pre">BatchProcessedRecordCountMetricsLogger</span></code>.</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="c">&lt;!-- Combining multiple CommitLoggers --&gt;</span>
<span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;commitLogger&quot;</span>
           <span class="na">class=</span><span class="s">&quot;nablarch.core.log.app.CompositeCommitLogger&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;commitLoggerList&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="c">&lt;!-- Configure the default CommitLogger --&gt;</span>
      <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.core.log.app.BasicCommitLogger&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;interval&quot;</span> <span class="na">value=</span><span class="s">&quot;${nablarch.commitLogger.interval}&quot;</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;/component&gt;</span>

      <span class="c">&lt;!-- Measure the processed count --&gt;</span>
      <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.instrument.batch.BatchProcessedRecordCountMetricsLogger&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="na">ref=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;/component&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<p>The <code class="docutils literal"><span class="pre">BatchProcessedRecordCountMetricsLogger</span></code> uses the <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/app/CommitLogger.html" title="nablarch.core.log.app.CommitLogger">CommitLogger</a> mechanism to measure the processed count, just as in &#8220;Measure the processing time per transaction of a batch&#8221;.</p>
<p>For more information on how <code class="docutils literal"><span class="pre">CommitLogger</span></code> works and how to use it, please refer to <a class="reference internal" href="#micrometer-adaptor-batch-transaction-time"><span>Measure the processing time per transaction of a batch</span></a>.</p>
<p>Now you can use <code class="docutils literal"><span class="pre">BatchProcessedRecordCountMetricsLogger</span></code>.</p>
<p>If you use <code class="docutils literal"><span class="pre">LoggingMeterRegistry</span></code>, you will get like the following metrics.</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>Feb 18, 2021 11:51:44 AM io.micrometer.core.instrument.logging.LoggingMeterRegistry lambda$publish$4
INFO: batch.processed.record.count{class=MetricsTestAction} throughput=4/s
Feb 18, 2021 11:51:49 AM io.micrometer.core.instrument.logging.LoggingMeterRegistry lambda$publish$4
INFO: batch.processed.record.count{class=MetricsTestAction} throughput=10/s
Feb 18, 2021 11:51:54 AM io.micrometer.core.instrument.logging.LoggingMeterRegistry lambda$publish$4
INFO: batch.processed.record.count{class=MetricsTestAction} throughput=8/s
</pre></div>
</div>
</div>
<div class="section" id="measure-the-output-count-per-log-level">
<span id="micrometer-log-count"></span><h2><a class="toc-backref" href="#id32">Measure the output count per log level</a><a class="headerlink" href="#measure-the-output-count-per-log-level" title="Permalink to this headline">¶</a></h2>
<p>You can measure the output count per log level with the <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/binder/logging/LogCountMetrics.html" title="nablarch.integration.micrometer.instrument.binder.logging.LogCountMetrics">LogCountMetrics</a>.
This will allow you to monitor the frequency of output at specific log levels, monitor error logs.</p>
<p>The <code class="docutils literal"><span class="pre">LogCountMetrics</span></code> collects metrics with <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/Counter.html">Counter(external site)</a>.
Metrics name is <code class="docutils literal"><span class="pre">log.count</span></code>.
You can change the name with the <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/binder/logging/LogCountMetrics.html#LogCountMetrics-nablarch.integration.micrometer.instrument.binder.MetricsMetaData-" title="nablarch.integration.micrometer.instrument.binder.logging.LogCountMetrics.LogCountMetrics(nablarch.integration.micrometer.instrument.binder.MetricsMetaData)">constructor</a> that receives the <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/binder/MetricsMetaData.html" title="nablarch.integration.micrometer.instrument.binder.MetricsMetaData">MetricsMetaData</a>.</p>
<p>Metrics have the following tags.</p>
<table border="1" class="docutils">
<colgroup>
<col width="50%" />
<col width="50%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td>Tag name</td>
<td>Description</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">level</span></code></td>
<td>The log level.</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">logger</span></code></td>
<td>The name used to get the logger from the <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/LoggerManager.html" title="nablarch.core.log.LoggerManager">LoggerManager</a>.</td>
</tr>
</tbody>
</table>
<div class="section" id="configure-logpublisher">
<h3><a class="toc-backref" href="#id33">Configure LogPublisher</a><a class="headerlink" href="#configure-logpublisher" title="Permalink to this headline">¶</a></h3>
<p><code class="docutils literal"><span class="pre">LogCountMetrics</span></code> uses the <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogPublisher.html" title="nablarch.core.log.basic.LogPublisher">LogPublisher</a> mechanism to detect log output events.</p>
<p>Therefore, you need to configure <code class="docutils literal"><span class="pre">LogPublisher</span></code> at first to use <code class="docutils literal"><span class="pre">LogCountMetrics</span></code>.
For <code class="docutils literal"><span class="pre">LogPublisher</span></code> settings, see <a class="reference internal" href="../application_framework/libraries/log.html#log-publisher-usage"><span>How to use LogPublisher</span></a>.</p>
</div>
<div class="section" id="create-a-custom-defaultmeterbinderlistprovider">
<h3><a class="toc-backref" href="#id34">Create a custom DefaultMeterBinderListProvider</a><a class="headerlink" href="#create-a-custom-defaultmeterbinderlistprovider" title="Permalink to this headline">¶</a></h3>
<p><code class="docutils literal"><span class="pre">LogCountMetrics</span></code> is provided as an implementation class of <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/binder/MeterBinder.html">MeterBinder (external site)</a>.
Therefore, you need create a class that inherits from <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/DefaultMeterBinderListProvider.html" title="nablarch.integration.micrometer.DefaultMeterBinderListProvider">DefaultMeterBinderListProvider</a> and implement it to return a list of MeterBinders that contains <code class="docutils literal"><span class="pre">LogCountMetrics</span></code>.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">For a description of the <code class="docutils literal"><span class="pre">DefaultMeterBinderListProvider</span></code>, see <a class="reference internal" href="#micrometer-adaptor-declare-default-meter-binder-list-provider-as-component"><span>Declare the DefaultsMeterBinderListProvider as a component</span></a>.</p>
</div>
<p>The following is an example for a custom <code class="docutils literal"><span class="pre">DefaultMeterBinderListProvider</span></code>.</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nn">example.micrometer.log</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.micrometer.core.instrument.binder.MeterBinder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.integration.micrometer.DefaultMeterBinderListProvider</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.integration.micrometer.instrument.binder.logging.LogCountMetrics</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomMeterBinderListProvider</span> <span class="kd">extends</span> <span class="n">DefaultMeterBinderListProvider</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">MeterBinder</span><span class="o">&gt;</span> <span class="nf">createMeterBinderList</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Add LogCountMetrics to the default MeterBinder list.</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">MeterBinder</span><span class="o">&gt;</span> <span class="n">meterBinderList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="kd">super</span><span class="o">.</span><span class="na">createMeterBinderList</span><span class="o">());</span>
        <span class="n">meterBinderList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">LogCountMetrics</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">meterBinderList</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
<p>Finally, set the custom <code class="docutils literal"><span class="pre">DefaultMeterBinderListProvider</span></code> that you created to the <code class="docutils literal"><span class="pre">meterBinderListProvider</span></code> property of the <code class="docutils literal"><span class="pre">MeterRegistryFactory</span></code> component.
Now you can use the <code class="docutils literal"><span class="pre">LogCountMetrics</span></code>.</p>
<p>If you use <code class="docutils literal"><span class="pre">LoggingMeterRegistry</span></code>, you will get like the following metrics.</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>2020-12-22 14:25:36.978 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: log.count{level=WARN,logger=com.nablarch.example.app.web.action.MetricsAction} throughput=0.4/s
2020-12-22 14:25:41.978 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: log.count{level=ERROR,logger=com.nablarch.example.app.web.action.MetricsAction} throughput=1.4/s
</pre></div>
</div>
</div>
<div class="section" id="log-level-to-be-aggregated">
<h3><a class="toc-backref" href="#id35">Log level to be aggregated</a><a class="headerlink" href="#log-level-to-be-aggregated" title="Permalink to this headline">¶</a></h3>
<p>By default, only log outputs above the warning log will be counted.</p>
<p><code class="docutils literal"><span class="pre">LogCountMetrics</span></code> has a constructor that receives a <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogLevel.html" title="nablarch.core.log.basic.LogLevel">LogLevel</a>.
You can change the threshold of the log level to be aggregated with the constructor.
In the following implementation example, the threshold value is changed to INFO.</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="kn">import</span> <span class="nn">nablarch.core.log.basic.LogLevel</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomMeterBinderListProvider</span> <span class="kd">extends</span> <span class="n">DefaultMeterBinderListProvider</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">MeterBinder</span><span class="o">&gt;</span> <span class="nf">createMeterBinderList</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">MeterBinder</span><span class="o">&gt;</span> <span class="n">meterBinderList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="kd">super</span><span class="o">.</span><span class="na">createMeterBinderList</span><span class="o">());</span>
        <span class="n">meterBinderList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">LogCountMetrics</span><span class="o">(</span><span class="n">LogLevel</span><span class="o">.</span><span class="na">INFO</span><span class="o">));</span> <span class="c1">// Specify the threshold of log level.</span>
        <span class="k">return</span> <span class="n">meterBinderList</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
<div class="admonition important">
<p class="first admonition-title">Important</p>
<p class="last">If you lower the log level threshold too much, a large amount of metrics may be collected depending on the application.
Depending on the fee structure of the monitoring service to be used, the usage fee may increase, so it should be set with care.</p>
</div>
</div>
</div>
<div class="section" id="measure-sql-processing-time">
<span id="micrometer-sql-time"></span><h2><a class="toc-backref" href="#id36">Measure SQL processing time</a><a class="headerlink" href="#measure-sql-processing-time" title="Permalink to this headline">¶</a></h2>
<p>By using <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/dao/SqlTimeMetricsDaoContext.html" title="nablarch.integration.micrometer.instrument.dao.SqlTimeMetricsDaoContext">SqlTimeMetricsDaoContext</a>, you can measure the processing time of SQL executed using the <a class="reference internal" href="../application_framework/libraries/database/universal_dao.html#universal-dao"><span>Universal DAO</span></a>.
This will allow you to monitor the average and maximum processing time for each SQL.</p>
<p>The <code class="docutils literal"><span class="pre">SqlTimeMetricsDaoContext</span></code> collects metrics with <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/Timer.html">Timer(external site)</a>.
Metrics name is <code class="docutils literal"><span class="pre">sql.process.time</span></code>.
You can change the name with <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/dao/SqlTimeMetricsDaoContextFactory.html#setMetricsName-java.lang.String-" title="nablarch.integration.micrometer.instrument.dao.SqlTimeMetricsDaoContextFactory.setMetricsName(java.lang.String)">setMetricsName(String)</a> of the <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/dao/SqlTimeMetricsDaoContextFactory.html" title="nablarch.integration.micrometer.instrument.dao.SqlTimeMetricsDaoContextFactory">SqlTimeMetricsDaoContextFactory</a> that is a factory class for <code class="docutils literal"><span class="pre">SqlTimeMetricsDaoContext</span></code>.</p>
<p>Metrics have the following tags.</p>
<table border="1" class="docutils">
<colgroup>
<col width="50%" />
<col width="50%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td>Tag name</td>
<td>Description</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">sql.id</span></code></td>
<td>The SQLID passed in the method argument of <code class="docutils literal"><span class="pre">DaoContext</span></code> (<code class="docutils literal"><span class="pre">&quot;None&quot;</span></code> if there is no SQLID)</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">entity</span></code></td>
<td>The name of the entity class (<code class="docutils literal"><span class="pre">Class.getName()</span></code>)</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">method</span></code></td>
<td>The method name of the executed <code class="docutils literal"><span class="pre">DaoContext</span></code>.</td>
</tr>
</tbody>
</table>
<p>The following is an example of the configuration for using <code class="docutils literal"><span class="pre">SqlTimeMetricsDaoContext</span></code>.</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="c">&lt;!-- Define SqlTimeMetricsDaoContextFactory as daoContextFactory. --&gt;</span>
<span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;daoContextFactory&quot;</span>
           <span class="na">class=</span><span class="s">&quot;nablarch.integration.micrometer.instrument.dao.SqlTimeMetricsDaoContextFactory&quot;</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- Set the factory of the DaoContext to be transferred to the delegate. --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;delegate&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.dao.BasicDaoContextFactory&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;sequenceIdGenerator&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.idgenerator.SequenceIdGenerator&quot;</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/component&gt;</span>
  <span class="nt">&lt;/property&gt;</span>

  <span class="c">&lt;!-- Set the meterRegistry generated by the registry factory to the meterRegistry property. --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="na">ref=</span><span class="s">&quot;meterRegistry&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<p><code class="docutils literal"><span class="pre">SqlTimeMetricsDaoContext</span></code> measures the processing time of each database access method by wrapping <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/dao/DaoContext.html" title="nablarch.common.dao.DaoContext">DaoContext</a>.
Then, <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/dao/SqlTimeMetricsDaoContextFactory.html" title="nablarch.integration.micrometer.instrument.dao.SqlTimeMetricsDaoContextFactory">SqlTimeMetricsDaoContextFactory</a> is a factory class that generates a <code class="docutils literal"><span class="pre">SqlTimeMetricsDaoContext</span></code> that wraps a <code class="docutils literal"><span class="pre">DaoContext</span></code>.</p>
<p>Define this <code class="docutils literal"><span class="pre">SqlTimeMetricsDaoContextFactory</span></code> as a component with the name <code class="docutils literal"><span class="pre">daoContextFactory</span></code>.
This will replace the <code class="docutils literal"><span class="pre">DaoContext</span></code> used by <a class="reference internal" href="../application_framework/libraries/database/universal_dao.html#universal-dao"><span>Universal DAO</span></a> with <code class="docutils literal"><span class="pre">SqlTimeMetricsDaoContext</span></code>.</p>
<p>Now you can use <code class="docutils literal"><span class="pre">SqlTimeMetricsDaoContext</span></code>.</p>
<p>If you use <code class="docutils literal"><span class="pre">LoggingMeterRegistry</span></code>, you will get like the following metrics.</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>2020-12-23 15:00:25.161 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: sql.process.time{entity=com.nablarch.example.app.entity.Project,method=delete,sql.id=None} throughput=0.2/s mean=0.0005717s max=0.0005717s
2020-12-23 15:00:25.161 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: sql.process.time{entity=com.nablarch.example.app.entity.Project,method=findAllBySqlFile,sql.id=SEARCH_PROJECT} throughput=0.6/s mean=0.003364233s max=0.0043483s
2020-12-23 15:00:25.161 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: sql.process.time{entity=com.nablarch.example.app.web.dto.ProjectDto,method=findBySqlFile,sql.id=FIND_BY_PROJECT} throughput=0.2/s mean=0.000475s max=0.0060838s
2020-12-23 15:00:25.162 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: sql.process.time{entity=com.nablarch.example.app.entity.Industry,method=findAll,sql.id=None} throughput=0.8/s mean=0.00058155s max=0.0013081s
</pre></div>
</div>
</div>
<div class="section" id="measure-the-value-obtained-from-any-mbean-as-a-metric">
<span id="micrometer-mbean-metrics"></span><h2><a class="toc-backref" href="#id37">Measure the value obtained from any MBean as a metric</a><a class="headerlink" href="#measure-the-value-obtained-from-any-mbean-as-a-metric" title="Permalink to this headline">¶</a></h2>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/binder/jmx/JmxGaugeMetrics.html" title="nablarch.integration.micrometer.instrument.binder.jmx.JmxGaugeMetrics">JmxGaugeMetrics</a> allows you to measure the values obtained from any MBean as metrics.
This will allow you to measure the various status of the application server or libraries provided by MBean and monitor them.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p>MBean is a Java object defined in Java Management Extensions (JMX), which provides APIs for accessing information on managed resources.
Many application servers, such as Tomcat, expose the server status (thread pool status, etc.) in MBean.
By accessing these MBeans from the application, you can get the status of the server.</p>
<p class="last">For more information about JMX, see the <a class="reference external" href="https://docs.oracle.com/en/java/javase/11/jmx/java-management-extensions-jmx-user-guide.html">Java Management Extensions Guide (external site)</a>.</p>
</div>
<p>The <code class="docutils literal"><span class="pre">JmxGaugeMetrics</span></code> measure values obtained from MBean with <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/Gauge.html">Gauge(external site)</a>.</p>
<p>This section explains how to use <code class="docutils literal"><span class="pre">JmxGaugeMetrics</span></code>.</p>
<p>First, as an example of referring to the MBean provided by the application server, we show an example of obtaining the status of the Tomcat thread pool.
Next, as an example of referring to the MBean provided by the library embedded in the application, we show an example of obtaining the status of the HikariCP connection pool.</p>
<div class="section" id="obtain-the-status-of-the-tomcat-thread-pool">
<h3><a class="toc-backref" href="#id38">Obtain the status of the Tomcat thread pool</a><a class="headerlink" href="#obtain-the-status-of-the-tomcat-thread-pool" title="Permalink to this headline">¶</a></h3>
<p><code class="docutils literal"><span class="pre">JmxGaugeMetrics</span></code> implements <a class="reference external" href="https://javadoc.io/doc/io.micrometer/micrometer-core/1.5.4/io/micrometer/core/instrument/binder/MeterBinder.html">MeterBinder (external site)</a>.
Therefore, you need create a class that inherits from <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/DefaultMeterBinderListProvider.html" title="nablarch.integration.micrometer.DefaultMeterBinderListProvider">DefaultMeterBinderListProvider</a> and implement it to return a list of MeterBinders that contains <code class="docutils literal"><span class="pre">JmxGaugeMetrics</span></code>.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">For a description of the <code class="docutils literal"><span class="pre">DefaultMeterBinderListProvider</span></code>, see <a class="reference internal" href="#micrometer-adaptor-declare-default-meter-binder-list-provider-as-component"><span>Declare the DefaultsMeterBinderListProvider as a component</span></a>.</p>
</div>
<p>The following is an example for a custom <code class="docutils literal"><span class="pre">DefaultMeterBinderListProvider</span></code>.</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nn">example.micrometer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.micrometer.core.instrument.binder.MeterBinder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.integration.micrometer.DefaultMeterBinderListProvider</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.integration.micrometer.instrument.binder.MetricsMetaData</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.integration.micrometer.instrument.binder.jmx.JmxGaugeMetrics</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.integration.micrometer.instrument.binder.jmx.MBeanAttributeCondition</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomMeterBinderListProvider</span> <span class="kd">extends</span> <span class="n">DefaultMeterBinderListProvider</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">MeterBinder</span><span class="o">&gt;</span> <span class="nf">createMeterBinderList</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">MeterBinder</span><span class="o">&gt;</span> <span class="n">meterBinderList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="kd">super</span><span class="o">.</span><span class="na">createMeterBinderList</span><span class="o">());</span>
        <span class="n">meterBinderList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">JmxGaugeMetrics</span><span class="o">(</span>
            <span class="c1">// Name and description of metrics.</span>
            <span class="k">new</span> <span class="n">MetricsMetaData</span><span class="o">(</span><span class="s">&quot;thread.count.current&quot;</span><span class="o">,</span> <span class="s">&quot;Current thread count.&quot;</span><span class="o">),</span>
            <span class="c1">// The conditions to specify the attribute of MBean.</span>
            <span class="k">new</span> <span class="n">MBeanAttributeCondition</span><span class="o">(</span><span class="s">&quot;Catalina:type=ThreadPool,name=\&quot;http-nio-8080\&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;currentThreadCount&quot;</span><span class="o">)</span>
        <span class="o">));</span>
        <span class="k">return</span> <span class="n">meterBinderList</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
<p>You must pass following classes to the constructor of <code class="docutils literal"><span class="pre">JmxGaugeMetrics</span></code>.</p>
<ul class="simple">
<li><dl class="first docutils">
<dt><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/binder/MetricsMetaData.html" title="nablarch.integration.micrometer.instrument.binder.MetricsMetaData">MetricsMetaData</a></dt>
<dd><ul class="first last">
<li>Specify meta data such as the name, description, and tags of the metrics.</li>
</ul>
</dd>
</dl>
</li>
<li><dl class="first docutils">
<dt><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/integration/micrometer/instrument/binder/jmx/MBeanAttributeCondition.html" title="nablarch.integration.micrometer.instrument.binder.jmx.MBeanAttributeCondition">MBeanAttributeCondition</a></dt>
<dd><ul class="first last">
<li>Specify the object name and attribute name to identify the MBean.</li>
</ul>
</dd>
</dl>
</li>
</ul>
<p><code class="docutils literal"><span class="pre">JmxGaugeMetrics</span></code> gets the MBean based on the information specified in <code class="docutils literal"><span class="pre">MBeanAttributeCondition</span></code>.
Then, the <code class="docutils literal"><span class="pre">JmxGaugeMetrics</span></code> constructs metrics with the information specified in <code class="docutils literal"><span class="pre">MetricsMetaData</span></code>.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p>You can check the object and attribute names of the MBean created by Tomcat with JConsole tool that comes with the JDK.
When you connect to the JVM running Tomcat with JConsole and open the &#8220;MBeans&#8221; tab, you get the list of MBeans in the connected JVM.</p>
<p class="last">For more details about JConsole, refer to the <a class="reference external" href="https://docs.oracle.com/en/java/javase/15/management/using-jconsole.html#GUID-77416B38-7F15-4E35-B3D1-34BFD88350B5">Monitoring and Management Guide (external site)</a>.</p>
</div>
<p>If you use <code class="docutils literal"><span class="pre">LoggingMeterRegistry</span></code>, you will get like the following metrics.</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>18-Feb-2021 13:17:38.168 INFO [logging-metrics-publisher] io.micrometer.core.instrument.logging.LoggingMeterRegistry.lambda$publish$3 thread.count.current{} value=10
</pre></div>
</div>
</div>
<div class="section" id="obtain-the-status-of-the-hikaricp-connection-pool">
<h3><a class="toc-backref" href="#id39">Obtain the status of the HikariCP connection pool</a><a class="headerlink" href="#obtain-the-status-of-the-hikaricp-connection-pool" title="Permalink to this headline">¶</a></h3>
<p><a class="reference external" href="https://github.com/brettwooldridge/HikariCP">HikariCP (external site)</a> has a function to get status of the connection pool by MBean.</p>
<ul class="simple">
<li><a class="reference external" href="https://github.com/brettwooldridge/HikariCP/wiki/MBean-(JMX)-Monitoring-and-Management">MBean (JMX) Monitoring and Management (external site)</a></li>
</ul>
<p>This function will allow <code class="docutils literal"><span class="pre">JmxGaugeMetrics</span></code> to collect connection pool status.</p>
<p>First, enable the function to publish status by MBean.
You must set <code class="docutils literal"><span class="pre">true</span></code> to <code class="docutils literal"><span class="pre">registerMbeans</span></code> property of <code class="docutils literal"><span class="pre">com.zaxxer.hikari.HikariDataSource</span></code>.</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;component-configuration</span>
        <span class="na">xmlns=</span><span class="s">&quot;http://tis.co.jp/nablarch/component-configuration&quot;</span>
        <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
        <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://tis.co.jp/nablarch/component-configuration https://nablarch.github.io/schema/component-configuration.xsd&quot;</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- ... --&gt;</span>

  <span class="c">&lt;!-- Datasource configuration --&gt;</span>
  <span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;dataSource&quot;</span>
            <span class="na">class=</span><span class="s">&quot;com.zaxxer.hikari.HikariDataSource&quot;</span> <span class="na">autowireType=</span><span class="s">&quot;None&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;driverClassName&quot;</span> <span class="na">value=</span><span class="s">&quot;${nablarch.db.jdbcDriver}&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jdbcUrl&quot;</span>         <span class="na">value=</span><span class="s">&quot;${nablarch.db.url}&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span>        <span class="na">value=</span><span class="s">&quot;${nablarch.db.user}&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span>        <span class="na">value=</span><span class="s">&quot;${nablarch.db.password}&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maximumPoolSize&quot;</span> <span class="na">value=</span><span class="s">&quot;${nablarch.db.maxPoolSize}&quot;</span><span class="nt">/&gt;</span>
    <span class="c">&lt;!-- Enable MBean to publish status. --&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;registerMbeans&quot;</span>  <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/component&gt;</span>

<span class="nt">&lt;/component-configuration&gt;</span>
</pre></div>
</div>
<p>In the above configuration, we set true to the <code class="docutils literal"><span class="pre">registerMbeans</span></code> property in the component definition of <code class="docutils literal"><span class="pre">HikariDataSource</span></code>.</p>
<p>Next, configure the <code class="docutils literal"><span class="pre">JmxGaugeMetrics</span></code> with the object name and attribute name that you want to measure.
The specifications of object names and attribute names are described in the <a class="reference external" href="https://github.com/brettwooldridge/HikariCP/wiki/MBean-(JMX)-Monitoring-and-Management#programmatic-access">HikariCP document mentioned above (external site)</a>.</p>
<p>The following is an example implementation of <code class="docutils literal"><span class="pre">JmxGaugeMetrics</span></code> for measuring the maximum count of connection pools and the count of active connections.</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nn">com.nablarch.example.app.metrics</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.micrometer.core.instrument.binder.MeterBinder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.integration.micrometer.DefaultMeterBinderListProvider</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.integration.micrometer.instrument.binder.MetricsMetaData</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.integration.micrometer.instrument.binder.jmx.JmxGaugeMetrics</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.integration.micrometer.instrument.binder.jmx.MBeanAttributeCondition</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomMeterBinderListProvider</span> <span class="kd">extends</span> <span class="n">DefaultMeterBinderListProvider</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">MeterBinder</span><span class="o">&gt;</span> <span class="nf">createMeterBinderList</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">MeterBinder</span><span class="o">&gt;</span> <span class="n">meterBinderList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="kd">super</span><span class="o">.</span><span class="na">createMeterBinderList</span><span class="o">());</span>
        <span class="c1">// The maximum count.</span>
        <span class="n">meterBinderList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">JmxGaugeMetrics</span><span class="o">(</span>
            <span class="k">new</span> <span class="n">MetricsMetaData</span><span class="o">(</span><span class="s">&quot;db.pool.total&quot;</span><span class="o">,</span> <span class="s">&quot;Total DB pool count.&quot;</span><span class="o">),</span>
            <span class="k">new</span> <span class="n">MBeanAttributeCondition</span><span class="o">(</span><span class="s">&quot;com.zaxxer.hikari:type=Pool (HikariPool-1)&quot;</span><span class="o">,</span> <span class="s">&quot;TotalConnections&quot;</span><span class="o">)</span>
        <span class="o">));</span>
        <span class="c1">// The active count.</span>
        <span class="n">meterBinderList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">JmxGaugeMetrics</span><span class="o">(</span>
            <span class="k">new</span> <span class="n">MetricsMetaData</span><span class="o">(</span><span class="s">&quot;db.pool.active&quot;</span><span class="o">,</span> <span class="s">&quot;Active DB pool count.&quot;</span><span class="o">),</span>
            <span class="k">new</span> <span class="n">MBeanAttributeCondition</span><span class="o">(</span><span class="s">&quot;com.zaxxer.hikari:type=Pool (HikariPool-1)&quot;</span><span class="o">,</span> <span class="s">&quot;ActiveConnections&quot;</span><span class="o">)</span>
        <span class="o">));</span>
        <span class="k">return</span> <span class="n">meterBinderList</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
<p>If you use <code class="docutils literal"><span class="pre">LoggingMeterRegistry</span></code>, you will get like the following metrics.</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>2020-12-24 16:37:57.143 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: db.pool.active{} value=0
2020-12-24 16:37:57.143 [INFO ]      i.m.c.i.l.LoggingMeterRegistry: db.pool.total{} value=5
</pre></div>
</div>
<div class="section" id="about-the-warning-log-output-when-the-server-is-started">
<h4><a class="toc-backref" href="#id40">About the warning log output when the server is started</a><a class="headerlink" href="#about-the-warning-log-output-when-the-server-is-started" title="Permalink to this headline">¶</a></h4>
<p>There are two main ways for Micrometer to send metrics to the monitoring service.</p>
<ul class="simple">
<li><dl class="first docutils">
<dt>Applications send metrics to the monitoring service at regular intervals (Client pushes)</dt>
<dd><ul class="first last">
<li>Datadog, CloudWatch, etc</li>
</ul>
</dd>
</dl>
</li>
<li><dl class="first docutils">
<dt>The monitoring service queries to the application for metrics at regular intervals (Server polls)</dt>
<dd><ul class="first last">
<li>Prometheus, etc</li>
</ul>
</dd>
</dl>
</li>
</ul>
<p>In the former case (Client pushes), <code class="docutils literal"><span class="pre">MeterRegistry</span></code> will start sending metrics at regular intervals after component creation.
On the other hand, HikariCP&#8217;s connection pool is designed to be created the first time when the first database access is made.</p>
<p>Therefore, <code class="docutils literal"><span class="pre">JmxGaugeMetrics</span></code> will refer to a connection pool that does not exist if it sends metrics before the first database access occurs.
At this time, the Micrometer will output the following warning log.</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>18-Feb-2021 13:17:37.953 WARNING [logging-metrics-publisher] io.micrometer.core.util.internal.logging.WarnThenDebugLogger.log Failed to apply the value function for the gauge &#39;db.pool.active&#39;. Note that subsequent logs will be logged at debug level.
        java.lang.RuntimeException: javax.management.InstanceNotFoundException: com.zaxxer.hikari:type=Pool (HikariPool-1)
                at nablarch.integration.micrometer.instrument.binder.jmx.JmxGaugeMetrics.obtainGaugeValue(JmxGaugeMetrics.java:59)
                at io.micrometer.core.instrument.Gauge.lambda$builder$0(Gauge.java:58)
                at io.micrometer.core.instrument.StrongReferenceGaugeFunction.applyAsDouble(StrongReferenceGaugeFunction.java:47)
                at io.micrometer.core.instrument.internal.DefaultGauge.value(DefaultGauge.java:54)
                at io.micrometer.core.instrument.logging.LoggingMeterRegistry.lambda$publish$3(LoggingMeterRegistry.java:98)
                at io.micrometer.core.instrument.Meter.use(Meter.java:158)
                at io.micrometer.core.instrument.logging.LoggingMeterRegistry.lambda$publish$12(LoggingMeterRegistry.java:97)
                at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
                at java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
                at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
                at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
                at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
                at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
                at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
                at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485)
                at io.micrometer.core.instrument.logging.LoggingMeterRegistry.publish(LoggingMeterRegistry.java:95)
                at io.micrometer.core.instrument.push.PushMeterRegistry.publishSafely(PushMeterRegistry.java:52)
                at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
                at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
                at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
                at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
                at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
                at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
                at java.lang.Thread.run(Thread.java:748)
        Caused by: javax.management.InstanceNotFoundException: com.zaxxer.hikari:type=Pool (HikariPool-1)
                at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1095)
                at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:643)
                at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:678)
                at nablarch.integration.micrometer.instrument.binder.jmx.JmxGaugeMetrics.obtainGaugeValue(JmxGaugeMetrics.java:52)
                ... 23 more
</pre></div>
</div>
<p>The value of the metrics will be NaN while the connection pool is not created.</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>18-Feb-2021 13:18:32.933 INFO [logging-metrics-publisher] io.micrometer.core.instrument.logging.LoggingMeterRegistry.lambda$publish$3 db.pool.active{} value=NaN
18-Feb-2021 13:18:32.933 INFO [logging-metrics-publisher] io.micrometer.core.instrument.logging.LoggingMeterRegistry.lambda$publish$3 db.pool.total{} value=NaN
</pre></div>
</div>
<p>The Micrometer outputs this warning log only the first time, and it suppresses after the second time.
The connection pool values will be collected correctly after connection pool is created.</p>
<p>This means that this warning log may be output even when the application is normal, depending on the timing.
However, there is no harm.
You can ignore this warning log.</p>
<p>If you really want to suppress the warning log, you can avoid it to some extent by implementing the following.</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nn">example.micrometer</span><span class="o">;</span>

<span class="c1">// ...</span>
<span class="kn">import</span> <span class="nn">nablarch.core.log.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.core.log.LoggerManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.core.repository.initialization.Initializable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.sql.SQLException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.sql.Connection</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomMeterBinderListProvider</span> <span class="kd">extends</span> <span class="n">DefaultMeterBinderListProvider</span> <span class="kd">implements</span> <span class="n">Initializable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">LOGGER</span> <span class="o">=</span> <span class="n">LoggerManager</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">CustomMeterBinderListProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">MeterBinder</span><span class="o">&gt;</span> <span class="nf">createMeterBinderList</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// ...</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDataSource</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="n">Connection</span> <span class="n">con</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">())</span> <span class="o">{</span>
            <span class="c1">// Preventing the warning log by establishing a connection during initialization.</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">LOGGER</span><span class="o">.</span><span class="na">logWarn</span><span class="o">(</span><span class="s">&quot;Failed initial connection.&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
<p>Implement a custom <code class="docutils literal"><span class="pre">DefaultMeterBinderListProvider</span></code> with <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/repository/initialization/Initializable.html" title="nablarch.core.repository.initialization.Initializable">Initializable</a>.
Next, implement to accept <code class="docutils literal"><span class="pre">java.sql.DataSource</span></code> as a property.
Finally, implement the <code class="docutils literal"><span class="pre">initialize()</span></code> method that connects to the database.</p>
<p>In the component definition, set the <code class="docutils literal"><span class="pre">DataSource</span></code> to the property.
Then, add this custom class to the list of components that need initialization.</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;meterBinderListProvider&quot;</span>
           <span class="na">class=</span><span class="s">&quot;example.micrometer.CustomMeterBinderListProvider&quot;</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- Set the DataSource --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ref=</span><span class="s">&quot;dataSource&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>

<span class="c">&lt;!-- The components that need initialization. --&gt;</span>
<span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;initializer&quot;</span>
           <span class="na">class=</span><span class="s">&quot;nablarch.core.repository.initialization.BasicApplicationInitializer&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;initializeList&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="c">&lt;!-- ... --&gt;</span>

      <span class="c">&lt;!-- Add CustomMeterBinderListProvider for initialization. --&gt;</span>
      <span class="nt">&lt;component-ref</span> <span class="na">name=</span><span class="s">&quot;meterBinderListProvider&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<p>With the above modifications, the database connection will be made when the system repository is initialized.
The default interval for sending metrics is 1 minute, so in most cases the connection pool will be created before the metrics are sent.
This will cause no warning log to be output.</p>
<p>Note, however, that if the interval for sending metrics is set to a very short time, the metrics may be sent before the system repository is initialized and a warning log may be output.</p>
</div>
</div>
</div>
</div>


           </div>
           <div class="articleComments">
            
           </div>
          </div>
          <footer>

    <hr/>

    <div role="contentinfo">
        <p>
            &copy; Copyright 2010-2021, TIS Inc.
        </p>
    </div>
    Built with <a href="http://sphinx-doc.org/">Sphinx</a> using a <a href="https://github.com/snide/sphinx_rtd_theme">theme</a> provided by <a href="https://readthedocs.org">Read the Docs</a>.

</footer>

        </div>
      </div>

    </section>

  </div>
  


  

    <script type="text/javascript">
        var DOCUMENTATION_OPTIONS = {
            URL_ROOT:'../../',
            VERSION:'5u19',
            COLLAPSE_INDEX:false,
            FILE_SUFFIX:'.html',
            HAS_SOURCE:  true,
            SOURCELINK_SUFFIX: ''
        };
    </script>
      <script type="text/javascript" src="../../_static/jquery.js"></script>
      <script type="text/javascript" src="../../_static/underscore.js"></script>
      <script type="text/javascript" src="../../_static/doctools.js"></script>
      <script type="text/javascript" src="../../_static/custom.js"></script>

  

  
  
    <script type="text/javascript" src="../../_static/js/theme.js"></script>
  

  
  
  <script type="text/javascript">
      jQuery(function () {
          SphinxRtdTheme.StickyNav.enable();
      });
  </script>
   

</body>
</html>