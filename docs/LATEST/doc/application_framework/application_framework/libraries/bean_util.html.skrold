


<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en" > <!--<![endif]-->
<head>
  <meta charset="utf-8">
  <meta http-equiv='content-language' content='ja'>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <title>7.21. Bean Util &mdash; ∇Nablarch  5u19 ドキュメント</title>
  

  
  
  
  

  

  
  
    

  

  
  
    <link rel="stylesheet" href="../../../_static/custom.css" type="text/css" />
  

  

  
  <link rel="canonical" href="https://nablarch.github.io/docs/LATEST/doc/application_framework/application_framework/libraries/bean_util.html" />
  
    <link rel="top" title="∇Nablarch  5u19 ドキュメント" href="../../../index.html"/>
        <link rel="up" title="7. Nablarchが提供するライブラリ" href="index.html"/>
        <link rel="next" title="7.22. 汎用ユーティリティ" href="utility.html"/>
        <link rel="prev" title="7.20. データベースを使用した二重サブミット防止" href="db_double_submit.html"/>
 

  
  <script src="../../../_static/js/modernizr.min.js"></script>

</head>

<body class="wy-body-for-nav" role="document">

   
  <div class="wy-grid-for-nav">

    
    <nav data-toggle="wy-nav-shift" class="wy-nav-side">
      <div class="wy-side-scroll">
        <div class="wy-side-nav-search">
          
  
  <a href="../../../index.html" id="sidebar-title" class="icon"> ∇Nablarch 
  

  
    <div id="sidebar-version">Version: 5u19</div>
  </a>

  <div role="search">
    <form id="google-search-form" class="wy-form" method="get" action="https://www.google.co.jp/search">
      <input type="text" name="text" placeholder="Search docs on google" id="text"/>
      <input type="hidden" name="q" id="q"/>
    </form>
  </div>
    
    

        </div>

        <div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
          
  
  
    <ul class="current">
<li class="toctree-l1"><a class="reference internal" href="../../../about_nablarch/index.html">Nablarchについて</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../about_nablarch/concept.html">Nablarchのコンセプト</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../about_nablarch/concept.html#robustness">Robustness</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../about_nablarch/concept.html#testability">Testability</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../about_nablarch/concept.html#ready-to-use">Ready-to-Use</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../about_nablarch/mvn_module.html">Nablarch のモジュール一覧</a></li>
<li class="toctree-l2"><a class="reference internal" href="../../../about_nablarch/license.html">Nablarchのライセンスについて</a></li>
</ul>
</li>
<li class="toctree-l1 current"><a class="reference internal" href="../../index.html">Nablarchアプリケーションフレームワーク</a><ul class="current">
<li class="toctree-l2 current"><a class="reference internal" href="../index.html">アプリケーションフレームワーク</a><ul class="current">
<li class="toctree-l3"><a class="reference internal" href="../nablarch/index.html">1. Nablarchアプリケーションフレームワークとは</a></li>
<li class="toctree-l3"><a class="reference internal" href="../web/index.html">2. ウェブアプリケーション編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../web_service/index.html">3. ウェブサービス編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../batch/index.html">4. バッチアプリケーション編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../messaging/index.html">5. メッセージング編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../handlers/index.html">6. Nablarchの提供する標準ハンドラ</a></li>
<li class="toctree-l3 current"><a class="reference internal" href="index.html">7. Nablarchが提供するライブラリ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../blank_project/index.html">8. ブランクプロジェクト</a></li>
<li class="toctree-l3"><a class="reference internal" href="../setting_guide/index.html">9. Nablarchアプリケーションフレームワーク設定ガイド</a></li>
<li class="toctree-l3"><a class="reference internal" href="../configuration/index.html">10. デフォルト設定一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../cloud_native/index.html">11. Nablarchクラウドネイティブ対応</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../adaptors/index.html">アダプタ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/log_adaptor.html">logアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/router_adaptor.html">ルーティングアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/webspheremq_adaptor.html">IBM WebSphere MQアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/jaxrs_adaptor.html">JAX-RSアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/doma_adaptor.html">Domaアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/jsr310_adaptor.html">JSR310(Date and Time API)アダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/mail_sender_freemarker_adaptor.html">E-mail FreeMarkerアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/mail_sender_thymeleaf_adaptor.html">E-mail Thymeleafアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/mail_sender_velocity_adaptor.html">E-mail Velocityアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/web_thymeleaf_adaptor.html">ウェブアプリケーション Thymeleafアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/lettuce_adaptor.html">Lettuceアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/slf4j_adaptor.html">SLF4Jアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/micrometer_adaptor.html">Micrometerアダプタ</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../example/index.html">Example</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../example/index.html#id1">環境構築手順について</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../example/index.html#id2">アプリケーションの実行手順について</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../extension_components/index.html">Nablarch拡張コンポーネント</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/report/index.html">1. 帳票ライブラリ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#id2">1.1. 概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#id3">1.2. 要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#id7">1.3. 構造</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#report-template">1.4. 実装例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html">2. ワークフローライブラリ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#id3">2.1. 機能概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#id6">2.2. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#id7">2.3. 使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#xor">2.4. XORゲートウェイの進行先ノードの判定方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#workflow-multi-completion">2.5. マルチインスタンスの完了条件の判定方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/workflow/tool/index.html">3. ワークフロー定義データ生成ツール</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/tool/index.html#id3">3.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/tool/index.html#id4">3.2. 使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/etl/index.html">4. ETL</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id3">4.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#etl-phase">4.2. ETLの各フェーズの仕様</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id5">4.3. ETLを使用するバッチの設計ポイント</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id9">4.4. 使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id18">4.5. 拡張例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/etl/etl_maven_plugin.html">5. ETL Mavenプラグイン</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/etl_maven_plugin.html#id2">5.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/etl_maven_plugin.html#id3">5.2. 使用方法</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../development_tools/index.html">Nablarch開発ツール</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html">1. 効率的なJava静的チェック</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html#code-analysis">1.1. 構文チェックを行う</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html#code-format">1.2. フォーマットを統一する</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html#api">1.3. 許可していないAPIが使用されていないかチェックする</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/ui_dev/index.html">2. フロントエンド上級者向けのUI開発基盤</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/ui_dev/doc/index.html">2.1. Nablarch UI開発基盤 解説書</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/ui_dev/guide/index.html">2.2. JSP/HTML作成ガイド</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/ui_dev/guide/widget_usage/widget_list.html">2.3. UI部品の実装サンプルで提供しているウィジェットの一覧</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/testing_framework/index.html">3. テスティングフレームワーク</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/testing_framework/guide/development_guide/05_UnitTestGuide/index.html">3.1. 単体テスト実施方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/testing_framework/guide/development_guide/06_TestFWGuide/index.html">3.2. 自動テストフレームワークの使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/testing_framework/guide/development_guide/08_TestTools/index.html">3.3. プログラミング工程で使用するツール</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/toolbox/index.html">4. アプリケーション開発時に使える便利なツール</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/toolbox/JspStaticAnalysis/index.html">4.1. JSP静的解析ツール</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/toolbox/SqlExecutor/SqlExecutor.html">4.2. Nablarch SQL Executor</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/toolbox/JspVerifier/JspVerifier.html">4.3. 業務画面JSP検証ツール</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../examples/index.html">Nablarch実装例集</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/01/index.html">データベースを用いたパスワード認証機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/0101_PBKDF2PasswordEncryptor.html">PBKDF2を用いたパスワード暗号化機能サンプル</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id12">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/02/index.html">バリデーション機能の拡張</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#extendedvalidation-mailaddressvalidator">メールアドレスバリデーション</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#extendedvalidation-japanesetelnumbervalidator">日本電話番号バリデーション</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#id12">コード値精査</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/03/index.html">検索結果の一覧表示</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id5">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id8">使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchinfo">ListSearchInfoクラス</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult">listSearchResultタグ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-sort">検索結果の並び替え</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-nopaging">1画面にすべての検索結果を一覧表示する場合の実装方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-defaultcondition">デフォルトの検索条件で検索した結果を初期表示する場合の実装方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-setting">検索結果の一覧表示機能のデフォルト値設定</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-customize">業務アプリケーションへのサンプル実装(タグファイル)の取り込み方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-tagreference">タグリファレンス</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/04/index.html">フォーマッタ機能の拡張</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/04/0401_ExtendedDataFormatter.html">データフォーマッタの拡張</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/04/0402_ExtendedFieldType.html">データフォーマッタ機能におけるフィールドタイプの拡張</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/05/index.html">データベースを用いたファイル管理機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id2">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id6">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id7">機能</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id10">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id15">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/06/index.html">CAPTCHA機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/06_Captcha_guide.html">CAPTCHA機能の組み込み手順</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id21">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/07/index.html">UserAgent情報取得機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id1">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id3">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id8">設定の記述</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id11">使用例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/08/index.html">HTMLメール送信機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id1">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id3">要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id14">実装例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/09/index.html">bouncycastleを使用した電子署名つきメールの送信サンプルの使用方法</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id3">環境準備</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id4">電子署名付きメール送信機能の構造</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id5">設定ファイルの準備</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id7">実行方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/10/index.html">ログ集計サンプルの使用方法</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/10/index.html#id3">提供サンプル一覧</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/11/index.html">メッセージング基盤テストシミュレータサンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id4">用途</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id8">特徴</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id12">要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id15">使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id18">拡張例</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../nablarch_api/index.html">Nablarch API</a></li>
</ul>

  

        </div>
      </div>
    </nav>

    <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap">

      
      <nav class="wy-nav-top" role="navigation" aria-label="top navigation">
        
          <i data-toggle="wy-nav-top" class="fa fa-bars"></i>
          <a href="../../../index.html">∇Nablarch </a>
        
      </nav>


      
      <div class="wy-nav-content">
        <div class="rst-content">
          

 



<div role="navigation" aria-label="breadcrumbs navigation">
  <ul class="wy-breadcrumbs">
    <li><a href="../../../index.html">Docs</a> &raquo;</li>
      
          <li><a href="../../index.html">Nablarchアプリケーションフレームワーク</a> &raquo;</li>
      
          <li><a href="../index.html">アプリケーションフレームワーク</a> &raquo;</li>
      
          <li><a href="index.html">7. Nablarchが提供するライブラリ</a> &raquo;</li>
      
    <li>7.21. Bean Util</li>
    <li class="wy-breadcrumbs-aside">
      <a href="https://github.com/nablarch" class="fa fa-github">GitHub</a>
    </li>
    <li class="wy-breadcrumbs-aside">
        <a href="https://nablarch.github.io/docs/LATEST/doc/en/index.html" class="en">English</a>
    </li>
  </ul>
  <hr/>
</div>
          <div role="main" class="document" itemscope="itemscope" itemtype="http://schema.org/Article">
           <div itemprop="articleBody">
            
  <div class="section" id="bean-util">
<span id="id1"></span><h1>7.21. Bean Util<a class="headerlink" href="#bean-util" title="このヘッドラインへのパーマリンク">¶</a></h1>
<div class="contents local topic" id="id2">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#id3" id="id10">モジュール一覧</a></li>
<li><a class="reference internal" href="#id4" id="id11">使用方法</a></li>
<li><a class="reference internal" href="#beanutil" id="id12">BeanUtilの型変換ルール</a></li>
<li><a class="reference internal" href="#utility-conversion-add-rule" id="id13">型変換ルールを追加する</a></li>
<li><a class="reference internal" href="#id6" id="id14">型変換時に許容するフォーマットを指定する</a><ul>
<li><a class="reference internal" href="#bean-util-format-default-setting" id="id15">デフォルト(システム共通)の許容するフォーマットを設定する</a></li>
<li><a class="reference internal" href="#bean-util-format-property-setting" id="id16">コピー対象のプロパティに対して許容するフォーマットを設定する</a></li>
<li><a class="reference internal" href="#bean-util-format-logical" id="id17">BeanUtil呼び出し時に許容するフォーマットを設定する</a></li>
</ul>
</li>
</ul>
</div>
<p>Java Beansに関する以下機能を提供する。</p>
<ul class="simple">
<li>プロパティに対する値の設定と取得</li>
<li>他のJava Beansへの値の移送</li>
<li>Java Beansとjava.util.Mapとの間での値の移送</li>
</ul>
<div class="section" id="id3">
<h2><a class="toc-backref" href="#id10">7.21.1. モジュール一覧</a><a class="headerlink" href="#id3" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.nablarch.framework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>nablarch-core-beans<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</pre></div>
</div>
</div>
<div class="section" id="id4">
<h2><a class="toc-backref" href="#id11">7.21.2. 使用方法</a><a class="headerlink" href="#id4" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/BeanUtil.html" title="nablarch.core.beans.BeanUtil">BeanUtil</a> が提供するAPIを使用して、任意のJava Beansに対する操作が実現できる。</p>
<p>BeanUtilの使用例を以下に示す。</p>
<dl class="docutils">
<dt>Bean定義</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Date</span> <span class="n">birthDay</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
    <span class="c1">// getter &amp; setterは省略</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">postNo</span><span class="o">;</span>
    <span class="c1">// getter &amp; setterは省略</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDto</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">birthDay</span><span class="o">;</span>
    <span class="c1">// getter &amp; setterは省略</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
<dt>BeanUtilの使用例</dt>
<dd><p class="first">幾つかのAPIの使用例を以下に示す。
詳細は、BeanUtilの <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/BeanUtil.html" title="nablarch.core.beans.BeanUtil">Javadoc</a> を参照。</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="kd">final</span> <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
<span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
<span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;名前&quot;</span><span class="o">);</span>
<span class="n">user</span><span class="o">.</span><span class="na">setBirthDay</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>

<span class="kd">final</span> <span class="n">Address</span> <span class="n">address</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Address</span><span class="o">();</span>
<span class="n">address</span><span class="o">.</span><span class="na">setPostNo</span><span class="o">(</span><span class="s">&quot;1234&quot;</span><span class="o">);</span>
<span class="n">user</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>


<span class="c1">// プロパティ名を指定して値を取得する(1が取得できる)。</span>
<span class="c1">// 値はgetter経由で取得される。</span>
<span class="kd">final</span> <span class="n">Long</span> <span class="n">id</span> <span class="o">=</span> <span class="o">(</span><span class="n">Long</span><span class="o">)</span> <span class="n">BeanUtil</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="s">&quot;id&quot;</span><span class="o">);</span>

<span class="c1">// プロパティ名を指定して値を設定する(nameプロパティの値が「新しい名前」に変更される)</span>
<span class="c1">// 値はsetter経由で設定される。</span>
<span class="n">BeanUtil</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;新しい名前&quot;</span><span class="o">);</span>

<span class="c1">// 他のBeanを作成しつつ値の移送する。</span>
<span class="c1">// Userのプロパティ名と一致するUserDtoのプロパティに対して値が移送される。</span>
<span class="c1">// 値の移送はgetter及びsetterを使用して行われる。</span>
<span class="c1">// 移送先に存在しないプロパティは無視される。</span>
<span class="c1">// 移送先のプロパティの型が異なる場合は、ConversionUtilにより型変換が行われる。</span>
<span class="kd">final</span> <span class="n">UserDto</span> <span class="n">dto</span> <span class="o">=</span> <span class="n">BeanUtil</span><span class="o">.</span><span class="na">createAndCopy</span><span class="o">(</span><span class="n">UserDto</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>

<span class="c1">// プロパティの値をMapに移送する。</span>
<span class="c1">// Mapのキーは、プロパティ名で値がgetterで取得した値となる。</span>
<span class="c1">// ネストしたBeanの値はキー名が「.」で区切られて移送される(Map -&gt; Mapとネストはしない)</span>
<span class="c1">// 例えば、address.postNoとなる。</span>
<span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">BeanUtil</span><span class="o">.</span><span class="na">createMapAndCopy</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
<span class="kd">final</span> <span class="n">String</span> <span class="n">postNo</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;address.postNo&quot;</span><span class="o">);</span>     <span class="c1">// 1234が取得できる。</span>

<span class="c1">// Mapの値をBeanに移送する。</span>
<span class="c1">// Mapのキーと一致するプロパティのsetterを使用してMapの値を移送する。</span>
<span class="c1">// ネストしたBeanに値を移送する場合は、Mapのキー名が「.」で区切られている必要がある。(Map -&gt; Mapとネストしたものは扱えない)</span>
<span class="c1">// 例えば、address.postNoとキー名を定義することで、User.addressのpostNoプロパティに値が設定される。</span>
<span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">userMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;();</span>
<span class="n">userMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">,</span> <span class="mi">1L</span><span class="o">);</span>
<span class="n">userMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;address.postNo&quot;</span><span class="o">,</span> <span class="mi">54321</span><span class="o">);</span>
<span class="kd">final</span> <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">BeanUtil</span><span class="o">.</span><span class="na">createAndCopy</span><span class="o">(</span><span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">userMap</span><span class="o">);</span>
<span class="kd">final</span> <span class="n">String</span> <span class="n">postNo2</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="na">getAddress</span><span class="o">()</span>
                      <span class="o">.</span><span class="na">getPostNo</span><span class="o">();</span>             <span class="c1">// 54321が取得できる。</span>
</pre></div>
</div>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p>BeanUtilはList型の型パラメータに対応していない。List型の型パラメータを使いたい場合は具象クラスでgetterをオーバーライドして対応すること。</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ItemsForm</span><span class="o">&lt;</span><span class="n">D</span> <span class="kd">extends</span> <span class="n">Serializable</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">D</span><span class="o">&gt;</span> <span class="n">items</span><span class="o">;</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">D</span><span class="o">&gt;</span> <span class="nf">getItems</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">items</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setItems</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">D</span><span class="o">&gt;</span> <span class="n">items</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">items</span> <span class="o">=</span> <span class="n">items</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Item</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
    <span class="c1">// プロパティは省略</span>
<span class="o">}</span>

<span class="c1">// 具象クラスでオーバーライドしない場合。</span>
<span class="c1">// BeanUtil.createAndCopy(BadSampleForm.class, map)を呼び出すと、</span>
<span class="c1">// List型の型パラメータに対応していないため実行時例外が発生する。</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BadSampleForm</span> <span class="kd">extends</span> <span class="n">ItemsForm</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>

<span class="c1">// 具象クラスでオーバーライドした場合。</span>
<span class="c1">// BeanUtil.createAndCopy(GoodSampleForm.class, map)が正常に動作する。</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">GoodSampleForm</span> <span class="kd">extends</span> <span class="n">ItemsForm</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;</span> <span class="nf">getItems</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">getItems</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="beanutil">
<span id="utility-conversion"></span><h2><a class="toc-backref" href="#id12">7.21.3. BeanUtilの型変換ルール</a><a class="headerlink" href="#beanutil" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/BeanUtil.html" title="nablarch.core.beans.BeanUtil">BeanUtil</a> では、Java BeansオブジェクトやMapオブジェクトから
別のJava Beansオブジェクトにデータ移行する際にプロパティの型変換を行っている。</p>
<p>なお、MapオブジェクトからJava Beansオブジェクトにデータ移行する場合、
Mapオブジェクトのキーに <code class="docutils literal"><span class="pre">.</span></code> が含まれていればそのプロパティをネストオブジェクトとして扱う。</p>
<p>型変換ルールについては、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/converter/package-summary.html" title="nablarch.core.beans.converter.package-summary">nablarch.core.beans.converter</a> パッケージ配下に配置されている
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/Converter.html" title="nablarch.core.beans.Converter">Converter</a> 実装クラスをそれぞれ参照すること。</p>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">デフォルトで提供する型変換ルールでは、精度の小さい型への変換を行った場合(例えばLongからIntegerへの変換)で、変換先の精度を超えるような値を指定しても正常に処理を終了する。
このため、BeanUtilを使用してコピーを行う際には、コピーする値がシステムで許容されているかどうかを <a class="reference internal" href="validation.html#validation"><span>入力値のチェック</span></a> によって事前に検証しておく必要がある。
検証を行わなかった場合、不正な値がシステムに取り込まれ障害の原因となる可能性がある。</p>
</div>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">型変換ルールはアプリケーション共通の設定となる。
特定の処理のみ異なる型変換ルールを適用したい場合は、 <a class="reference internal" href="#bean-util-format-logical"><span>BeanUtil呼び出し時に許容するフォーマットを設定する</span></a> を参照し、
特定のプロパティや型に対して <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/Converter.html" title="nablarch.core.beans.Converter">Converter</a> 実装を適用し対応すること。</p>
</div>
</div>
<div class="section" id="utility-conversion-add-rule">
<span id="id5"></span><h2><a class="toc-backref" href="#id13">7.21.4. 型変換ルールを追加する</a><a class="headerlink" href="#utility-conversion-add-rule" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p>型変換ルールを追加するには、以下の手順が必要となる。</p>
<ol class="arabic simple">
<li>必要に応じて以下のインタフェースを実装し型変換処理を実現する。</li>
</ol>
<blockquote>
<div><ul class="simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/Converter.html" title="nablarch.core.beans.Converter">Converter</a></li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/ExtensionConverter.html" title="nablarch.core.beans.ExtensionConverter">ExtensionConverter</a></li>
</ul>
</div></blockquote>
<ol class="arabic simple" start="2">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/ConversionManager.html" title="nablarch.core.beans.ConversionManager">ConversionManager</a> の実装クラスを作成する。
今回は標準の型変換ルールに追加でルールを設定するため、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/ConversionManager.html" title="nablarch.core.beans.ConversionManager">ConversionManager</a> をプロパティとして持つ、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/ConversionManager.html" title="nablarch.core.beans.ConversionManager">ConversionManager</a> の実装クラスを作成する。</li>
</ol>
<blockquote>
<div><div class="highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleConversionManager</span> <span class="kd">implements</span> <span class="n">ConversionManager</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">ConversionManager</span> <span class="n">delegateManager</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?&gt;,</span> <span class="n">Converter</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">getConverters</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?&gt;,</span> <span class="n">Converter</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">converters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?&gt;,</span> <span class="n">Converter</span><span class="o">&lt;?&gt;&gt;();</span>

        <span class="c1">// 標準のコンバータ</span>
        <span class="n">converters</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="n">delegateManager</span><span class="o">.</span><span class="na">getConverters</span><span class="o">());</span>

        <span class="c1">// 今回作成したコンバータ</span>
        <span class="n">converters</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">BigInteger</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">CustomConverter</span><span class="o">());</span>

        <span class="k">return</span> <span class="n">Collections</span><span class="o">.</span><span class="na">unmodifiableMap</span><span class="o">(</span><span class="n">converters</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">ExtensionConverter</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">getExtensionConvertor</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">ExtensionConverter</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">extensionConverters</span> <span class="o">=</span>
            <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ExtensionConverter</span><span class="o">&lt;?&gt;&gt;(</span><span class="n">delegateManager</span><span class="o">.</span><span class="na">getExtensionConvertor</span><span class="o">());</span>
        <span class="n">extensionConverters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">CustomExtensionConverter</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">extensionConverters</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDelegateManager</span><span class="o">(</span><span class="n">ConversionManager</span> <span class="n">delegateManager</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">delegateManager</span> <span class="o">=</span> <span class="n">delegateManager</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</div></blockquote>
<ol class="arabic" start="3">
<li><p class="first">コンポーネント設定ファイルに、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/ConversionManager.html" title="nablarch.core.beans.ConversionManager">ConversionManager</a> の実装クラスを設定する。</p>
<dl class="docutils">
<dt>ポイント</dt>
<dd><ul class="first last simple">
<li>コンポーネント名は <strong>conversionManager</strong> とすること。</li>
</ul>
</dd>
</dl>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;conversionManager&quot;</span> <span class="na">class=</span><span class="s">&quot;sample.SampleConversionManager&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;delegateManager&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.core.beans.BasicConversionManager&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
</li>
</ol>
</div>
<div class="section" id="id6">
<h2><a class="toc-backref" href="#id14">7.21.5. 型変換時に許容するフォーマットを指定する</a><a class="headerlink" href="#id6" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p>型変換時には、許容するフォーマットを指定することで日付や数値のフォーマットを解除できる。
例えば、カンマ編集されたString型の値(1,000,000)を数値型(1000000)に変換できる。</p>
<p>許容するフォーマットは、以下の3種類の指定方法がある。優先順位は上に記載したものが高くなる。</p>
<ul class="simple">
<li><a class="reference internal" href="#bean-util-format-logical"><span>BeanUtil呼び出し時に設定</span></a></li>
<li><a class="reference internal" href="#bean-util-format-property-setting"><span>プロパティ単位にアノテーションで設定</span></a></li>
<li><a class="reference internal" href="#bean-util-format-default-setting"><span>デフォルト設定(システム共通設定)</span></a></li>
</ul>
<div class="section" id="bean-util-format-default-setting">
<span id="id7"></span><h3><a class="toc-backref" href="#id15">7.21.5.1. デフォルト(システム共通)の許容するフォーマットを設定する</a><a class="headerlink" href="#bean-util-format-default-setting" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>フォーマットのデフォルト設定は、コンポーネント設定ファイルに設定する。</p>
<p>例えば、画面上で入力される数値についてはカンマ編集されているものも許容する場合には、デフォルト設定を行うことで個別指定が不要となる。</p>
<p>以下に設定方法を示す。</p>
<dl class="docutils">
<dt>ポイント</dt>
<dd><ul class="first last simple">
<li>コンポーネント名を <strong>conversionManager</strong> で <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/BasicConversionManager.html" title="nablarch.core.beans.BasicConversionManager">BasicConversionManager</a> を定義する。</li>
<li><code class="docutils literal"><span class="pre">datePatterns</span></code> プロパティに許容する日付及び日時形式のフォーマットを設定する。</li>
<li><code class="docutils literal"><span class="pre">numberPatterns</span></code> プロパティに許容する数値形式のフォーマット定義を設定する。</li>
<li>複数のフォーマットを許容する場合は複数設定する。</li>
</ul>
</dd>
<dt>設定例</dt>
<dd><div class="first last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;conversionManager&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.core.beans.BasicConversionManager&quot;</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- 日付及び日時の許容するフォーマットを指定する --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;datePatterns&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;value&gt;</span>yyyy/MM/dd<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;value&gt;</span>yyyy-MM-dd<span class="nt">&lt;/value&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
  <span class="c">&lt;!-- 数値の許容するフォーマットを指定する --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;numberPatterns&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;value&gt;</span>#,###<span class="nt">&lt;/value&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p><code class="docutils literal"><span class="pre">yyyy/MM/dd</span></code> と <code class="docutils literal"><span class="pre">yyyy/MM/dd</span> <span class="pre">HH:mm:ss</span></code> の用に日付と日時のフォーマットを指定した場合、
日時形式の値も <cite>yyyy/MM/dd</cite> パース出来てしまうため時間情報が欠落してしまうケースがある。</p>
<p class="last">このため、デフォルト指定では日付のフォーマットのみを指定し、日時形式の項目については <a class="reference internal" href="#bean-util-format-property-setting"><span>プロパティ単位にアノテーションで設定</span></a>
を使用してデフォルト設定をオーバライドするなどの対応が必要となる。</p>
</div>
</div>
<div class="section" id="bean-util-format-property-setting">
<span id="id8"></span><h3><a class="toc-backref" href="#id16">7.21.5.2. コピー対象のプロパティに対して許容するフォーマットを設定する</a><a class="headerlink" href="#bean-util-format-property-setting" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>特定機能だけ <a class="reference internal" href="#bean-util-format-default-setting"><span>デフォルト設定</span></a> を適用せずに異なるフォーマットを指定したい場合がある。
この場合は、コピー対象のBean(コピー元またはコピー先)の該当プロパティに対応したフィールドに対してアノテーションを指定し許容するフォーマットを上書きする。</p>
<p>アノテーションは、コピー元とコピー先のどちらに指定しても動作するが、基本的に許容するフォーマットはString型のプロパティに対応するフィールドに指定するのが好ましい。
なぜなら、フォーマットした値を持つのはString型のプロパティであり、そのプロパティに対して許容するフォーマットが指定されていることが自然であるためである。
もし、コピー元とコピー先の両方に指定されている場合は、コピー元の設定を使用する。</p>
<p>例えば、デフォルト設定では日付のフォーマットを指定している場合で、特定機能のみ日時フォーマットを許容する場合に使用するとよい。</p>
<p>以下に実装例を示す。</p>
<dl class="docutils">
<dt>ポイント</dt>
<dd><ul class="first last simple">
<li>コピー元(コピー先)のプロパティに対応したフィールドに対して <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/CopyOption.html" title="nablarch.core.beans.CopyOption">CopyOption</a> アノテーションを設定する。</li>
<li>CopyOptionの <code class="docutils literal"><span class="pre">datePattern</span></code> に許容する日付及び日時のフォーマットを指定する。</li>
<li>CopyOptionの <code class="docutils literal"><span class="pre">numberPattern</span></code> に許容する数値のフォーマットを指定する。</li>
</ul>
</dd>
<dt>実装例</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Bean</span> <span class="o">{</span>
    <span class="c1">// 許容する日時フォーマットを指定する</span>
    <span class="nd">@CopyOption</span><span class="o">(</span><span class="n">datePattern</span> <span class="o">=</span> <span class="s">&quot;yyyy/MM/dd HH:mm:ss&quot;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">timestamp</span><span class="o">;</span>

    <span class="c1">// 許容する数値フォーマットを指定する</span>
    <span class="nd">@CopyOption</span><span class="o">(</span><span class="n">numberPattern</span> <span class="o">=</span> <span class="s">&quot;#,###&quot;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">number</span><span class="o">;</span>

    <span class="c1">// setter及びgetterは省略</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="bean-util-format-logical">
<span id="id9"></span><h3><a class="toc-backref" href="#id17">7.21.5.3. BeanUtil呼び出し時に許容するフォーマットを設定する</a><a class="headerlink" href="#bean-util-format-logical" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>特定機能だけ <a class="reference internal" href="#bean-util-format-default-setting"><span>デフォルト設定</span></a> を適用せずに異なるフォーマットを指定したいが、
OSSなどを用いてBeanを自動生成している場合に <a class="reference internal" href="#bean-util-format-property-setting"><span>プロパティ単位にアノテーションで設定</span></a> が使用できない場合がある。
また、特定プロパティのみ異なる型変換ルールを適用したい場合がある。</p>
<p>このような場合は、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/BeanUtil.html" title="nablarch.core.beans.BeanUtil">BeanUtil</a> 呼び出し時に、許容するフォーマットや型変換ルールを設定し対応する。</p>
<p>以下に実装例を示す。</p>
<dl class="docutils">
<dt>ポイント</dt>
<dd><ul class="first last simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/CopyOptions.html" title="nablarch.core.beans.CopyOptions">CopyOptions</a> を使用してプロパティに対する設定を行う。
<code class="docutils literal"><span class="pre">CopyOptions</span></code> の構築方法は、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/CopyOptions.Builder.html" title="nablarch.core.beans.CopyOptions.Builder">CopyOptions.Builder</a> を参照。</li>
<li>生成した <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/CopyOptions.html" title="nablarch.core.beans.CopyOptions">CopyOptions</a> を使用して <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/beans/BeanUtil.html" title="nablarch.core.beans.BeanUtil">BeanUtil</a> を呼び出す。</li>
</ul>
</dd>
<dt>実装例</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="kd">final</span> <span class="n">CopyOptions</span> <span class="n">copyOptions</span> <span class="o">=</span> <span class="n">CopyOptions</span><span class="o">.</span><span class="na">options</span><span class="o">()</span>
        <span class="c1">// timestampプロパティに対して許容するフォーマットを指定</span>
        <span class="o">.</span><span class="na">datePatternByName</span><span class="o">(</span><span class="s">&quot;timestamp&quot;</span><span class="o">,</span> <span class="s">&quot;yyyy年MM月dd日 HH時mm分ss秒&quot;</span><span class="o">)</span>
        <span class="c1">// customプロパティに対してCustomDateConverterを適用</span>
        <span class="o">.</span><span class="na">converterByName</span><span class="o">(</span><span class="s">&quot;custom&quot;</span><span class="o">,</span> <span class="n">Date</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">CustomDateConverter</span><span class="o">())</span>
        <span class="o">.</span><span class="na">build</span><span class="o">();</span>

 <span class="c1">// CopyOptionsを指定してBeanUtilを呼び出す。</span>
 <span class="kd">final</span> <span class="n">DestBean</span> <span class="n">copy</span> <span class="o">=</span> <span class="n">BeanUtil</span><span class="o">.</span><span class="na">createAndCopy</span><span class="o">(</span><span class="n">DestBean</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">bean</span><span class="o">,</span> <span class="n">copyOptions</span><span class="o">);</span>
</pre></div>
</div>
</dd>
</dl>
</div>
</div>
</div>


           </div>
           <div class="articleComments">
            
           </div>
          </div>
          <footer>

    <hr/>

    <div role="contentinfo">
        <p>
            &copy; Copyright 2010-2021, TIS Inc.
        </p>
    </div>
    Built with <a href="http://sphinx-doc.org/">Sphinx</a> using a <a href="https://github.com/snide/sphinx_rtd_theme">theme</a> provided by <a href="https://readthedocs.org">Read the Docs</a>.

</footer>

        </div>
      </div>

    </section>

  </div>
  


  

    <script type="text/javascript">
        var DOCUMENTATION_OPTIONS = {
            URL_ROOT:'../../../',
            VERSION:'5u19',
            COLLAPSE_INDEX:false,
            FILE_SUFFIX:'.html',
            HAS_SOURCE:  true,
            SOURCELINK_SUFFIX: ''
        };
    </script>
      <script type="text/javascript" src="../../../_static/jquery.js"></script>
      <script type="text/javascript" src="../../../_static/underscore.js"></script>
      <script type="text/javascript" src="../../../_static/doctools.js"></script>
      <script type="text/javascript" src="../../../_static/custom.js"></script>
      <script type="text/javascript" src="../../../_static/translations.js"></script>

  

  
  
    <script type="text/javascript" src="../../../_static/js/theme.js"></script>
  

  
  
  <script type="text/javascript">
      jQuery(function () {
          SphinxRtdTheme.StickyNav.enable();
      });
  </script>
   

</body>
</html>