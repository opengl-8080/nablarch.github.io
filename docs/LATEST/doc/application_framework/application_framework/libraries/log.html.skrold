


<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en" > <!--<![endif]-->
<head>
  <meta charset="utf-8">
  <meta http-equiv='content-language' content='ja'>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <title>7.1. ログ出力 &mdash; ∇Nablarch  5u19 ドキュメント</title>
  

  
  
  
  

  

  
  
    

  

  
  
    <link rel="stylesheet" href="../../../_static/custom.css" type="text/css" />
  

  

  
  <link rel="canonical" href="https://nablarch.github.io/docs/LATEST/doc/application_framework/application_framework/libraries/log.html" />
  
    <link rel="top" title="∇Nablarch  5u19 ドキュメント" href="../../../index.html"/>
        <link rel="up" title="7. Nablarchが提供するライブラリ" href="index.html"/>
        <link rel="next" title="7.1.1.2.1. 障害ログの出力" href="log/failure_log.html"/>
        <link rel="prev" title="7. Nablarchが提供するライブラリ" href="index.html"/>
 

  
  <script src="../../../_static/js/modernizr.min.js"></script>

</head>

<body class="wy-body-for-nav" role="document">

   
  <div class="wy-grid-for-nav">

    
    <nav data-toggle="wy-nav-shift" class="wy-nav-side">
      <div class="wy-side-scroll">
        <div class="wy-side-nav-search">
          
  
  <a href="../../../index.html" id="sidebar-title" class="icon"> ∇Nablarch 
  

  
    <div id="sidebar-version">Version: 5u19</div>
  </a>

  <div role="search">
    <form id="google-search-form" class="wy-form" method="get" action="https://www.google.co.jp/search">
      <input type="text" name="text" placeholder="Search docs on google" id="text"/>
      <input type="hidden" name="q" id="q"/>
    </form>
  </div>
    
    

        </div>

        <div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
          
  
  
    <ul class="current">
<li class="toctree-l1"><a class="reference internal" href="../../../about_nablarch/index.html">Nablarchについて</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../about_nablarch/concept.html">Nablarchのコンセプト</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../about_nablarch/concept.html#robustness">Robustness</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../about_nablarch/concept.html#testability">Testability</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../about_nablarch/concept.html#ready-to-use">Ready-to-Use</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../about_nablarch/mvn_module.html">Nablarch のモジュール一覧</a></li>
<li class="toctree-l2"><a class="reference internal" href="../../../about_nablarch/license.html">Nablarchのライセンスについて</a></li>
</ul>
</li>
<li class="toctree-l1 current"><a class="reference internal" href="../../index.html">Nablarchアプリケーションフレームワーク</a><ul class="current">
<li class="toctree-l2 current"><a class="reference internal" href="../index.html">アプリケーションフレームワーク</a><ul class="current">
<li class="toctree-l3"><a class="reference internal" href="../nablarch/index.html">1. Nablarchアプリケーションフレームワークとは</a></li>
<li class="toctree-l3"><a class="reference internal" href="../web/index.html">2. ウェブアプリケーション編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../web_service/index.html">3. ウェブサービス編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../batch/index.html">4. バッチアプリケーション編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../messaging/index.html">5. メッセージング編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../handlers/index.html">6. Nablarchの提供する標準ハンドラ</a></li>
<li class="toctree-l3 current"><a class="reference internal" href="index.html">7. Nablarchが提供するライブラリ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../blank_project/index.html">8. ブランクプロジェクト</a></li>
<li class="toctree-l3"><a class="reference internal" href="../setting_guide/index.html">9. Nablarchアプリケーションフレームワーク設定ガイド</a></li>
<li class="toctree-l3"><a class="reference internal" href="../configuration/index.html">10. デフォルト設定一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../cloud_native/index.html">11. Nablarchクラウドネイティブ対応</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../adaptors/index.html">アダプタ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/log_adaptor.html">logアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/router_adaptor.html">ルーティングアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/webspheremq_adaptor.html">IBM WebSphere MQアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/jaxrs_adaptor.html">JAX-RSアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/doma_adaptor.html">Domaアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/jsr310_adaptor.html">JSR310(Date and Time API)アダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/mail_sender_freemarker_adaptor.html">E-mail FreeMarkerアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/mail_sender_thymeleaf_adaptor.html">E-mail Thymeleafアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/mail_sender_velocity_adaptor.html">E-mail Velocityアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/web_thymeleaf_adaptor.html">ウェブアプリケーション Thymeleafアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/lettuce_adaptor.html">Lettuceアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/slf4j_adaptor.html">SLF4Jアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/micrometer_adaptor.html">Micrometerアダプタ</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../example/index.html">Example</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../example/index.html#id1">環境構築手順について</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../example/index.html#id2">アプリケーションの実行手順について</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../extension_components/index.html">Nablarch拡張コンポーネント</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/report/index.html">1. 帳票ライブラリ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#id2">1.1. 概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#id3">1.2. 要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#id7">1.3. 構造</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#report-template">1.4. 実装例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html">2. ワークフローライブラリ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#id3">2.1. 機能概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#id6">2.2. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#id7">2.3. 使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#xor">2.4. XORゲートウェイの進行先ノードの判定方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#workflow-multi-completion">2.5. マルチインスタンスの完了条件の判定方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/workflow/tool/index.html">3. ワークフロー定義データ生成ツール</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/tool/index.html#id3">3.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/tool/index.html#id4">3.2. 使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/etl/index.html">4. ETL</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id3">4.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#etl-phase">4.2. ETLの各フェーズの仕様</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id5">4.3. ETLを使用するバッチの設計ポイント</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id9">4.4. 使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id18">4.5. 拡張例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/etl/etl_maven_plugin.html">5. ETL Mavenプラグイン</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/etl_maven_plugin.html#id2">5.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/etl_maven_plugin.html#id3">5.2. 使用方法</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../development_tools/index.html">Nablarch開発ツール</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html">1. 効率的なJava静的チェック</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html#code-analysis">1.1. 構文チェックを行う</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html#code-format">1.2. フォーマットを統一する</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html#api">1.3. 許可していないAPIが使用されていないかチェックする</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/ui_dev/index.html">2. フロントエンド上級者向けのUI開発基盤</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/ui_dev/doc/index.html">2.1. Nablarch UI開発基盤 解説書</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/ui_dev/guide/index.html">2.2. JSP/HTML作成ガイド</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/ui_dev/guide/widget_usage/widget_list.html">2.3. UI部品の実装サンプルで提供しているウィジェットの一覧</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/testing_framework/index.html">3. テスティングフレームワーク</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/testing_framework/guide/development_guide/05_UnitTestGuide/index.html">3.1. 単体テスト実施方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/testing_framework/guide/development_guide/06_TestFWGuide/index.html">3.2. 自動テストフレームワークの使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/testing_framework/guide/development_guide/08_TestTools/index.html">3.3. プログラミング工程で使用するツール</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/toolbox/index.html">4. アプリケーション開発時に使える便利なツール</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/toolbox/JspStaticAnalysis/index.html">4.1. JSP静的解析ツール</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/toolbox/SqlExecutor/SqlExecutor.html">4.2. Nablarch SQL Executor</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/toolbox/JspVerifier/JspVerifier.html">4.3. 業務画面JSP検証ツール</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../examples/index.html">Nablarch実装例集</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/01/index.html">データベースを用いたパスワード認証機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/0101_PBKDF2PasswordEncryptor.html">PBKDF2を用いたパスワード暗号化機能サンプル</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id12">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/02/index.html">バリデーション機能の拡張</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#extendedvalidation-mailaddressvalidator">メールアドレスバリデーション</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#extendedvalidation-japanesetelnumbervalidator">日本電話番号バリデーション</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#id12">コード値精査</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/03/index.html">検索結果の一覧表示</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id5">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id8">使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchinfo">ListSearchInfoクラス</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult">listSearchResultタグ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-sort">検索結果の並び替え</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-nopaging">1画面にすべての検索結果を一覧表示する場合の実装方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-defaultcondition">デフォルトの検索条件で検索した結果を初期表示する場合の実装方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-setting">検索結果の一覧表示機能のデフォルト値設定</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-customize">業務アプリケーションへのサンプル実装(タグファイル)の取り込み方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-tagreference">タグリファレンス</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/04/index.html">フォーマッタ機能の拡張</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/04/0401_ExtendedDataFormatter.html">データフォーマッタの拡張</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/04/0402_ExtendedFieldType.html">データフォーマッタ機能におけるフィールドタイプの拡張</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/05/index.html">データベースを用いたファイル管理機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id2">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id6">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id7">機能</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id10">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id15">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/06/index.html">CAPTCHA機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/06_Captcha_guide.html">CAPTCHA機能の組み込み手順</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id21">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/07/index.html">UserAgent情報取得機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id1">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id3">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id8">設定の記述</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id11">使用例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/08/index.html">HTMLメール送信機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id1">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id3">要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id14">実装例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/09/index.html">bouncycastleを使用した電子署名つきメールの送信サンプルの使用方法</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id3">環境準備</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id4">電子署名付きメール送信機能の構造</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id5">設定ファイルの準備</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id7">実行方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/10/index.html">ログ集計サンプルの使用方法</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/10/index.html#id3">提供サンプル一覧</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/11/index.html">メッセージング基盤テストシミュレータサンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id4">用途</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id8">特徴</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id12">要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id15">使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id18">拡張例</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../nablarch_api/index.html">Nablarch API</a></li>
</ul>

  

        </div>
      </div>
    </nav>

    <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap">

      
      <nav class="wy-nav-top" role="navigation" aria-label="top navigation">
        
          <i data-toggle="wy-nav-top" class="fa fa-bars"></i>
          <a href="../../../index.html">∇Nablarch </a>
        
      </nav>


      
      <div class="wy-nav-content">
        <div class="rst-content">
          

 



<div role="navigation" aria-label="breadcrumbs navigation">
  <ul class="wy-breadcrumbs">
    <li><a href="../../../index.html">Docs</a> &raquo;</li>
      
          <li><a href="../../index.html">Nablarchアプリケーションフレームワーク</a> &raquo;</li>
      
          <li><a href="../index.html">アプリケーションフレームワーク</a> &raquo;</li>
      
          <li><a href="index.html">7. Nablarchが提供するライブラリ</a> &raquo;</li>
      
    <li>7.1. ログ出力</li>
    <li class="wy-breadcrumbs-aside">
      <a href="https://github.com/nablarch" class="fa fa-github">GitHub</a>
    </li>
    <li class="wy-breadcrumbs-aside">
        <a href="https://nablarch.github.io/docs/LATEST/doc/en/index.html" class="en">English</a>
    </li>
  </ul>
  <hr/>
</div>
          <div role="main" class="document" itemscope="itemscope" itemtype="http://schema.org/Article">
           <div itemprop="articleBody">
            
  <div class="section" id="log">
<span id="id1"></span><h1>7.1. ログ出力<a class="headerlink" href="#log" title="このヘッドラインへのパーマリンク">¶</a></h1>
<div class="contents local topic" id="id2">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#id3" id="id31">機能概要</a><ul>
<li><a class="reference internal" href="#id4" id="id32">ログ出力機能の実装を差し替えることができる</a></li>
<li><a class="reference internal" href="#id5" id="id33">各種ログの出力機能を予め提供している</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id6" id="id34">モジュール一覧</a></li>
<li><a class="reference internal" href="#id7" id="id35">使用方法</a><ul>
<li><a class="reference internal" href="#id8" id="id36">ログを出力する</a></li>
<li><a class="reference internal" href="#log-basic-setting" id="id37">ログ出力の設定を行う</a></li>
<li><a class="reference internal" href="#id10" id="id38">ログ出力の設定を上書く</a></li>
<li><a class="reference internal" href="#log-log-format" id="id39">ログのフォーマットを指定する</a></li>
<li><a class="reference internal" href="#log-app-log-setting" id="id40">各種ログの設定を行う</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id13" id="id41">拡張例</a><ul>
<li><a class="reference internal" href="#logwriter" id="id42">LogWriterを追加する</a></li>
<li><a class="reference internal" href="#logformatter" id="id43">LogFormatterを追加する</a></li>
<li><a class="reference internal" href="#id14" id="id44">ログの出力項目(プレースホルダ)を追加する</a></li>
<li><a class="reference internal" href="#id15" id="id45">ログの初期化メッセージを出力しないようにする</a></li>
</ul>
</li>
<li><a class="reference internal" href="#synchronousfilelogwriter" id="id46">SynchronousFileLogWriterを使用するにあたっての注意事項</a></li>
<li><a class="reference internal" href="#logpublisher" id="id47">LogPublisherの使い方</a></li>
<li><a class="reference internal" href="#log-log-level" id="id48">ログレベルの定義</a></li>
<li><a class="reference internal" href="#log-fw-log-policy" id="id49">フレームワークのログ出力方針</a></li>
<li><a class="reference internal" href="#log4j" id="id50">log4jとの機能比較</a></li>
</ul>
</div>
<p>ログ出力を行う機能を提供する。</p>
<div class="section" id="id3">
<h2><a class="toc-backref" href="#id31">7.1.1. 機能概要</a><a class="headerlink" href="#id3" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="section" id="id4">
<h3><a class="toc-backref" href="#id32">7.1.1.1. ログ出力機能の実装を差し替えることができる</a><a class="headerlink" href="#id4" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>ログ出力は、３つの処理から構成されており、それぞれの実装を差し替えることができる。</p>
<blockquote>
<div><img alt="../../../_images/log-structure.png" src="../../../_images/log-structure.png" />
</div></blockquote>
<p>アプリケーションの要件に応じて、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogWriter.html" title="nablarch.core.log.basic.LogWriter">LogWriter</a> や
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogFormatter.html" title="nablarch.core.log.basic.LogFormatter">LogFormatter</a>
の単位で差し替えることもできるし、
これらだけでは要件を満たせなければ
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/Logger.html" title="nablarch.core.log.Logger">Logger</a> /
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/LoggerFactory.html" title="nablarch.core.log.LoggerFactory">LoggerFactory</a>
を実装してほぼ全ての処理を差し替えることもできる。</p>
<p>例えば、オープンソースのログ出力ライブラリを使用したい場合などは
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/Logger.html" title="nablarch.core.log.Logger">Logger</a> /
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/LoggerFactory.html" title="nablarch.core.log.LoggerFactory">LoggerFactory</a> を差し替えればよい。</p>
<p>なお、オープンソースで使用実績の多いロギングフレームワークは、専用のLogger/LoggerFactoryを既に用意している。</p>
<p>詳細は、<a class="reference internal" href="../../adaptors/log_adaptor.html#log-adaptor"><span>logアダプタ</span></a> を参照。</p>
<p>本機能と利用実績の多いlog4jとの機能比較は、 <a class="reference internal" href="#log-functional-comparison"><span>log4jとの機能比較</span></a> を参照。</p>
<p>ログ出力機能がデフォルトで提供しているクラスを示す。</p>
<dl class="docutils">
<dt>Logger/LoggerFactory</dt>
<dd><ul class="first last simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/BasicLogger.html" title="nablarch.core.log.basic.BasicLogger">BasicLogger</a></li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/BasicLoggerFactory.html" title="nablarch.core.log.basic.BasicLoggerFactory">BasicLoggerFactory</a></li>
</ul>
</dd>
</dl>
<dl class="docutils" id="log-log-writers">
<dt>LogWriter</dt>
<dd><ul class="first last simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/FileLogWriter.html" title="nablarch.core.log.basic.FileLogWriter">FileLogWriter (ファイルへ出力。ファイルサイズによるローテーション)</a></li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/SynchronousFileLogWriter.html" title="nablarch.core.log.basic.SynchronousFileLogWriter">SynchronousFileLogWriter (複数プロセスから1ファイルへの出力)</a></li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/StandardOutputLogWriter.html" title="nablarch.core.log.basic.StandardOutputLogWriter">StandardOutputLogWriter (標準出力へ出力)</a></li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogPublisher.html" title="nablarch.core.log.basic.LogPublisher">LogPublisher (任意のリスナーへ出力)</a></li>
</ul>
</dd>
</dl>
<dl class="docutils" id="log-log-formatters">
<dt>LogFormatter</dt>
<dd><ul class="first last simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/BasicLogFormatter.html" title="nablarch.core.log.basic.BasicLogFormatter">BasicLogFormatter (パターン文字列によるフォーマット)</a></li>
</ul>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last"><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/SynchronousFileLogWriter.html" title="nablarch.core.log.basic.SynchronousFileLogWriter">SynchronousFileLogWriter</a>
を使う場合は、 <a class="reference internal" href="#log-synchronous-file-log-writer-attention"><span>SynchronousFileLogWriterを使用するにあたっての注意事項</span></a> を参照すること。</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">ログ出力機能で使用するログレベルについては、 <a class="reference internal" href="#log-log-level"><span>ログレベルの定義</span></a> を参照。</p>
</div>
</div>
<div class="section" id="id5">
<h3><a class="toc-backref" href="#id33">7.1.1.2. 各種ログの出力機能を予め提供している</a><a class="headerlink" href="#id5" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>本フレームワークでは、アプリケーションに共通で必要とされる各種ログの出力機能を予め提供している。
アプリケーションの要件に応じて、ログのフォーマットを設定で変更して使用できる。
なお、<a class="reference internal" href="#log-app-log-setting"><span>各種ログの設定を行う</span></a> にも記載の通り、各種ログの出力機能はフォーマット処理のみを行っており、
ログの出力処理自体は本機能を使用している。
Nablarchの提供するアーキタイプから生成したブランクプロジェクトでは各種ログのフォーマットが設定してある。
各設定値は <a class="reference download internal" href="../../../_downloads/デフォルト設定一覧.xlsx" download=""><code class="xref download docutils literal"><span class="pre">デフォルト設定一覧</span></code></a> を参照。</p>
<div class="toctree-wrapper compound">
</div>
<table border="1" class="colwidths-given white-space-normal docutils" id="id27">
<caption><span class="caption-text">ログの種類</span><a class="headerlink" href="#id27" title="このテーブルへのパーマリンク">¶</a></caption>
<colgroup>
<col width="20%" />
<col width="80%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">ログの種類</th>
<th class="head">説明</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><a class="reference internal" href="log/failure_log.html#failure-log"><span>障害通知ログ</span></a></td>
<td>障害発生時に1次切り分け担当者を特定するのに必要な情報を出力する。</td>
</tr>
<tr class="row-odd"><td><a class="reference internal" href="log/failure_log.html#failure-log"><span>障害解析ログ</span></a></td>
<td>障害原因の特定に必要な情報を出力する。</td>
</tr>
<tr class="row-even"><td><a class="reference internal" href="log/sql_log.html#sql-log"><span>SQLログ</span></a></td>
<td>深刻なパフォーマンス劣化の要因となりやすいSQL文の実行について、
パフォーマンスチューニングに使用するために、SQL文の実行時間とSQL文を出力する。</td>
</tr>
<tr class="row-odd"><td><a class="reference internal" href="log/performance_log.html#performance-log"><span>パフォーマンスログ</span></a></td>
<td>任意の処理について、パフォーマンスチューニングに使用するために実行時間とメモリ使用量を出力する。</td>
</tr>
<tr class="row-even"><td><a class="reference internal" href="log/http_access_log.html#http-access-log"><span>HTTPアクセスログ</span></a></td>
<td>ウェブアプリケーションで、アプリケーションの実行状況を把握するための情報を出力する。
アプリケーションの性能測定に必要な情報、アプリケーションの負荷測定に必要な情報の出力も含む。
さらに、アプリケーションの不正使用を検知するために、
全てのリクエスト及びレスポンス情報を出力する証跡ログとしても使用する。</td>
</tr>
<tr class="row-odd"><td><a class="reference internal" href="log/messaging_log.html#messaging-log"><span>メッセージングログ</span></a></td>
<td>メッセージング処理において、メッセージ送受信の状況を把握するための情報を出力する。</td>
</tr>
</tbody>
</table>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">本フレームワークでは、 <a class="reference internal" href="log/failure_log.html#failure-log"><span>障害通知ログ</span></a> と <a class="reference internal" href="log/failure_log.html#failure-log"><span>障害解析ログ</span></a> を合わせて障害ログと呼ぶ。</p>
</div>
</div>
</div>
<div class="section" id="id6">
<h2><a class="toc-backref" href="#id34">7.1.2. モジュール一覧</a><a class="headerlink" href="#id6" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.nablarch.framework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>nablarch-core<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.nablarch.framework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>nablarch-core-applog<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>

<span class="c">&lt;!-- SQLログを使用する場合のみ --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.nablarch.framework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>nablarch-core-jdbc<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>

<span class="c">&lt;!-- HTTPアクセスログを使用する場合のみ --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.nablarch.framework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>nablarch-fw-web<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>

<span class="c">&lt;!-- メッセージングログを使用する場合のみ --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.nablarch.framework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>nablarch-fw-messaging<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</pre></div>
</div>
</div>
<div class="section" id="id7">
<h2><a class="toc-backref" href="#id35">7.1.3. 使用方法</a><a class="headerlink" href="#id7" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="section" id="id8">
<h3><a class="toc-backref" href="#id36">7.1.3.1. ログを出力する</a><a class="headerlink" href="#id8" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>ログの出力には <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/Logger.html" title="nablarch.core.log.Logger">Logger</a> を使用する。
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/Logger.html" title="nablarch.core.log.Logger">Logger</a> は
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/LoggerManager.html" title="nablarch.core.log.LoggerManager">LoggerManager</a> から取得する。</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="c1">// クラスを指定してLoggerを取得する。</span>
<span class="c1">// Loggerはクラス変数に保持する。</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">LOGGER</span> <span class="o">=</span> <span class="n">LoggerManager</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">UserManager</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="c1">// ログの出力有無を事前にチェックし、ログ出力を行う。</span>
<span class="k">if</span> <span class="o">(</span><span class="n">LOGGER</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&quot;userId[&quot;</span> <span class="o">+</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;],name[&quot;</span> <span class="o">+</span> <span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
    <span class="n">LOGGER</span><span class="o">.</span><span class="na">logDebug</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
<span class="o">}</span>
</pre></div>
</div>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/Logger.html" title="nablarch.core.log.Logger">Logger</a> の取得ではロガー名を指定する。
ロガー名には文字列またはクラスが指定できる。
クラスが指定された場合は、指定されたクラスのFQCNがロガー名となる。</p>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">アプリケーションにおいて、常にログを出力することになっているレベルは、
ソースコードの可読性が落ちるため、事前チェックをしなくてよい。
例えば、本番運用時に出力するログレベルをINFOレベルにするのであれば、
FATALレベルからINFOレベルまでは事前チェックしなくてよい。</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">ロガー名には、SQLログや監視ログなど、特定の用途向けのログ出力を行う場合は、
その用途を表す名前(SQLやMONITOR等)を指定し、それ以外はクラスのFQCNを指定する。</p>
</div>
</div>
<div class="section" id="log-basic-setting">
<span id="id9"></span><h3><a class="toc-backref" href="#id37">7.1.3.2. ログ出力の設定を行う</a><a class="headerlink" href="#log-basic-setting" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>ログ出力の設定は、プロパティファイルに行う。</p>
<dl class="docutils">
<dt>プロパティファイルの場所</dt>
<dd><p class="first">クラスパス直下の <strong>log.properties</strong> を使用する。
場所を変更したい場合は、システムプロパティで <strong>nablarch.log.filePath</strong> をキーにファイルパスを指定する。
ファイルパスの指定方法は
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/util/FileUtil.html#getResource-java.lang.String-" title="nablarch.core.util.FileUtil.getResource(java.lang.String)">FileUtil#getResource</a> を参照。</p>
<div class="last highlight-bash"><div class="highlight"><pre><span></span>&gt;java -Dnablarch.log.filePath<span class="o">=</span>classpath:nablarch/example/log.properties ...
</pre></div>
</div>
</dd>
<dt>プロパティファイルの記述ルール</dt>
<dd><p class="first">プロパティファイルの記述ルールを以下に示す。</p>
<dl class="last docutils">
<dt>LoggerFactory</dt>
<dd><p class="first"></p>
<dl class="last docutils">
<dt>記述ルール</dt>
<dd><p class="first"></p>
<dl class="last docutils">
<dt>loggerFactory.className</dt>
<dd>LoggerFactoryを実装したクラスのFQCNを指定する。
本機能を使う場合は、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/BasicLoggerFactory.html" title="nablarch.core.log.basic.BasicLoggerFactory">BasicLoggerFactory</a> を指定する。</dd>
</dl>
</dd>
<dt>記述例</dt>
<dd><div class="first last highlight-properties"><div class="highlight"><pre><span></span><span class="c"># LoggerFactoryにより、ログ出力に使用する実装(本機能やLog4Jなど)が決まる。</span>
<span class="na">loggerFactory.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.BasicLoggerFactory</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>LogWriter</dt>
<dd><p class="first"></p>
<dl class="last docutils">
<dt>記述ルール</dt>
<dd><p class="first"></p>
<dl class="last docutils">
<dt>writerNames</dt>
<dd>使用する全てのLogWriterの名前を指定する。複数指定する場合はカンマ区切り。</dd>
<dt>writer.&lt;名前&gt;.className</dt>
<dd>LogWriterを実装したクラスのFQCNを指定する。</dd>
<dt>writer.&lt;名前&gt;.&lt;プロパティ名&gt;</dt>
<dd>LogWriter毎のプロパティに設定する値を指定する。
指定できるプロパティについては使用するLogWriterのJavadocを参照。</dd>
</dl>
</dd>
<dt>記述例</dt>
<dd><div class="first last highlight-properties"><div class="highlight"><pre><span></span><span class="c"># 2つの名前を定義する。</span>
<span class="na">writerNames</span><span class="o">=</span><span class="s">appLog,stdout</span>

<span class="c"># appLogの設定を行う。</span>
<span class="na">writer.appLog.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.FileLogWriter</span>
<span class="na">writer.appLog.filePath</span><span class="o">=</span><span class="s">/var/log/app/app.log</span>

<span class="c"># stdoutの設定を行う。</span>
<span class="na">writer.stdout.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.StandardOutputLogWriter</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>ロガー設定</dt>
<dd><p class="first"></p>
<dl class="last docutils">
<dt>記述ルール</dt>
<dd><p class="first"></p>
<dl class="last docutils">
<dt>availableLoggersNamesOrder</dt>
<dd><p class="first">使用する全てのロガー設定の名前を指定する。複数指定する場合はカンマ区切り。</p>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p>availableLoggersNamesOrderプロパティは、記述順に意味があるので注意すること。</p>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/Logger.html" title="nablarch.core.log.Logger">Logger</a> の取得では、ログ出力を行うクラスが指定したロガー名に対して、
ここに記述した順番で <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/Logger.html" title="nablarch.core.log.Logger">Logger</a> のマッチングを行い、
最初にマッチした <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/Logger.html" title="nablarch.core.log.Logger">Logger</a> を返す。</p>
<p>例えば、以下の記述例にあるavailableLoggersNamesOrderの記述順をavailableLoggersNamesOrder=root,sqlと記述した場合、
全てのロガー取得がロガー設定 <code class="docutils literal"><span class="pre">root</span></code> にマッチしてしまう。
その結果、ロガー名 <code class="docutils literal"><span class="pre">SQL</span></code> でログ出力しても <code class="docutils literal"><span class="pre">sqlLog</span></code> に出力されず、ロガー設定 <code class="docutils literal"><span class="pre">root</span></code> に指定された <code class="docutils literal"><span class="pre">appLog</span></code> に出力される。</p>
<p class="last">したがって、availableLoggersNamesOrderプロパティは、より限定的な正規表現を指定したロガー設定から順に記述すること。</p>
</div>
<div class="last admonition important">
<p class="first admonition-title">重要</p>
<p>availableLoggersNamesOrderとloggers.*で指定するロガー設定の名称は、必ず一致させる必要がある。
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/BasicLoggerFactory.html" title="nablarch.core.log.basic.BasicLoggerFactory">BasicLoggerFactory</a> の初期処理で一致しているかチェックを行い、
一致しない場合は例外をスローする。
例えば、上記の設定にあるavailableLoggersNamesOrderから <code class="docutils literal"><span class="pre">access</span></code> を取り除くと、例外がスローされる。</p>
<p class="last">このチェックは、設定漏れの発生を防ぐために行っている。
上記の設定にあるavailableLoggersNamesOrderから <code class="docutils literal"><span class="pre">access</span></code> を取り除いた場合は、明示的にloggers.access.*の設定も取り除く必要がある。</p>
</div>
</dd>
<dt>loggers.&lt;名前&gt;.nameRegex</dt>
<dd>ロガー名とのマッチングに使用する正規表現を指定する。
正規表現は、ロガー設定の対象となるロガーを絞り込むために使用する。
ロガーの取得時に指定されたロガー名(つまり <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/LoggerManager.html#get-java.lang.String-" title="nablarch.core.log.LoggerManager.get(java.lang.String)">LoggerManager#get</a>
の引数に指定されたロガー名)に対してマッチングを行う。</dd>
<dt>loggers.&lt;名前&gt;.level</dt>
<dd><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogLevel.html" title="nablarch.core.log.basic.LogLevel">LogLevel</a> の名前を指定する。
ここで指定したレベル以上のログを全て出力する。</dd>
<dt>loggers.&lt;名前&gt;.writerNames</dt>
<dd>出力先とするLogWriterの名前を指定する。
複数指定する場合はカンマ区切り。
ここで指定した全てのLogWriterに対してログの書き込みを行う。</dd>
</dl>
</dd>
<dt>記述例</dt>
<dd><div class="first last highlight-properties"><div class="highlight"><pre><span></span><span class="c"># 2つのロガー設定の名前を定義する。</span>
<span class="na">availableLoggersNamesOrder</span><span class="o">=</span><span class="s">sql,root</span>

<span class="c"># rootの設定を行う。</span>
<span class="na">loggers.root.nameRegex</span><span class="o">=</span><span class="s">.*</span>
<span class="na">loggers.root.level</span><span class="o">=</span><span class="s">WARN</span>
<span class="na">loggers.root.writerNames</span><span class="o">=</span><span class="s">appLog</span>

<span class="c"># sqlの設定を行う。</span>
<span class="na">loggers.sql.nameRegex</span><span class="o">=</span><span class="s">SQL</span>
<span class="na">loggers.sql.level</span><span class="o">=</span><span class="s">DEBUG</span>
<span class="na">loggers.sql.writerNames</span><span class="o">=</span><span class="s">sqlLog</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
</dd>
<dt>プロパティファイルの記述例</dt>
<dd><p class="first">プロパティファイル全体の記述例を以下に示す。</p>
<div class="highlight-properties"><div class="highlight"><pre><span></span><span class="na">loggerFactory.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.BasicLoggerFactory</span>

<span class="na">writerNames</span><span class="o">=</span><span class="s">appLog,sqlLog,monitorLog,stdout</span>

<span class="c"># アプリケーション用のログファイルの設定例</span>
<span class="na">writer.appLog.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.FileLogWriter</span>
<span class="na">writer.appLog.filePath</span><span class="o">=</span><span class="s">/var/log/app/app.log</span>

<span class="c"># SQL出力用のログファイルの設定例</span>
<span class="na">writer.sqlLog.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.FileLogWriter</span>
<span class="na">writer.sqlLog.filePath</span><span class="o">=</span><span class="s">/var/log/app/sql.log</span>

<span class="c"># 監視用のログファイルの設定例</span>
<span class="na">writer.monitorLog.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.FileLogWriter</span>
<span class="na">writer.monitorLog.filePath</span><span class="o">=</span><span class="s">/var/log/app/monitoring.log</span>

<span class="c"># 標準出力の設定例</span>
<span class="na">writer.stdout.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.StandardOutputLogWriter</span>

<span class="na">availableLoggersNamesOrder</span><span class="o">=</span><span class="s">sql,monitoring,access,validation,root</span>

<span class="c"># 全てのロガー名をログ出力の対象にする設定例</span>
<span class="c"># 全てのロガー取得を対象に、WARNレベル以上をappLogに出力する。</span>
<span class="na">loggers.root.nameRegex</span><span class="o">=</span><span class="s">.*</span>
<span class="na">loggers.root.level</span><span class="o">=</span><span class="s">WARN</span>
<span class="na">loggers.root.writerNames</span><span class="o">=</span><span class="s">appLog</span>

<span class="c"># 特定のロガー名をログ出力の対象にする設定例。</span>
<span class="c"># ロガー名に&quot;MONITOR&quot;を指定したロガー取得を対象に、</span>
<span class="c"># ERRORレベル以上をappLog,monitorLogに出力する。</span>
<span class="na">loggers.monitoring.nameRegex</span><span class="o">=</span><span class="s">MONITOR</span>
<span class="na">loggers.monitoring.level</span><span class="o">=</span><span class="s">ERROR</span>
<span class="na">loggers.monitoring.writerNames</span><span class="o">=</span><span class="s">appLog,monitorLog</span>

<span class="c"># 特定のロガー名をログ出力の対象にする設定例。</span>
<span class="c"># ロガー名に&quot;SQL&quot;を指定したロガー取得を対象に、</span>
<span class="c"># DEBUGレベル以上をsqlLogに出力する。</span>
<span class="na">loggers.sql.nameRegex</span><span class="o">=</span><span class="s">SQL</span>
<span class="na">loggers.sql.level</span><span class="o">=</span><span class="s">DEBUG</span>
<span class="na">loggers.sql.writerNames</span><span class="o">=</span><span class="s">sqlLog</span>

<span class="c"># 特定のクラスをログ出力の対象にする設定例。</span>
<span class="c"># ロガー名に&quot;app.user.UserManager&quot;を指定したロガー取得を対象に、</span>
<span class="c"># INFOレベル以上をappLogとstdoutに出力する。</span>
<span class="na">loggers.access.nameRegex</span><span class="o">=</span><span class="s">app\\.user\\.UserManager</span>
<span class="na">loggers.access.level</span><span class="o">=</span><span class="s">INFO</span>
<span class="na">loggers.access.writerNames</span><span class="o">=</span><span class="s">appLog,stdout</span>

<span class="c"># 特定のパッケージ以下をログ出力の対象にする設定例。</span>
<span class="c"># ロガー名に&quot;nablarch.core.validation&quot;から始まる名前を指定したロガー取得を対象に、</span>
<span class="c"># DEBUGレベル以上をstdoutに出力する。</span>
<span class="na">loggers.validation.nameRegex</span><span class="o">=</span><span class="s">nablarch\\.core\\.validation\\..*</span>
<span class="na">loggers.validation.level</span><span class="o">=</span><span class="s">DEBUG</span>
<span class="na">loggers.validation.writerNames</span><span class="o">=</span><span class="s">stdout</span>
</pre></div>
</div>
<div class="last admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">ロガー設定では、全てのログ出力にマッチするロガー設定を1つ用意し、availableLoggersNamesOrderの最後に指定することを推奨する。
万が一設定が漏れた場合でも、重要なログの出力を逃してしまう事態を防ぐことができる。
設定例としては、上記の記述例にあるロガー設定 <code class="docutils literal"><span class="pre">root</span></code> を参照。</p>
</div>
</dd>
</dl>
</div>
<div class="section" id="id10">
<h3><a class="toc-backref" href="#id38">7.1.3.3. ログ出力の設定を上書く</a><a class="headerlink" href="#id10" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>ログ出力の設定は、システムプロパティを使用して、
プロパティファイルと同じキー名で値を指定することにより上書きすることができる。
これにより、共通のプロパティファイルを用意しておき、プロセス毎にログ出力設定を変更するといったことができる。</p>
<p>ロガー設定 <code class="docutils literal"><span class="pre">root</span></code> のログレベルをINFOに変更したい場合の例を以下に示す。</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span>&gt;java -Dloggers.root.level<span class="o">=</span>INFO ...
</pre></div>
</div>
</div>
<div class="section" id="log-log-format">
<span id="id11"></span><h3><a class="toc-backref" href="#id39">7.1.3.4. ログのフォーマットを指定する</a><a class="headerlink" href="#log-log-format" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>本機能では、汎用的に使用できる <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogFormatter.html" title="nablarch.core.log.basic.LogFormatter">LogFormatter</a> として、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/BasicLogFormatter.html" title="nablarch.core.log.basic.BasicLogFormatter">BasicLogFormatter</a> を提供している。</p>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/BasicLogFormatter.html" title="nablarch.core.log.basic.BasicLogFormatter">BasicLogFormatter</a> では、
プレースホルダを使用してフォーマットを指定する。
使用できるプレースホルダについては、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/BasicLogFormatter.html" title="nablarch.core.log.basic.BasicLogFormatter">BasicLogFormatter</a>
のJavadocを参照。</p>
<p>フォーマットの設定例を以下に示す。
フォーマットはLogWriterのプロパティに指定する。</p>
<div class="highlight-properties"><div class="highlight"><pre><span></span><span class="c"># フォーマットを指定する場合はBasicLogFormatterを明示的に指定する。</span>
<span class="na">writer.appLog.formatter.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.BasicLogFormatter</span>

<span class="c"># プレースホルダを使ってフォーマットを指定する。</span>
<span class="na">writer.appLog.formatter.format</span><span class="o">=</span><span class="s">$date$ -$logLevel$- $loggerName$ $message$</span>

<span class="c"># 日時のフォーマットに使用するパターンを指定する。</span>
<span class="c"># 指定しなければ&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;となる。</span>
<span class="na">writer.appLog.formatter.datePattern</span><span class="o">=</span><span class="s">yyyy/MM/dd HH:mm:ss[SSS]</span>

<span class="c"># ログレベルの文言を指定する。</span>
<span class="c"># 指定しなければLogLevel列挙型の名前(FATAL、INFOなど)となる。</span>
<span class="na">writer.appLog.formatter.label.fatal</span><span class="o">=</span><span class="s">F</span>
<span class="na">writer.appLog.formatter.label.error</span><span class="o">=</span><span class="s">E</span>
<span class="na">writer.appLog.formatter.label.warn</span><span class="o">=</span><span class="s">W</span>
<span class="na">writer.appLog.formatter.label.info</span><span class="o">=</span><span class="s">I</span>
<span class="na">writer.appLog.formatter.label.debug</span><span class="o">=</span><span class="s">D</span>
<span class="na">writer.appLog.formatter.label.trace</span><span class="o">=</span><span class="s">T</span>
</pre></div>
</div>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/BasicLogFormatter.html" title="nablarch.core.log.basic.BasicLogFormatter">BasicLogFormatter</a>
では、出力されたログの状況を特定するために、以下の項目を出力できる。
これらの出力項目について説明しておく。</p>
<ul class="simple">
<li><a class="reference internal" href="#log-boot-process"><span>起動プロセス</span></a></li>
<li><a class="reference internal" href="#log-processing-system"><span>処理方式</span></a></li>
<li><a class="reference internal" href="#log-execution-id"><span>実行時ID</span></a></li>
</ul>
<dl class="docutils" id="log-boot-process">
<dt>起動プロセス</dt>
<dd><p class="first">起動プロセスとは、アプリケーションを起動した実行環境を特定するために使用する名前である。
起動プロセスにサーバ名とJOBIDなどの識別文字列を組み合わせた名前を使用することで、
同一サーバの複数プロセスから出力されたログの実行環境を特定することができる。
起動プロセスは、プロジェクト毎にID体系などで体系を規定することを想定している。</p>
<p class="last">起動プロセスは、システムプロパティに <code class="docutils literal"><span class="pre">nablarch.bootProcess</span></code> というキーで指定する。
システムプロパティの指定がない場合、起動プロセスはブランクとなる。</p>
</dd>
</dl>
<dl class="docutils" id="log-processing-system">
<dt>処理方式</dt>
<dd><p class="first">処理方式とは、ウェブ、バッチなどを意味する。
アプリケーションの処理方式を識別したい場合に、プロジェクト毎に規定して使用する。</p>
<p class="last">処理方式は、 <a class="reference internal" href="#log-basic-setting"><span>ログ出力の設定を行う</span></a> で説明したプロパティファイルに
<code class="docutils literal"><span class="pre">nablarch.processingSystem</span></code> というキーで指定する。
プロパティの指定がない場合はブランクとなる。</p>
</dd>
</dl>
<dl class="docutils" id="log-execution-id">
<dt>実行時ID</dt>
<dd><p class="first">実行時IDとは、リクエストIDに対するアプリケーションの個々の実行を識別するためにつけるIDである。
1つのリクエストIDに対して実行された数だけ実行時IDが発行されるため、
リクエストIDと実行時IDの関係は1対多となる。</p>
<p>実行時IDは、複数のログを出力している場合に、出力された複数のログを紐付けるために使用する。</p>
<p>実行時IDは、各処理方式の <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/ThreadContext.html" title="nablarch.core.ThreadContext">ThreadContext</a>
を初期化するタイミングで発行し、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/ThreadContext.html" title="nablarch.core.ThreadContext">ThreadContext</a> に設定される。</p>
<dl class="last docutils">
<dt>実行時IDのID体系</dt>
<dd><div class="first last highlight-none"><div class="highlight"><pre><span></span># 起動プロセスは指定された場合のみ付加する。
起動プロセス＋システム日時(yyyyMMddHHmmssSSS)＋連番(4桁)
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">リクエストID、実行時ID、ユーザIDを出力する場合は、
これらの取得元が <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/ThreadContext.html" title="nablarch.core.ThreadContext">ThreadContext</a> なので、
ハンドラ構成に <a class="reference internal" href="../handlers/common/thread_context_handler.html#thread-context-handler"><span>スレッドコンテキスト変数管理ハンドラ</span></a> が含まれている必要がある。
特にユーザIDについては、 <a class="reference internal" href="../handlers/common/thread_context_handler.html#thread-context-handler-user-id-attribute-setting"><span>ユーザIDを設定する</span></a> を参照して
アプリケーションでセッションに値を設定する必要がある。</p>
</div>
<dl class="docutils">
<dt>改行コードとタブ文字を含めたい場合</dt>
<dd><p class="first">フォーマットに改行コードとタブ文字を含めたい場合は、以下に示すように、Javaと同様の記述を使用する。</p>
<div class="highlight-none"><div class="highlight"><pre><span></span>改行コード \n
タブ文字   \t
</pre></div>
</div>
<p>改行コードは、Java標準のシステムプロパティに含まれる <code class="docutils literal"><span class="pre">line.separator</span></code> から取得する。
このため、システムプロパティの <code class="docutils literal"><span class="pre">line.separator</span></code> を変更しなければOSの改行コードが使用される。</p>
<div class="last admonition tip">
<p class="first admonition-title">補足</p>
<p class="last"><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/BasicLogFormatter.html" title="nablarch.core.log.basic.BasicLogFormatter">BasicLogFormatter</a> では
<code class="docutils literal"><span class="pre">\n</span></code> と <code class="docutils literal"><span class="pre">\t</span></code> という文字列を出力することはできない。</p>
</div>
</dd>
</dl>
</div>
<div class="section" id="log-app-log-setting">
<span id="id12"></span><h3><a class="toc-backref" href="#id40">7.1.3.5. 各種ログの設定を行う</a><a class="headerlink" href="#log-app-log-setting" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>各種ログの出力機能は、各種ログの用途に合わせたフォーマット処理のみを行っており、
ログの出力処理自体は本機能を使用している。
つまり、各種ログの出力機能では、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/Logger.html" title="nablarch.core.log.Logger">Logger</a>
に指定するメッセージ作成を行う。</p>
<p>このため、各種ログの出力機能を使うには、 <a class="reference internal" href="#log-basic-setting"><span>ログ出力の設定を行う</span></a> に加えて、各種ログの設定が必要となる。
各種ログの設定は、プロパティファイルに行う。</p>
<dl class="docutils">
<dt>プロパティファイルの場所</dt>
<dd><p class="first">クラスパス直下の <strong>app-log.properties</strong> を使用する。
場所を変更したい場合は、システムプロパティで <strong>nablarch.appLog.filePath</strong> をキーにファイルパスを指定する。
ファイルパスの指定方法は
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/util/FileUtil.html#getResource-java.lang.String-" title="nablarch.core.util.FileUtil.getResource(java.lang.String)">FileUtil#getResource</a> を参照。</p>
<div class="last highlight-bash"><div class="highlight"><pre><span></span>&gt;java -Dnablarch.appLog.filePath<span class="o">=</span>file:/var/log/app/app-log.properties ...
</pre></div>
</div>
</dd>
<dt>プロパティファイルの記述ルール</dt>
<dd><p class="first">各種ログごとに異なるので、以下を参照。</p>
<ul class="last simple">
<li><a class="reference internal" href="log/failure_log.html#failure-log-setting"><span>障害ログの設定を行う</span></a></li>
<li><a class="reference internal" href="log/sql_log.html#sql-log-setting"><span>SQLログの設定を行う</span></a></li>
<li><a class="reference internal" href="log/performance_log.html#performance-log-setting"><span>パフォーマンスログの設定を行う</span></a></li>
<li><a class="reference internal" href="log/http_access_log.html#http-access-log-setting"><span>HTTPアクセスログの設定を行う</span></a></li>
<li><a class="reference internal" href="log/messaging_log.html#messaging-log-setting"><span>メッセージングログの設定を行う</span></a></li>
</ul>
</dd>
</dl>
</div>
</div>
<div class="section" id="id13">
<h2><a class="toc-backref" href="#id41">7.1.4. 拡張例</a><a class="headerlink" href="#id13" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="section" id="logwriter">
<span id="log-add-log-writer"></span><h3><a class="toc-backref" href="#id42">7.1.4.1. LogWriterを追加する</a><a class="headerlink" href="#logwriter" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>新しいLogWriterを追加する場合は、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogWriter.html" title="nablarch.core.log.basic.LogWriter">LogWriter</a>
インタフェースを実装したクラスを作成する。
また、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogFormatter.html" title="nablarch.core.log.basic.LogFormatter">LogFormatter</a> を使用するLogWriterを作成する場合は、
共通処理を提供する <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogWriterSupport.html" title="nablarch.core.log.basic.LogWriterSupport">LogWriterSupport</a> を継承して作成する。</p>
</div>
<div class="section" id="logformatter">
<h3><a class="toc-backref" href="#id43">7.1.4.2. LogFormatterを追加する</a><a class="headerlink" href="#logformatter" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>新しいLogFormatterを追加する場合は、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogFormatter.html" title="nablarch.core.log.basic.LogFormatter">LogFormatter</a>
インタフェースを実装したクラスを作成する。
また、ログレベルを表す文言を設定で変更可能にしたい場合は、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogLevelLabelProvider.html" title="nablarch.core.log.basic.LogLevelLabelProvider">LogLevelLabelProvider</a> を使用する。</p>
<p>新しいLogFormatterの追加に伴い、ログ出力時に指定するパラメータを増やし、
LogFormatterで増やしたパラメータを受け取りたいことがある。
本機能では、ログ出力時に指定するパラメータを増やす目的で、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/Logger.html" title="nablarch.core.log.Logger">Logger</a> インタフェースのログ出力メソッドに
Object型の可変長引数optionsを設けている。</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="c1">// Logger#logInfoメソッドのシグネチャ</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">logInfo</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">,</span> <span class="n">Object</span><span class="o">...</span> <span class="n">options</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">logInfo</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">,</span> <span class="n">Throwable</span> <span class="n">cause</span><span class="o">,</span> <span class="n">Object</span><span class="o">...</span> <span class="n">options</span><span class="o">)</span>
</pre></div>
</div>
<p>ログ出力時のパラメータを増やしたい場合は、options引数を規定して使用すること。</p>
</div>
<div class="section" id="id14">
<h3><a class="toc-backref" href="#id44">7.1.4.3. ログの出力項目(プレースホルダ)を追加する</a><a class="headerlink" href="#id14" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/BasicLogFormatter.html" title="nablarch.core.log.basic.BasicLogFormatter">BasicLogFormatter</a> は、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/LogItem.html" title="nablarch.core.log.LogItem">LogItem</a> インタフェースを使用して、
各プレースホルダに対応する出力項目を取得する。
そのため、新規にプレースホルダを追加したい場合は、以下の作業を行う。</p>
<ul class="simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/LogItem.html" title="nablarch.core.log.LogItem">LogItem</a> を実装したクラスを作る</li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/BasicLogFormatter.html" title="nablarch.core.log.basic.BasicLogFormatter">BasicLogFormatter</a> を継承したクラスを作り、プレースホルダを追加する</li>
</ul>
<p>LogFormatterの設定から起動プロセスを取得するように変更する場合の例を示す。
LogFormatterの設定は、下記を想定する。</p>
<div class="highlight-properties"><div class="highlight"><pre><span></span><span class="c"># カスタムのLogFormatterを指定する。</span>
<span class="na">writer.appLog.formatter.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.CustomLogFormatter</span>

<span class="c"># フォーマットを指定する。</span>
<span class="na">writer.appLog.formatter.format</span><span class="o">=</span><span class="s">$date$ -$logLevel$- $loggerName$ [$bootProcess$] $message$</span>

<span class="c"># LogFormatterの設定で起動プロセスを指定する。</span>
<span class="c"># ここで指定した起動プロセスを$bootProcess$に出力する。</span>
<span class="na">writer.appLog.formatter.bootProcess</span><span class="o">=</span><span class="s">CUSTOM_PROCESS</span>
</pre></div>
</div>
<dl class="docutils">
<dt><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/LogItem.html" title="nablarch.core.log.LogItem">LogItem</a> を実装したクラスを作る</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="c1">// カスタムの起動プロセスを取得するクラス。</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomBootProcessItem</span> <span class="kd">implements</span> <span class="n">LogItem</span><span class="o">&lt;</span><span class="n">LogContext</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">bootProcess</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CustomBootProcessItem</span><span class="o">(</span><span class="n">ObjectSettings</span> <span class="n">settings</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// LogFormatterの設定から起動プロセスを取得する。</span>
        <span class="n">bootProcess</span> <span class="o">=</span> <span class="n">settings</span><span class="o">.</span><span class="na">getProp</span><span class="o">(</span><span class="s">&quot;bootProcess&quot;</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">get</span><span class="o">(</span><span class="n">LogContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 設定から取得した起動プロセスを返す。</span>
        <span class="k">return</span> <span class="n">bootProcess</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
<dt><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/BasicLogFormatter.html" title="nablarch.core.log.basic.BasicLogFormatter">BasicLogFormatter</a> を継承したクラスを作り、プレースホルダを追加する</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomLogFormatter</span> <span class="kd">extends</span> <span class="n">BasicLogFormatter</span> <span class="o">{</span>

    <span class="c1">// フォーマット対象のログ出力項目を取得するメソッドをオーバーライドする。</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">LogItem</span><span class="o">&lt;</span><span class="n">LogContext</span><span class="o">&gt;&gt;</span> <span class="nf">getLogItems</span><span class="o">(</span><span class="n">ObjectSettings</span> <span class="n">settings</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// 起動プロセスのプレースホルダを上書きで設定する。</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">LogItem</span><span class="o">&lt;</span><span class="n">LogContext</span><span class="o">&gt;&gt;</span> <span class="n">logItems</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">getLogItems</span><span class="o">(</span><span class="n">settings</span><span class="o">);</span>
        <span class="n">logItems</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;$bootProcess$&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">CustomBootProcessItem</span><span class="o">(</span><span class="n">settings</span><span class="o">));</span>
        <span class="k">return</span> <span class="n">logItems</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="id15">
<h3><a class="toc-backref" href="#id45">7.1.4.4. ログの初期化メッセージを出力しないようにする</a><a class="headerlink" href="#id15" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>本機能では、各ロガーの初期化時に初期化メッセージをログに出力している。
監視対象のログなどで、初期化メッセージが不要な場合には本機能が提供するWriterを元に、
初期化メッセージを出力しないWriterを作成し対応する必要がある。</p>
<p>なお、WebアプリケーションサーバなどやOSS製品とロガーを統一する目的などで <a class="reference internal" href="../../adaptors/log_adaptor.html#log-adaptor"><span>logアダプタ</span></a> を使用した場合は初期化メッセージは出力されないため、本対応は不要である。</p>
<p>対応例を以下に示す。</p>
<ol class="arabic">
<li><p class="first">ベースとなるWriterクラスのソースコードをプロジェクト側に取り込む(コピーする)。
例えば、ファイルに出力するログの場合には、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/FileLogWriter.html" title="nablarch.core.log.basic.FileLogWriter">FileLogWriter</a> をコピーする。</p>
</li>
<li><p class="first">初期化ログを出力している箇所を削除する。</p>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/FileLogWriter.html" title="nablarch.core.log.basic.FileLogWriter">FileLogWriter</a> の場合は、
以下の修正例のように初期化メッセージを出力している箇所を削除する。</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initializeWriter</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">filePath</span><span class="o">,</span> <span class="kc">true</span><span class="o">),</span> <span class="n">outputBufferSize</span><span class="o">);</span>
    <span class="n">currentFileSize</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">filePath</span><span class="o">).</span><span class="na">length</span><span class="o">();</span>

    <span class="c1">// ここで行っていた初期化メッセージの出力処理を削除する</span>

  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;failed to create %s. file name = [%s], encoding = [%s], buffer size =[%s]&quot;</span><span class="o">,</span>
        <span class="n">Writer</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">filePath</span><span class="o">,</span> <span class="n">charset</span><span class="o">.</span><span class="na">displayName</span><span class="o">(),</span> <span class="n">outputBufferSize</span><span class="o">),</span> <span class="n">e</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</li>
<li><p class="first">ログ機能初期化後の初期化メッセージを出力しないよう変更する。</p>
</li>
</ol>
<blockquote>
<div><p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogWriterSupport.html#needsToWrite-nablarch.core.log.basic.LogContext-" title="nablarch.core.log.basic.LogWriterSupport.needsToWrite(nablarch.core.log.basic.LogContext)">needsToWrite</a> をオーバライドし、
初回に呼び出される初期化メッセージの出力を行わないよう変更する。</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="cm">/** 初回判定を行う為のフラグを定義する */</span>
<span class="kd">private</span> <span class="kt">boolean</span> <span class="n">suppressionWriting</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

<span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">needsToWrite</span><span class="o">(</span><span class="kd">final</span> <span class="n">LogContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
  <span class="kd">final</span> <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getMessage</span><span class="o">();</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">suppressionWriting</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 出力対象のログが「initialized.」から始まっていた場合は、</span>
    <span class="c1">// 初期化メッセージであるため出力対象外であることを示す「false」を戻す。</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">StringUtil</span><span class="o">.</span><span class="na">hasValue</span><span class="o">(</span><span class="n">message</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">message</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;initialized.&quot;</span><span class="o">))</span> <span class="o">{</span>
      <span class="n">suppressionWriting</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">needsToWrite</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
<span class="o">}</span>
</pre></div>
</div>
</div></blockquote>
<ol class="arabic simple" start="4">
<li>作成したクラスをlog.propertiesに設定する。</li>
</ol>
<blockquote>
<div><p>プロジェクト側で作成したWriterのクラス名を、log.propertiesに設定する。</p>
<p>設定例を以下に示す。</p>
<div class="highlight-properties"><div class="highlight"><pre><span></span><span class="na">writerNames</span><span class="o">=</span><span class="s">sample</span>

<span class="c"># writerのクラス名に作成したクラスを指定する</span>
<span class="c"># クラスの完全修飾名が「sample.CustomFileLogWriter」の場合の設定例</span>
<span class="na">writer.sample.className</span> <span class="o">=</span> <span class="s">sample.CustomFileLogWriter</span>
</pre></div>
</div>
</div></blockquote>
</div>
</div>
<div class="section" id="synchronousfilelogwriter">
<span id="log-synchronous-file-log-writer-attention"></span><h2><a class="toc-backref" href="#id46">7.1.5. SynchronousFileLogWriterを使用するにあたっての注意事項</a><a class="headerlink" href="#synchronousfilelogwriter" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/SynchronousFileLogWriter.html" title="nablarch.core.log.basic.SynchronousFileLogWriter">SynchronousFileLogWriter</a>
は複数プロセスからの書き込み用に作成したものであるが、 <a class="reference internal" href="log/failure_log.html#failure-log"><span>障害通知ログ</span></a> のように出力頻度が低いログ出力にのみ使用することを想定している。
頻繁にログの出力が行われる場面で <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/SynchronousFileLogWriter.html" title="nablarch.core.log.basic.SynchronousFileLogWriter">SynchronousFileLogWriter</a> を使用すると
ロック取得待ちによる性能劣化や競合によるログの消失が発生する可能性があるので、アプリケーションログやアクセスログのように出力頻度の高いログの出力に
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/SynchronousFileLogWriter.html" title="nablarch.core.log.basic.SynchronousFileLogWriter">SynchronousFileLogWriter</a> を使用してはいけない。</p>
<p>また、<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/SynchronousFileLogWriter.html" title="nablarch.core.log.basic.SynchronousFileLogWriter">SynchronousFileLogWriter</a>
には以下の制約があるため、利用にあたっては十分検討すること。</p>
<ul class="last simple">
<li>ログのローテーションができない。</li>
<li>出力されるログの内容が正常でない場合がある。</li>
</ul>
</div>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/SynchronousFileLogWriter.html" title="nablarch.core.log.basic.SynchronousFileLogWriter">SynchronousFileLogWriter</a> は、
ロックファイルを用いて排他制御を行いながらファイルにログを書き込む。
そして、ロック取得の待機時間を超えてもロックを取得できない場合、強制的にロックファイルを削除し、
自身のスレッド用のロックファイルを生成してからログの出力を行う。</p>
<p>もし強制的にロックファイルを削除できない場合は、ロックを取得していない状態で強制的にログの出力を行う。
また、ロックファイルの生成に失敗した場合および、ロック取得待ちの際に割り込みが発生した場合も、
ロックを取得していない状態で強制的にログの出力を行う。</p>
<p><strong>ロックを取得しない状態で強制的にログを出力する場合に、複数プロセスからのログ出力が競合するとログが正常に出力されない場合がある点に注意すること。</strong></p>
<p>このような障害が発生した場合には、強制出力したログに加えて、同一のログファイルに障害のログを出力する。
デフォルトでは本フレームワークが用意したログが出力されるが、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/SynchronousFileLogWriter.html" title="nablarch.core.log.basic.SynchronousFileLogWriter">SynchronousFileLogWriter</a>
のプロパティに障害コードを設定することで、障害通知ログのフォーマット(障害コードを含む)でログを出力することができる。
障害通知ログのフォーマットで出力することで通常の障害通知ログと同様の方法でログの監視が可能となるので、
障害コードの設定を行うことを推奨する。</p>
<p>障害コードを設定するプロパティ名を以下に示す。</p>
<dl class="docutils">
<dt>failureCodeCreateLockFile</dt>
<dd><table class="first last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">障害の内容:</th><td class="field-body">ロックファイルが生成できない</td>
</tr>
<tr class="field-even field"><th class="field-name">ログレベル:</th><td class="field-body">FATAL</td>
</tr>
<tr class="field-odd field"><th class="field-name" colspan="2">メッセージの設定例({0}にはロックファイルのパスが設定される):</th></tr>
<tr class="field-odd field"><td>&nbsp;</td><td class="field-body">ロックファイルの生成に失敗しました。おそらくロックファイルのパスが間違っています。ロックファイルパス=[{0}]。</td>
</tr>
<tr class="field-even field"><th class="field-name" colspan="2">デフォルトで出力するログ(障害コードなどは出力されない):</th></tr>
<tr class="field-even field"><td>&nbsp;</td><td class="field-body">failed to create lock file. perhaps lock file path was invalid. lock file path=[{0}].</td>
</tr>
</tbody>
</table>
</dd>
<dt>failureCodeReleaseLockFile</dt>
<dd><table class="first last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">障害の内容:</th><td class="field-body">生成したロックファイルを解放(削除)できない</td>
</tr>
<tr class="field-even field"><th class="field-name">ログレベル:</th><td class="field-body">FATAL</td>
</tr>
<tr class="field-odd field"><th class="field-name" colspan="2">メッセージの設定例({0}にはロックファイルのパスが設定される):</th></tr>
<tr class="field-odd field"><td>&nbsp;</td><td class="field-body">ロックファイルの削除に失敗しました。ロックファイルパス=[{0}]。</td>
</tr>
<tr class="field-even field"><th class="field-name" colspan="2">デフォルトで出力するログ(障害コードなどは出力されない):</th></tr>
<tr class="field-even field"><td>&nbsp;</td><td class="field-body">failed to delete lock file. lock file path=[{0}].</td>
</tr>
</tbody>
</table>
</dd>
<dt>failureCodeForceDeleteLockFile</dt>
<dd><table class="first last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">障害の内容:</th><td class="field-body">解放されないロックファイルを強制削除できない</td>
</tr>
<tr class="field-even field"><th class="field-name">ログレベル:</th><td class="field-body">FATAL</td>
</tr>
<tr class="field-odd field"><th class="field-name" colspan="2">メッセージの設定例({0}にはロックファイルのパスが設定される):</th></tr>
<tr class="field-odd field"><td>&nbsp;</td><td class="field-body">ロックファイルの強制削除に失敗しました。ロックファイルが不正に開かれています。ロックファイルパス=[{0}]。</td>
</tr>
<tr class="field-even field"><th class="field-name" colspan="2">デフォルトで出力するログ(障害コードなどは出力されない):</th></tr>
<tr class="field-even field"><td>&nbsp;</td><td class="field-body">failed to delete lock file forcedly. lock file was opened illegally. lock file path=[{0}].</td>
</tr>
</tbody>
</table>
</dd>
<dt>failureCodeInterruptLockWait</dt>
<dd><table class="first last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">障害の内容:</th><td class="field-body">ロック取得待ちでスレッドをスリープしている際に、割り込みが発生</td>
</tr>
<tr class="field-even field"><th class="field-name">ログレベル:</th><td class="field-body">FATAL</td>
</tr>
<tr class="field-odd field"><th class="field-name">メッセージの設定例:</th><td class="field-body">ロック取得中に割り込みが発生しました。</td>
</tr>
<tr class="field-even field"><th class="field-name" colspan="2">デフォルトで出力するログ(障害コードなどは出力されない):</th></tr>
<tr class="field-even field"><td>&nbsp;</td><td class="field-body">interrupted while waiting for lock retry.</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">障害コードを設定した場合、障害通知ログのフォーマットで同一のログファイルにログが出力されるが、
障害解析ログは出力されない点に注意すること。</p>
</div>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/SynchronousFileLogWriter.html" title="nablarch.core.log.basic.SynchronousFileLogWriter">SynchronousFileLogWriter</a>
の設定例を以下に示す。</p>
<div class="highlight-properties"><div class="highlight"><pre><span></span><span class="na">writerNames</span><span class="o">=</span><span class="s">monitorLog</span>

<span class="c"># SynchronousFileLogWriterクラスを指定する。</span>
<span class="na">writer.monitorLog.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.SynchronousFileLogWriter</span>
<span class="c"># 書き込み先のファイルパスを指定する。</span>
<span class="na">writer.monitorLog.filePath</span><span class="o">=</span><span class="s">/var/log/app/monitor.log</span>
<span class="c"># 書き込み時に使用する文字エンコーディングを指定する。</span>
<span class="na">writer.monitorLog.encoding</span><span class="o">=</span><span class="s">UTF-8</span>
<span class="c"># 出力バッファのサイズを指定する。(単位はキロバイト。1000バイトを1キロバイトと換算する。指定しなければ8KB)</span>
<span class="na">writer.monitorLog.outputBufferSize</span><span class="o">=</span><span class="s">8</span>
<span class="c"># ログフォーマッタのクラス名を指定する。</span>
<span class="na">writer.monitorLog.formatter.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.BasicLogFormatter</span>
<span class="c"># LogLevel列挙型の名称を指定する。ここで指定したレベル以上のログを全て出力する。</span>
<span class="na">writer.monitorLog.level</span><span class="o">=</span><span class="s">ERROR</span>
<span class="c"># ロックファイルのファイル名を指定する。</span>
<span class="na">writer.monitorLog.lockFilePath</span><span class="o">=</span><span class="s">/var/log/lock/monitor.lock</span>
<span class="c"># ロック取得の再試行間隔(ミリ秒)を指定する。</span>
<span class="na">writer.monitorLog.lockRetryInterval</span><span class="o">=</span><span class="s">10</span>
<span class="c"># ロック取得の待機時間(ミリ秒)を指定する。</span>
<span class="na">writer.monitorLog.lockWaitTime</span><span class="o">=</span><span class="s">3000</span>
<span class="c"># ロックファイルが生成できない場合の障害通知コードを指定する。</span>
<span class="na">writer.monitorLog.failureCodeCreateLockFile</span><span class="o">=</span><span class="s">MSG00101</span>
<span class="c"># 生成したロックファイルを解放(削除)できない場合の障害通知コードを指定する。</span>
<span class="na">writer.monitorLog.failureCodeReleaseLockFile</span><span class="o">=</span><span class="s">MSG00102</span>
<span class="c"># 解放されないロックファイルを強制削除できない場合の障害通知コードを指定する。</span>
<span class="na">writer.monitorLog.failureCodeForceDeleteLockFile</span><span class="o">=</span><span class="s">MSG00103</span>
<span class="c"># ロック待ちでスレッドをスリープしている際に、割り込みが発生した場合の障害通知コードを指定する。</span>
<span class="na">writer.monitorLog.failureCodeInterruptLockWait</span><span class="o">=</span><span class="s">MSG00104</span>
</pre></div>
</div>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">maxFileSizeプロパティを指定するとログのローテーションが発生し、
ログの出力が出来なくなることがあるので指定しないこと。</p>
</div>
</div>
<div class="section" id="logpublisher">
<span id="log-publisher-usage"></span><h2><a class="toc-backref" href="#id47">7.1.6. LogPublisherの使い方</a><a class="headerlink" href="#logpublisher" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogPublisher.html" title="nablarch.core.log.basic.LogPublisher">LogPublisher</a> は、出力されたログの情報(<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogContext.html" title="nablarch.core.log.basic.LogContext">LogContext</a>)を登録された <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogListener.html" title="nablarch.core.log.basic.LogListener">LogListener</a> に連携する機能を提供する。
出力されたログ情報に対して何らかの処理をプログラム的に行いたい場合に、この機能が利用できる。</p>
<p><code class="docutils literal"><span class="pre">LogPublisher</span></code> を利用するには、まず <code class="docutils literal"><span class="pre">LogPublisher</span></code> を <code class="docutils literal"><span class="pre">LogWriter</span></code> として設定する。</p>
<div class="highlight-properties"><div class="highlight"><pre><span></span><span class="c"># ...省略</span>

<span class="c"># writerNames に LogPublisher の writer を追加する</span>
<span class="na">writerNames</span><span class="o">=</span><span class="s">monitorFile,appFile,stdout,logPublisher</span>

<span class="c"># logPublisher を定義する</span>
<span class="na">writer.logPublisher.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.LogPublisher</span>
<span class="na">writer.logPublisher.formatter.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.BasicLogFormatter</span>
<span class="c"># ...省略</span>

<span class="c"># ログ情報を処理したい logger の writerNames に、 LogPublisher の writer を追加する</span>
<span class="c"># ROO</span>
<span class="na">loggers.ROO.nameRegex</span><span class="o">=</span><span class="s">.*</span>
<span class="na">loggers.ROO.level</span><span class="o">=</span><span class="s">INFO</span>
<span class="na">loggers.ROO.writerNames</span><span class="o">=</span><span class="s">appFile,stdout,logPublisher</span>

<span class="c"># MON</span>
<span class="na">loggers.MON.nameRegex</span><span class="o">=</span><span class="s">MONITOR</span>
<span class="na">loggers.MON.level</span><span class="o">=</span><span class="s">ERROR</span>
<span class="na">loggers.MON.writerNames</span><span class="o">=</span><span class="s">monitorFile,logPublisher</span>

<span class="c"># ...省略</span>
</pre></div>
</div>
<p>次に、 <code class="docutils literal"><span class="pre">LogWriter</span></code> に登録する <code class="docutils literal"><span class="pre">LogListener</span></code> の実装クラスを作成する。</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="kn">package</span> <span class="nn">example.micrometer.log</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">nablarch.core.log.basic.LogContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">nablarch.core.log.basic.LogListener</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomLogListener</span> <span class="kd">implements</span> <span class="n">LogListener</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onWritten</span><span class="o">(</span><span class="n">LogContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// LogContext を使った処理を実装する</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
<p>最後に、作成した <code class="docutils literal"><span class="pre">LogListener</span></code> のインスタンスを <code class="docutils literal"><span class="pre">LogPublisher</span></code> に登録する。
<code class="docutils literal"><span class="pre">LogListener</span></code> の登録は、 <code class="docutils literal"><span class="pre">LogPublisher</span></code> の <code class="docutils literal"><span class="pre">static</span></code> メソッドを介して行う。</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="n">LogListener</span> <span class="n">listener</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CustomLogListener</span><span class="o">();</span>
<span class="n">LogPublisher</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="n">listener</span><span class="o">);</span>
</pre></div>
</div>
<p>以上で、 <code class="docutils literal"><span class="pre">LogPublisher</span></code> に対して出力されたログ情報が <code class="docutils literal"><span class="pre">CustomLogListener</span></code> に連携されるようになる。</p>
<p>登録した <code class="docutils literal"><span class="pre">LogListener</span></code> は、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogPublisher.html#removeListener-nablarch.core.log.basic.LogListener-" title="nablarch.core.log.basic.LogPublisher.removeListener(nablarch.core.log.basic.LogListener)">removeListener(LogListener)</a> または <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/basic/LogPublisher.html#removeAllListeners--" title="nablarch.core.log.basic.LogPublisher.removeAllListeners()">removeAllListeners()</a> で削除できる。</p>
</div>
<div class="section" id="log-log-level">
<span id="id16"></span><h2><a class="toc-backref" href="#id48">7.1.7. ログレベルの定義</a><a class="headerlink" href="#log-log-level" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p>本機能では、以下のログレベルを使用する。</p>
<table border="1" class="colwidths-given white-space-normal docutils" id="id28">
<caption><span class="caption-text">ログレベルの定義</span><a class="headerlink" href="#id28" title="このテーブルへのパーマリンク">¶</a></caption>
<colgroup>
<col width="15%" />
<col width="85%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">ログレベル</th>
<th class="head">説明</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>FATAL</td>
<td>アプリケーションの継続が不可能になる深刻な問題が発生したことを示す。
監視が必須で即通報および即対応が必要となる。</td>
</tr>
<tr class="row-odd"><td>ERROR</td>
<td>アプリケーションの継続に支障をきたす問題が発生したことを示す。
監視が必須であるが、通報および対応にFATALレベルほどの緊急性がない。</td>
</tr>
<tr class="row-even"><td>WARN</td>
<td>すぐには影響を与えないが、放置しておくとアプリケーションの継続に支障をきたす問題になる恐れがある事象が発生したことを示す。
できれば監視した方がよいが、ERRORレベルほどの緊急性がない。</td>
</tr>
<tr class="row-odd"><td>INFO</td>
<td>本番運用時にアプリケーションの情報を出力するログレベル。アクセスログや統計ログが該当する。</td>
</tr>
<tr class="row-even"><td>DEBUG</td>
<td>開発時にデバッグ情報を出力するログレベル。SQLログや性能ログが該当する。</td>
</tr>
<tr class="row-odd"><td>TRACE</td>
<td>開発時にデバッグ情報より、さらに細かい情報を出力したい場合に使用するログレベル。</td>
</tr>
</tbody>
</table>
<p>ログレベルは、6段階とし、FATALからTRACEに向かって順にレベルが低くなる。
そして、ログ出力機能では、設定で指定されたレベル以上のログを全て出力する。
例えば、WARNレベルが設定で指定された場合は、FATALレベル,ERRORレベル,WARNレベルが指定されたログのみ出力する。</p>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">本番運用時は、INFOレベルでログを出力することを想定している。
ログファイルのサイズが肥大化しないように、プロジェクト毎にログの出力内容を規定すること。</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">本フレームワークでも、ログ出力機能を使ってログを出力している。
フレームワークが出力するログについては、 <a class="reference internal" href="#log-fw-log-policy"><span>フレームワークのログ出力方針</span></a> を参照すること。</p>
</div>
</div>
<div class="section" id="log-fw-log-policy">
<span id="id17"></span><h2><a class="toc-backref" href="#id49">7.1.8. フレームワークのログ出力方針</a><a class="headerlink" href="#log-fw-log-policy" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p>本フレームワークでは、下記の出力方針に基づきログ出力を行う。</p>
<table border="1" class="colwidths-given white-space-normal docutils" id="id29">
<caption><span class="caption-text">フレームワークのログ出力方針</span><a class="headerlink" href="#id29" title="このテーブルへのパーマリンク">¶</a></caption>
<colgroup>
<col width="15%" />
<col width="85%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">ログレベル</th>
<th class="head">出力方針</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>FATAL/ERROR</td>
<td><p class="first">障害ログの出力時にFATAL/ERRORレベルで出力する。</p>
<p>障害ログは、障害監視の対象であり、障害発生時の1次切り分けの起点ともなる為、
原則として1件の障害に対して、1件の障害ログを出力する方針としている。</p>
<p class="last">このため、実行制御基盤では単一のハンドラ(例外を処理するハンドラ)により、
障害通知ログを出力する方針としている。</p>
</td>
</tr>
<tr class="row-odd"><td>WARN</td>
<td><p class="first">障害発生時に連鎖して例外が発生した場合など、
障害ログとして出力できない例外をWARNレベルで出力する。</p>
<p class="last">例えば、業務処理とトランザクションの終了処理の2つで例外が発生した場合は、
業務処理の例外を障害ログに出力し、トランザクションの終了処理の例外をWARNレベルで出力する。</p>
</td>
</tr>
<tr class="row-even"><td>INFO</td>
<td><p class="first">アプリケーションの実行状況に関連するエラーを検知した場合にINFOレベルで出力する。</p>
<p class="last">例えば、URLパラメータの改竄エラーや認可チェックエラーが発生した場合にINFOレベルで出力する。</p>
</td>
</tr>
<tr class="row-odd"><td>DEBUG</td>
<td><p class="first">アプリケーション開発時に使用するデバッグ情報を出力する。</p>
<p class="last">アプリケーション開発時は、DEBUGレベルを設定することで開発に必要な情報が出力されるよう考慮している。</p>
</td>
</tr>
<tr class="row-even"><td>TRACE</td>
<td>フレームワーク開発時に使用するデバッグ情報を出力する。アプリケーション開発での使用は想定していない。</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="log4j">
<span id="log-functional-comparison"></span><h2><a class="toc-backref" href="#id50">7.1.9. log4jとの機能比較</a><a class="headerlink" href="#log4j" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p>ここでは、本機能と <a class="reference external" href="http://logging.apache.org/log4j/1.2/">log4j(外部サイト、英語)</a> との機能比較を示す。</p>
<table border="1" class="colwidths-given white-space-normal docutils" id="id30">
<caption><span class="caption-text">機能比較（○：提供あり　△：一部提供あり　×：提供なし　－:対象外）</span><a class="headerlink" href="#id30" title="このテーブルへのパーマリンク">¶</a></caption>
<colgroup>
<col width="50%" />
<col width="25%" />
<col width="25%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">機能</th>
<th class="head">Nablarch</th>
<th class="head">log4j</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>ログの出力有無をログレベルで制御できる</td>
<td>○
<br />
<a class="reference internal" href="#log-basic-setting"><span>解説書へ</span></a></td>
<td>○</td>
</tr>
<tr class="row-odd"><td>ログの出力有無をカテゴリ(パッケージ単位や名前など)で制御できる</td>
<td>○
<br />
<a class="reference internal" href="#log-basic-setting"><span>解説書へ</span></a></td>
<td>○</td>
</tr>
<tr class="row-even"><td>1つのログを複数の出力先に出力できる</td>
<td>○
<br />
<a class="reference internal" href="#log-basic-setting"><span>解説書へ</span></a></td>
<td>○</td>
</tr>
<tr class="row-odd"><td>ログを標準出力に出力できる</td>
<td>○
<br />
<a class="reference internal" href="#log-log-writers"><span>解説書へ</span></a></td>
<td>○</td>
</tr>
<tr class="row-even"><td>ログをファイルに出力できる</td>
<td>○
<br />
<a class="reference internal" href="#log-log-writers"><span>解説書へ</span></a></td>
<td>○</td>
</tr>
<tr class="row-odd"><td>ファイルサイズによるログファイルのローテーションができる</td>
<td>△ <a class="footnote-reference" href="#logrolate" id="id19">[1]</a>
<br />
<a class="reference internal" href="#log-log-writers"><span>解説書へ</span></a></td>
<td>○</td>
</tr>
<tr class="row-even"><td>日時によるログファイルのローテーションができる</td>
<td>× <a class="footnote-reference" href="#extends-or-log4j" id="id20">[2]</a></td>
<td>○</td>
</tr>
<tr class="row-odd"><td>ログをメールで送信できる</td>
<td>× <a class="footnote-reference" href="#extends-or-log4j" id="id21">[2]</a></td>
<td>○</td>
</tr>
<tr class="row-even"><td>ログをTelnetで送信できる</td>
<td>× <a class="footnote-reference" href="#extends-or-log4j" id="id22">[2]</a></td>
<td>○</td>
</tr>
<tr class="row-odd"><td>ログをSyslogで送信できる</td>
<td>× <a class="footnote-reference" href="#extends-or-log4j" id="id23">[2]</a></td>
<td>○</td>
</tr>
<tr class="row-even"><td>ログをWindows NTのイベントログに追加できる</td>
<td>× <a class="footnote-reference" href="#extends-or-log4j" id="id24">[2]</a></td>
<td>○</td>
</tr>
<tr class="row-odd"><td>データベースにログを出力できる</td>
<td>× <a class="footnote-reference" href="#extends-or-log4j" id="id25">[2]</a></td>
<td>○</td>
</tr>
<tr class="row-even"><td>ログを非同期で出力できる</td>
<td>× <a class="footnote-reference" href="#extends-or-log4j" id="id26">[2]</a></td>
<td>○</td>
</tr>
<tr class="row-odd"><td>ログのフォーマットをパターン文字列で指定できる</td>
<td>○
<br />
<a class="reference internal" href="#log-log-format"><span>解説書へ</span></a></td>
<td>○</td>
</tr>
<tr class="row-even"><td>障害ログを出力できる</td>
<td>○
<br />
<a class="reference internal" href="log/failure_log.html#failure-log"><span>解説書へ</span></a></td>
<td>－</td>
</tr>
<tr class="row-odd"><td>HTTPアクセスログを出力できる</td>
<td>○
<br />
<a class="reference internal" href="log/http_access_log.html#http-access-log"><span>解説書へ</span></a></td>
<td>－</td>
</tr>
<tr class="row-even"><td>SQLログを出力できる</td>
<td>○
<br />
<a class="reference internal" href="log/sql_log.html#sql-log"><span>解説書へ</span></a></td>
<td>－</td>
</tr>
<tr class="row-odd"><td>パフォーマンスログを出力できる</td>
<td>○
<br />
<a class="reference internal" href="log/performance_log.html#performance-log"><span>解説書へ</span></a></td>
<td>－</td>
</tr>
<tr class="row-even"><td>メッセージングログを出力できる</td>
<td>○
<br />
<a class="reference internal" href="log/messaging_log.html#messaging-log"><span>解説書へ</span></a></td>
<td>－</td>
</tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="logrolate" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id19">[1]</a></td><td>Nablarchのログ出力は、ファイルの世代管理を提供していないので、一部提供ありとしている。</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="extends-or-log4j" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label">[2]</td><td><em>(<a class="fn-backref" href="#id20">1</a>, <a class="fn-backref" href="#id21">2</a>, <a class="fn-backref" href="#id22">3</a>, <a class="fn-backref" href="#id23">4</a>, <a class="fn-backref" href="#id24">5</a>, <a class="fn-backref" href="#id25">6</a>, <a class="fn-backref" href="#id26">7</a>)</em> <a class="reference internal" href="../../adaptors/log_adaptor.html#log-adaptor"><span>logアダプタ</span></a> を使用する。
または、プロジェクトで作成する。作成方法は、 <a class="reference internal" href="#log-add-log-writer"><span>LogWriterを追加する</span></a> を参照。</td></tr>
</tbody>
</table>
</div>
</div>


           </div>
           <div class="articleComments">
            
           </div>
          </div>
          <footer>

    <hr/>

    <div role="contentinfo">
        <p>
            &copy; Copyright 2010-2021, TIS Inc.
        </p>
    </div>
    Built with <a href="http://sphinx-doc.org/">Sphinx</a> using a <a href="https://github.com/snide/sphinx_rtd_theme">theme</a> provided by <a href="https://readthedocs.org">Read the Docs</a>.

</footer>

        </div>
      </div>

    </section>

  </div>
  


  

    <script type="text/javascript">
        var DOCUMENTATION_OPTIONS = {
            URL_ROOT:'../../../',
            VERSION:'5u19',
            COLLAPSE_INDEX:false,
            FILE_SUFFIX:'.html',
            HAS_SOURCE:  true,
            SOURCELINK_SUFFIX: ''
        };
    </script>
      <script type="text/javascript" src="../../../_static/jquery.js"></script>
      <script type="text/javascript" src="../../../_static/underscore.js"></script>
      <script type="text/javascript" src="../../../_static/doctools.js"></script>
      <script type="text/javascript" src="../../../_static/custom.js"></script>
      <script type="text/javascript" src="../../../_static/translations.js"></script>

  

  
  
    <script type="text/javascript" src="../../../_static/js/theme.js"></script>
  

  
  
  <script type="text/javascript">
      jQuery(function () {
          SphinxRtdTheme.StickyNav.enable();
      });
  </script>
   

</body>
</html>