


<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en" > <!--<![endif]-->
<head>
  <meta charset="utf-8">
  <meta http-equiv='content-language' content='ja'>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <title>7.1.1.2.1. 障害ログの出力 &mdash; ∇Nablarch  5u19 ドキュメント</title>
  

  
  
  
  

  

  
  
    

  

  
  
    <link rel="stylesheet" href="../../../../_static/custom.css" type="text/css" />
  

  

  
  <link rel="canonical" href="https://nablarch.github.io/docs/LATEST/doc/application_framework/application_framework/libraries/log/failure_log.html" />
  
    <link rel="top" title="∇Nablarch  5u19 ドキュメント" href="../../../../index.html"/>
        <link rel="up" title="7.1. ログ出力" href="../log.html"/>
        <link rel="next" title="7.1.1.2.2. SQLログの出力" href="sql_log.html"/>
        <link rel="prev" title="7.1. ログ出力" href="../log.html"/>
 

  
  <script src="../../../../_static/js/modernizr.min.js"></script>

</head>

<body class="wy-body-for-nav" role="document">

   
  <div class="wy-grid-for-nav">

    
    <nav data-toggle="wy-nav-shift" class="wy-nav-side">
      <div class="wy-side-scroll">
        <div class="wy-side-nav-search">
          
  
  <a href="../../../../index.html" id="sidebar-title" class="icon"> ∇Nablarch 
  

  
    <div id="sidebar-version">Version: 5u19</div>
  </a>

  <div role="search">
    <form id="google-search-form" class="wy-form" method="get" action="https://www.google.co.jp/search">
      <input type="text" name="text" placeholder="Search docs on google" id="text"/>
      <input type="hidden" name="q" id="q"/>
    </form>
  </div>
    
    

        </div>

        <div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
          
  
  
    <ul class="current">
<li class="toctree-l1"><a class="reference internal" href="../../../../about_nablarch/index.html">Nablarchについて</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../../about_nablarch/concept.html">Nablarchのコンセプト</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../about_nablarch/concept.html#robustness">Robustness</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../about_nablarch/concept.html#testability">Testability</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../about_nablarch/concept.html#ready-to-use">Ready-to-Use</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../about_nablarch/mvn_module.html">Nablarch のモジュール一覧</a></li>
<li class="toctree-l2"><a class="reference internal" href="../../../../about_nablarch/license.html">Nablarchのライセンスについて</a></li>
</ul>
</li>
<li class="toctree-l1 current"><a class="reference internal" href="../../../index.html">Nablarchアプリケーションフレームワーク</a><ul class="current">
<li class="toctree-l2 current"><a class="reference internal" href="../../index.html">アプリケーションフレームワーク</a><ul class="current">
<li class="toctree-l3"><a class="reference internal" href="../../nablarch/index.html">1. Nablarchアプリケーションフレームワークとは</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../web/index.html">2. ウェブアプリケーション編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../web_service/index.html">3. ウェブサービス編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../batch/index.html">4. バッチアプリケーション編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../messaging/index.html">5. メッセージング編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../handlers/index.html">6. Nablarchの提供する標準ハンドラ</a></li>
<li class="toctree-l3 current"><a class="reference internal" href="../index.html">7. Nablarchが提供するライブラリ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../blank_project/index.html">8. ブランクプロジェクト</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../setting_guide/index.html">9. Nablarchアプリケーションフレームワーク設定ガイド</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../configuration/index.html">10. デフォルト設定一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../cloud_native/index.html">11. Nablarchクラウドネイティブ対応</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../adaptors/index.html">アダプタ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/log_adaptor.html">logアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/router_adaptor.html">ルーティングアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/webspheremq_adaptor.html">IBM WebSphere MQアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/jaxrs_adaptor.html">JAX-RSアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/doma_adaptor.html">Domaアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/jsr310_adaptor.html">JSR310(Date and Time API)アダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/mail_sender_freemarker_adaptor.html">E-mail FreeMarkerアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/mail_sender_thymeleaf_adaptor.html">E-mail Thymeleafアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/mail_sender_velocity_adaptor.html">E-mail Velocityアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/web_thymeleaf_adaptor.html">ウェブアプリケーション Thymeleafアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/lettuce_adaptor.html">Lettuceアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/slf4j_adaptor.html">SLF4Jアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/micrometer_adaptor.html">Micrometerアダプタ</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../example/index.html">Example</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../example/index.html#id1">環境構築手順について</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../example/index.html#id2">アプリケーションの実行手順について</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../../extension_components/index.html">Nablarch拡張コンポーネント</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../../extension_components/report/index.html">1. 帳票ライブラリ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/report/index.html#id2">1.1. 概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/report/index.html#id3">1.2. 要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/report/index.html#id7">1.3. 構造</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/report/index.html#report-template">1.4. 実装例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../extension_components/workflow/doc/index.html">2. ワークフローライブラリ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/workflow/doc/index.html#id3">2.1. 機能概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/workflow/doc/index.html#id6">2.2. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/workflow/doc/index.html#id7">2.3. 使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/workflow/doc/index.html#xor">2.4. XORゲートウェイの進行先ノードの判定方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/workflow/doc/index.html#workflow-multi-completion">2.5. マルチインスタンスの完了条件の判定方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../extension_components/workflow/tool/index.html">3. ワークフロー定義データ生成ツール</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/workflow/tool/index.html#id3">3.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/workflow/tool/index.html#id4">3.2. 使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../extension_components/etl/index.html">4. ETL</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/etl/index.html#id3">4.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/etl/index.html#etl-phase">4.2. ETLの各フェーズの仕様</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/etl/index.html#id5">4.3. ETLを使用するバッチの設計ポイント</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/etl/index.html#id9">4.4. 使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/etl/index.html#id18">4.5. 拡張例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../extension_components/etl/etl_maven_plugin.html">5. ETL Mavenプラグイン</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/etl/etl_maven_plugin.html#id2">5.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/etl/etl_maven_plugin.html#id3">5.2. 使用方法</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../../development_tools/index.html">Nablarch開発ツール</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../../development_tools/java_static_analysis/index.html">1. 効率的なJava静的チェック</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/java_static_analysis/index.html#code-analysis">1.1. 構文チェックを行う</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/java_static_analysis/index.html#code-format">1.2. フォーマットを統一する</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/java_static_analysis/index.html#api">1.3. 許可していないAPIが使用されていないかチェックする</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../development_tools/ui_dev/index.html">2. フロントエンド上級者向けのUI開発基盤</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/ui_dev/doc/index.html">2.1. Nablarch UI開発基盤 解説書</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/ui_dev/guide/index.html">2.2. JSP/HTML作成ガイド</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/ui_dev/guide/widget_usage/widget_list.html">2.3. UI部品の実装サンプルで提供しているウィジェットの一覧</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../development_tools/testing_framework/index.html">3. テスティングフレームワーク</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/testing_framework/guide/development_guide/05_UnitTestGuide/index.html">3.1. 単体テスト実施方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/testing_framework/guide/development_guide/06_TestFWGuide/index.html">3.2. 自動テストフレームワークの使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/testing_framework/guide/development_guide/08_TestTools/index.html">3.3. プログラミング工程で使用するツール</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../development_tools/toolbox/index.html">4. アプリケーション開発時に使える便利なツール</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/toolbox/JspStaticAnalysis/index.html">4.1. JSP静的解析ツール</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/toolbox/SqlExecutor/SqlExecutor.html">4.2. Nablarch SQL Executor</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/toolbox/JspVerifier/JspVerifier.html">4.3. 業務画面JSP検証ツール</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../../examples/index.html">Nablarch実装例集</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/01/index.html">データベースを用いたパスワード認証機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/01/0101_PBKDF2PasswordEncryptor.html">PBKDF2を用いたパスワード暗号化機能サンプル</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/01/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/01/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/01/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/01/index.html#id12">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/02/index.html">バリデーション機能の拡張</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/02/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/02/index.html#extendedvalidation-mailaddressvalidator">メールアドレスバリデーション</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/02/index.html#extendedvalidation-japanesetelnumbervalidator">日本電話番号バリデーション</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/02/index.html#id12">コード値精査</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/03/index.html">検索結果の一覧表示</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#id5">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#id8">使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchinfo">ListSearchInfoクラス</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchresult">listSearchResultタグ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchresult-sort">検索結果の並び替え</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchresult-nopaging">1画面にすべての検索結果を一覧表示する場合の実装方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchresult-defaultcondition">デフォルトの検索条件で検索した結果を初期表示する場合の実装方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchresult-setting">検索結果の一覧表示機能のデフォルト値設定</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchresult-customize">業務アプリケーションへのサンプル実装(タグファイル)の取り込み方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchresult-tagreference">タグリファレンス</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/04/index.html">フォーマッタ機能の拡張</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/04/0401_ExtendedDataFormatter.html">データフォーマッタの拡張</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/04/0402_ExtendedFieldType.html">データフォーマッタ機能におけるフィールドタイプの拡張</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/05/index.html">データベースを用いたファイル管理機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/05/index.html#id2">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/05/index.html#id6">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/05/index.html#id7">機能</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/05/index.html#id10">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/05/index.html#id15">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/06/index.html">CAPTCHA機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/06/06_Captcha_guide.html">CAPTCHA機能の組み込み手順</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/06/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/06/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/06/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/06/index.html#id21">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/07/index.html">UserAgent情報取得機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/07/index.html#id1">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/07/index.html#id3">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/07/index.html#id8">設定の記述</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/07/index.html#id11">使用例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/08/index.html">HTMLメール送信機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/08/index.html#id1">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/08/index.html#id3">要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/08/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/08/index.html#id14">実装例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/09/index.html">bouncycastleを使用した電子署名つきメールの送信サンプルの使用方法</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/09/index.html#id3">環境準備</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/09/index.html#id4">電子署名付きメール送信機能の構造</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/09/index.html#id5">設定ファイルの準備</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/09/index.html#id7">実行方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/10/index.html">ログ集計サンプルの使用方法</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/10/index.html#id3">提供サンプル一覧</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/11/index.html">メッセージング基盤テストシミュレータサンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/11/index.html#id4">用途</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/11/index.html#id8">特徴</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/11/index.html#id12">要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/11/index.html#id15">使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/11/index.html#id18">拡張例</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../../nablarch_api/index.html">Nablarch API</a></li>
</ul>

  

        </div>
      </div>
    </nav>

    <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap">

      
      <nav class="wy-nav-top" role="navigation" aria-label="top navigation">
        
          <i data-toggle="wy-nav-top" class="fa fa-bars"></i>
          <a href="../../../../index.html">∇Nablarch </a>
        
      </nav>


      
      <div class="wy-nav-content">
        <div class="rst-content">
          

 



<div role="navigation" aria-label="breadcrumbs navigation">
  <ul class="wy-breadcrumbs">
    <li><a href="../../../../index.html">Docs</a> &raquo;</li>
      
          <li><a href="../../../index.html">Nablarchアプリケーションフレームワーク</a> &raquo;</li>
      
          <li><a href="../../index.html">アプリケーションフレームワーク</a> &raquo;</li>
      
          <li><a href="../index.html">7. Nablarchが提供するライブラリ</a> &raquo;</li>
      
          <li><a href="../log.html">7.1. ログ出力</a> &raquo;</li>
      
    <li>7.1.1.2.1. 障害ログの出力</li>
    <li class="wy-breadcrumbs-aside">
      <a href="https://github.com/nablarch" class="fa fa-github">GitHub</a>
    </li>
    <li class="wy-breadcrumbs-aside">
        <a href="https://nablarch.github.io/docs/LATEST/doc/en/index.html" class="en">English</a>
    </li>
  </ul>
  <hr/>
</div>
          <div role="main" class="document" itemscope="itemscope" itemtype="http://schema.org/Article">
           <div itemprop="articleBody">
            
  <div class="section" id="failure-log">
<span id="id1"></span><h1>7.1.1.2.1. 障害ログの出力<a class="headerlink" href="#failure-log" title="このヘッドラインへのパーマリンク">¶</a></h1>
<div class="contents local topic" id="id2">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#id3" id="id12">障害ログの出力方針</a></li>
<li><a class="reference internal" href="#id4" id="id13">使用方法</a><ul>
<li><a class="reference internal" href="#failure-log-logging" id="id14">障害ログを出力する</a></li>
<li><a class="reference internal" href="#failure-log-setting" id="id15">障害ログの設定を行う</a></li>
<li><a class="reference internal" href="#failure-log-add-contact" id="id16">障害ログに連絡先情報を追加する</a></li>
<li><a class="reference internal" href="#failure-log-change-fw-failure-code" id="id17">フレームワークの障害コードを変更する</a></li>
<li><a class="reference internal" href="#failure-log-output-src-exe-info" id="id18">派生元実行時情報を出力する</a></li>
<li><a class="reference internal" href="#failure-log-placeholder-customize" id="id19">プレースホルダに対する出力処理をカスタマイズする</a></li>
</ul>
</li>
</ul>
</div>
<p>フレームワークでは、処理方式毎の例外ハンドラにおいて出力する。
アプリケーションでは、バッチ処理の障害発生時に後続処理を継続する場合などに出力する。</p>
<div class="section" id="id3">
<h2><a class="toc-backref" href="#id12">7.1.1.2.1.1. 障害ログの出力方針</a><a class="headerlink" href="#id3" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p>障害通知ログは、ログ監視ツールから監視することで障害を検知することを想定しているので、
ロガー名を付けて障害通知専用のファイルに出力する。
障害解析ログは、アプリケーション全体のログ出力を行うアプリケーションログに出力する。</p>
<table border="1" class="colwidths-given white-space-normal docutils" id="id11">
<caption><span class="caption-text">障害ログの出力方針</span><a class="headerlink" href="#id11" title="このテーブルへのパーマリンク">¶</a></caption>
<colgroup>
<col width="33%" />
<col width="33%" />
<col width="33%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">ログの種類</th>
<th class="head">ログレベル</th>
<th class="head">ロガー名</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>障害通知ログ</td>
<td>FATAL、ERROR</td>
<td>MONITOR</td>
</tr>
<tr class="row-odd"><td>障害解析ログ</td>
<td>FATAL、ERROR</td>
<td>クラス名</td>
</tr>
</tbody>
</table>
<p>上記出力方針に対するログ出力の設定例を下記に示す。</p>
<dl class="docutils">
<dt>log.propertiesの設定例</dt>
<dd><div class="first last highlight-properties"><div class="highlight"><pre><span></span><span class="na">writerNames</span><span class="o">=</span><span class="s">monitorLog,appLog</span>

<span class="c"># 障害通知ログの出力先</span>
<span class="na">writer.monitorLog.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.FileLogWriter</span>
<span class="na">writer.monitorLog.filePath</span><span class="o">=</span><span class="s">/var/log/app/monitor.log</span>
<span class="na">writer.monitorLog.formatter.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.BasicLogFormatter</span>
<span class="na">writer.monitorLog.formatter.format</span><span class="o">=</span><span class="s">$date$ -$logLevel$- $runtimeLoggerName$ [$executionId$] boot_proc = [$bootProcess$] proc_sys = [$processingSystem$] req_id = [$requestId$] usr_id = [$userId$] $message$</span>

<span class="c"># アプリケーションログの出力先</span>
<span class="na">writer.appLog.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.FileLogWriter</span>
<span class="na">writer.appLog.filePath</span><span class="o">=</span><span class="s">/var/log/app/app.log</span>
<span class="na">writer.appLog.maxFileSize</span><span class="o">=</span><span class="s">10000</span>
<span class="na">writer.appLog.formatter.className</span><span class="o">=</span><span class="s">nablarch.core.log.basic.BasicLogFormatter</span>
<span class="na">writer.appLog.formatter.format</span><span class="o">=</span><span class="s">$date$ -$logLevel$- $runtimeLoggerName$ [$executionId$] boot_proc = [$bootProcess$] proc_sys = [$processingSystem$] req_id = [$requestId$] usr_id = [$userId$] $message$$information$$stackTrace$</span>

<span class="na">availableLoggersNamesOrder</span><span class="o">=</span><span class="s">MON,ROO</span>

<span class="c"># アプリケーションログの設定</span>
<span class="na">loggers.ROO.nameRegex</span><span class="o">=</span><span class="s">.*</span>
<span class="na">loggers.ROO.level</span><span class="o">=</span><span class="s">INFO</span>
<span class="na">loggers.ROO.writerNames</span><span class="o">=</span><span class="s">appLog</span>

<span class="c"># 障害通知ログの出力設定</span>
<span class="na">loggers.MON.nameRegex</span><span class="o">=</span><span class="s">MONITOR</span>
<span class="na">loggers.MON.level</span><span class="o">=</span><span class="s">ERROR</span>
<span class="na">loggers.MON.writerNames</span><span class="o">=</span><span class="s">monitorLog</span>
</pre></div>
</div>
</dd>
<dt>app-log.propertiesの設定例</dt>
<dd><div class="first last highlight-properties"><div class="highlight"><pre><span></span><span class="c"># FailureLogFormatter</span>
<span class="c">#failureLogFormatter.className=</span>
<span class="na">failureLogFormatter.defaultFailureCode</span><span class="o">=</span><span class="s">MSG99999</span>
<span class="na">failureLogFormatter.defaultMessage</span><span class="o">=</span><span class="s">an unexpected exception occurred.</span>
<span class="na">failureLogFormatter.language</span><span class="o">=</span><span class="s">ja</span>
<span class="na">failureLogFormatter.notificationFormat</span><span class="o">=</span><span class="s">fail_code = [$failureCode$] $message$</span>
<span class="na">failureLogFormatter.analysisFormat</span><span class="o">=</span><span class="s">fail_code = [$failureCode$] $message$\nInput Data :\n$data$</span>
<span class="c">#failureLogFormatter.contactFilePath=</span>
<span class="c">#failureLogFormatter.fwFailureCodeFilePath=</span>
</pre></div>
</div>
</dd>
</dl>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">大規模システムで障害時の連絡先が複数存在する場合、
<a class="reference internal" href="#failure-log-add-contact"><span>障害ログに連絡先情報を追加する</span></a> を使用することで、リクエストID毎に連絡先情報をログに含めることができる。</p>
</div>
</div>
<div class="section" id="id4">
<h2><a class="toc-backref" href="#id13">7.1.1.2.1.2. 使用方法</a><a class="headerlink" href="#id4" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="section" id="failure-log-logging">
<span id="id5"></span><h3><a class="toc-backref" href="#id14">7.1.1.2.1.2.1. 障害ログを出力する</a><a class="headerlink" href="#failure-log-logging" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>障害ログの出力には、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/app/FailureLogUtil.html" title="nablarch.core.log.app.FailureLogUtil">FailureLogUtil</a> を使用する。</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="k">try</span> <span class="o">{</span>
    <span class="c1">// 業務処理</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">UserNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 捕捉した例外、処理対象データ、障害コードを指定している。</span>
    <span class="n">FailureLogUtil</span><span class="o">.</span><span class="na">logError</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">inputData</span><span class="o">,</span> <span class="s">&quot;USER_NOT_FOUND&quot;</span><span class="o">);</span>
<span class="o">}</span>
</pre></div>
</div>
<p>なお、バッチとメッセージングにおいては、障害を検知した時点で、
障害ログを出力して業務処理を終了したい場合がある。
このような場合は、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/fw/results/TransactionAbnormalEnd.html" title="nablarch.fw.results.TransactionAbnormalEnd">TransactionAbnormalEnd</a> または
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/fw/launcher/ProcessAbnormalEnd.html" title="nablarch.fw.launcher.ProcessAbnormalEnd">ProcessAbnormalEnd</a> を送出し、
例外ハンドラ(<a class="reference internal" href="../../handlers/common/global_error_handler.html#global-error-handler"><span>グローバルエラーハンドラ</span></a> や <a class="reference internal" href="../../handlers/standalone/request_thread_loop_handler.html#request-thread-loop-handler"><span>リクエストスレッド内ループ制御ハンドラ</span></a>) に障害ログの出力を依頼する。</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="c1">// 自ら例外を生成する場合</span>
<span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 終了コード、障害コードを指定している。</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="n">TransactionAbnormalEnd</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="s">&quot;USER_NOT_FOUND&quot;</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 例外を捕捉した場合</span>
<span class="k">try</span> <span class="o">{</span>
    <span class="c1">// 業務処理</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">UserNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 終了コード、捕捉した例外、障害コードを指定している。</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="n">ProcessAbnormalEnd</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="n">e</span><span class="o">,</span> <span class="s">&quot;USER_NOT_FOUND&quot;</span><span class="o">);</span>
<span class="o">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">上記例のように、障害ログの出力では、ログから障害内容を特定するために障害コードを指定する。
障害コードのコード体系は、プロジェクト毎に規定すること。</p>
</div>
<dl class="docutils">
<dt>障害ログに出力されるメッセージ</dt>
<dd><p class="first">障害ログに出力されるメッセージは、 <a class="reference internal" href="../message.html#message"><span>メッセージ管理</span></a> を使用して障害コードに対応するメッセージを取得する。
<a class="reference internal" href="../message.html#message"><span>メッセージ管理</span></a> では、メッセージが見つからない場合に例外が発生する。
メッセージ取得処理で例外が発生した場合は、障害ログとは別に、
メッセージ取得処理で発生した例外をWARNレベルでログ出力し、障害ログには下記のメッセージを出力する。</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span>failed to get the message to output the failure log. <span class="nv">failureCode</span> <span class="o">=</span> <span class="o">[</span>&lt;障害コード&gt;<span class="o">]</span>
</pre></div>
</div>
<p class="last">フレームワークの例外ハンドラで例外やエラーを捕捉した場合など、障害コードの指定がない場合は、
設定で指定するデフォルトの <a class="reference internal" href="#failure-log-prop-default-failure-code"><span>障害コード</span></a> と
<a class="reference internal" href="#failure-log-prop-default-message"><span>メッセージ</span></a> を出力する。</p>
</dd>
</dl>
</div>
<div class="section" id="failure-log-setting">
<span id="id6"></span><h3><a class="toc-backref" href="#id15">7.1.1.2.1.2.2. 障害ログの設定を行う</a><a class="headerlink" href="#failure-log-setting" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>障害ログの設定は、 <a class="reference internal" href="../log.html#log-app-log-setting"><span>各種ログの設定を行う</span></a> で説明したプロパティファイルに行う。</p>
<dl class="docutils">
<dt>記述ルール</dt>
<dd><p class="first"></p>
<dl class="docutils">
<dt>failureLogFormatter.className</dt>
<dd><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/app/FailureLogFormatter.html" title="nablarch.core.log.app.FailureLogFormatter">FailureLogFormatter</a> を実装したクラス。
差し替える場合に指定する。</dd>
</dl>
<dl class="docutils" id="failure-log-prop-default-failure-code">
<dt>failureLogFormatter.defaultFailureCode <code class="docutils literal"><span class="pre">必須</span></code></dt>
<dd>デフォルトの障害コード。
例外ハンドラで例外がエラーを捕捉した場合など、障害コードの指定がない場合に使用する。</dd>
</dl>
<dl class="docutils" id="failure-log-prop-default-message">
<dt>failureLogFormatter.defaultMessage <code class="docutils literal"><span class="pre">必須</span></code></dt>
<dd>デフォルトのメッセージ。
デフォルトの障害コードを使用する場合に出力するメッセージとなる。</dd>
<dt>failureLogFormatter.language</dt>
<dd>障害コードからメッセージを取得する際に使用する言語。
指定がない場合は <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/ThreadContext.html" title="nablarch.core.ThreadContext">ThreadContext</a> に設定されている言語を使用する。</dd>
</dl>
<dl class="docutils" id="failure-log-prop-notification-format">
<dt>failureLogFormatter.notificationFormat</dt>
<dd><p class="first">障害通知ログのフォーマット。</p>
<dl class="last docutils">
<dt>フォーマットに指定可能なプレースホルダ</dt>
<dd><p class="first"></p>
<table border="1" class="colwidths-given white-space-normal last docutils">
<colgroup>
<col width="20%" />
<col width="20%" />
<col width="60%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">項目名</th>
<th class="head">プレースホルダ</th>
<th class="head">説明</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>障害コード</td>
<td>$failureCode$</td>
<td>障害を一意に識別するコード。障害内容の特定に使用する。</td>
</tr>
<tr class="row-odd"><td>メッセージ</td>
<td>$message$</td>
<td>障害コードに対応するメッセージ。障害内容の特定に使用する。</td>
</tr>
<tr class="row-even"><td>処理対象データ</td>
<td>$data$</td>
<td>障害が発生した処理が対象としていたデータを特定するために使用する。
データリーダを使用して読み込まれたデータオブジェクトのtoStringメソッドを呼び出し出力される。</td>
</tr>
<tr class="row-odd"><td>連絡先</td>
<td>$contact$</td>
<td>連絡先を特定するために使用する。</td>
</tr>
</tbody>
</table>
</dd>
<dt>デフォルトのフォーマット</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="n">fail_code</span> <span class="o">=</span> <span class="o">[</span><span class="n">$failureCode$</span><span class="o">]</span> <span class="n">$message$</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>failureLogFormatter.analysisFormat</dt>
<dd>障害解析ログのフォーマット。
フォーマットに指定可能なプレースホルダとデフォルトのフォーマットは、
<a class="reference internal" href="#failure-log-prop-notification-format"><span>障害通知ログのフォーマット</span></a> と同じ。</dd>
<dt>failureLogFormatter.contactFilePath</dt>
<dd>障害の連絡先情報を指定したプロパティファイルのパス。
障害の連絡先情報を出力する場合に指定する。
詳細は <a class="reference internal" href="#failure-log-add-contact"><span>障害ログに連絡先情報を追加する</span></a> を参照。</dd>
<dt>failureLogFormatter.fwFailureCodeFilePath</dt>
<dd>フレームワークの障害コードの変更情報を指定したプロパティファイルのパス。
障害ログ出力時にフレームワークの障害コードを変更する場合に指定する。
詳細は <a class="reference internal" href="#failure-log-change-fw-failure-code"><span>フレームワークの障害コードを変更する</span></a> を参照。</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">システムのセキュリティ要件により、障害解析ログであっても個人情報や機密情報の出力が許されない場合は、
<a class="reference internal" href="#failure-log-placeholder-customize"><span>プレースホルダに対する出力処理をカスタマイズする</span></a> を参照し、プロジェクトでカスタマイズすること。</p>
</div>
<div class="last admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">処理対象データの出力により、障害ログに派生元実行時情報を出力することができる。
派生元実行時情報とは、例えば、ウェブからバッチ処理にデータ連携する場合であれば、
画面処理を実行した時点の実行時情報(リクエストIDや実行時IDなど)がバッチ処理での派生元実行時情報となる。
派生元実行時情報の出力方法は、 <a class="reference internal" href="#failure-log-output-src-exe-info"><span>派生元実行時情報を出力する</span></a> を参照。</p>
</div>
</dd>
<dt>記述例</dt>
<dd><div class="first last highlight-properties"><div class="highlight"><pre><span></span><span class="na">failureLogFormatter.className</span><span class="o">=</span><span class="s">nablarch.core.log.app.FailureLogFormatter</span>
<span class="na">failureLogFormatter.defaultFailureCode</span><span class="o">=</span><span class="s">UNEXPECTED_ERROR</span>
<span class="na">failureLogFormatter.defaultMessage</span><span class="o">=</span><span class="s">an unexpected exception occurred.</span>
<span class="na">failureLogFormatter.language</span><span class="o">=</span><span class="s">en</span>
<span class="na">failureLogFormatter.notificationFormat</span><span class="o">=</span><span class="s">fail_code = [$failureCode$] $message$</span>
<span class="na">failureLogFormatter.analysisFormat</span><span class="o">=</span><span class="s">fail_code = [$failureCode$] $message$</span>
<span class="na">failureLogFormatter.derivedRequestIdPropName</span><span class="o">=</span><span class="s">insertRequestId</span>
<span class="na">failureLogFormatter.derivedUserIdPropName</span><span class="o">=</span><span class="s">updatedUserId</span>
<span class="na">failureLogFormatter.contactFilePath</span><span class="o">=</span><span class="s">classpath:failure-log-contact.properties</span>
<span class="na">failureLogFormatter.fwFailureCodeFilePath</span><span class="o">=</span><span class="s">classpath:failure-log-fw-codes.properties</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="failure-log-add-contact">
<span id="id7"></span><h3><a class="toc-backref" href="#id16">7.1.1.2.1.2.3. 障害ログに連絡先情報を追加する</a><a class="headerlink" href="#failure-log-add-contact" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>大規模システムで障害時の連絡先が複数存在する場合など、障害ログに連絡先情報を含めたい場合がある。
そこで、障害ログの出力では、リクエストID毎に連絡先情報を指定する機能を提供する。</p>
<p>連絡先情報の追加は、プロパティファイルに指定する。キーにリクエストID、値に連絡先情報を指定する。
キーに指定されたリクエストIDは、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/ThreadContext.html" title="nablarch.core.ThreadContext">ThreadContext</a> から取得したリクエストIDに対して、前方一致で検索する。
このため、プロパティファイルの内容は読み込み後に、より限定的なリクエストIDから検索するように、キー名の長さの降順にソートする。</p>
<p>連絡先情報の追加例を下記に示す。</p>
<p>まず、プロパティファイルを準備する。 <code class="docutils literal"><span class="pre">failure-log-contact.properties</span></code> というファイル名でクラスパス直下に配置しているものとする。</p>
<dl class="docutils">
<dt>failure-log-contact.propertiesの設定例</dt>
<dd><div class="first highlight-properties"><div class="highlight"><pre><span></span><span class="c"># リクエストID=連絡先情報</span>
<span class="na">/users/</span><span class="o">=</span><span class="s">USRMGR999</span>
<span class="na">/users/index</span><span class="o">=</span><span class="s">USRMGR300</span>
<span class="na">/users/list</span><span class="o">=</span><span class="s">USRMGR301</span>
<span class="na">/users/new</span><span class="o">=</span><span class="s">USRMGR302</span>
<span class="na">/users/edit</span><span class="o">=</span><span class="s">USRMGR303</span>
</pre></div>
</div>
<p>上記プロパティファイルは、読み込み後下記の通りソートされ、上から順に検索に使用する。</p>
<div class="last highlight-properties"><div class="highlight"><pre><span></span><span class="c"># キー名の長さが等しいものは、実行毎に順番が変わる。</span>
<span class="na">/users/index</span><span class="o">=</span><span class="s">USRMGR300</span>
<span class="na">/users/list</span><span class="o">=</span><span class="s">USRMGR301</span>
<span class="na">/users/edit</span><span class="o">=</span><span class="s">USRMGR303</span>
<span class="na">/users/new</span><span class="o">=</span><span class="s">USRMGR302</span>
<span class="na">/users/</span><span class="o">=</span><span class="s">USRMGR999</span>
</pre></div>
</div>
</dd>
</dl>
<p>次に、障害ログのフォーマットで連絡先情報を表すプレースホルダ <code class="docutils literal"><span class="pre">$contact$</span></code> を指定する。
さらに、プロパティファイルのパスを指定する。</p>
<dl class="docutils">
<dt>app-log.propertiesの設定例</dt>
<dd><div class="first last highlight-properties"><div class="highlight"><pre><span></span><span class="c"># FailureLogFormatterの設定</span>
<span class="na">failureLogFormatter.defaultFailureCode</span><span class="o">=</span><span class="s">UNEXPECTED_ERROR</span>
<span class="na">failureLogFormatter.defaultMessage</span><span class="o">=</span><span class="s">an unexpected exception occurred.</span>
<span class="na">failureLogFormatter.notificationFormat</span><span class="o">=</span><span class="s">[$failureCode$:$message$] &lt;$contact$&gt;</span>
<span class="na">failureLogFormatter.analysisFormat</span><span class="o">=</span><span class="s">fail_code = [$failureCode$] $message$ &lt;$contact$&gt;</span>

<span class="c"># プロパティファイルのパスを指定する。</span>
<span class="na">failureLogFormatter.contactFilePath</span><span class="o">=</span><span class="s">classpath:failure-log-contact.properties</span>
</pre></div>
</div>
</dd>
</dl>
<p>上記の設定により、リクエストID毎に連絡先情報が出力される。
リクエストIDが <code class="docutils literal"><span class="pre">/users/new</span></code> の場合に発生した障害の出力例を下記に示す。
<code class="docutils literal"><span class="pre">$contact$</span></code> を指定した箇所(&lt;&gt;で囲った部分)に <code class="docutils literal"><span class="pre">USRMGR302</span></code> が出力される。</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span><span class="c1"># 障害通知ログ</span>
<span class="m">2011</span>-02-15 <span class="m">15</span>:09:57.691 -FATAL- <span class="o">[</span>APUSRMGR0001201102151509320020009<span class="o">]</span> R<span class="o">[</span>/users/new<span class="o">]</span> U<span class="o">[</span><span class="m">0000000001</span><span class="o">]</span> <span class="o">[</span>UNEXPECTED_ERROR:an unexpected exception occurred.<span class="o">]</span> &lt;USRMGR302&gt;

<span class="c1"># 障害解析ログ</span>
<span class="m">2011</span>-02-15 <span class="m">15</span>:09:57.707 -FATAL- <span class="o">[</span>APUSRMGR0001201102151509320020009<span class="o">]</span> R<span class="o">[</span>/users/new<span class="o">]</span> U<span class="o">[</span><span class="m">0000000001</span><span class="o">]</span> <span class="nv">fail_code</span> <span class="o">=</span> <span class="o">[</span>UNEXPECTED_ERROR<span class="o">]</span> an unexpected exception occurred. &lt;USRMGR302&gt;
<span class="c1"># スタックトレースは省略。</span>
</pre></div>
</div>
<p>なお、リクエストIDに対応する連絡先情報が見つからない場合はnullが出力される。</p>
</div>
<div class="section" id="failure-log-change-fw-failure-code">
<span id="id8"></span><h3><a class="toc-backref" href="#id17">7.1.1.2.1.2.4. フレームワークの障害コードを変更する</a><a class="headerlink" href="#failure-log-change-fw-failure-code" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>フレームワークでは、想定しないエラーが発生した際にRuntimeException系の例外を送出している。
その結果、フレームワークが送出した例外は、全てデフォルトの障害コードが使用されて障害ログが出力される。
障害監視において、障害コードにより監視対象をフィルタリングしたいケースが考えられるため、
障害ログの出力では、フレームワークの障害コードを指定する機能を提供する。</p>
<p>フレームワークの障害コードは、例外が送出されたクラス名毎に指定することができる。
「例外が送出されたクラス」とは、スタックトレースのルート要素を指している。
例えば、下記のスタックトレースであれば、nablarch.core.message.StringResourceHolderクラスとなる。</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span>Stack Trace Information :
java.lang.RuntimeException: ValidateFor method invocation failed. <span class="nv">targetClass</span> <span class="o">=</span> java.lang.Class, <span class="nv">method</span> <span class="o">=</span> validateForRegisterUser
    at nablarch.core.validation.ValidationManager.validateAndConvert<span class="o">(</span>ValidationManager.java:202<span class="o">)</span>
    <span class="c1"># 途中のスタックトレースは省略。</span>
Caused by: nablarch.core.message.MessageNotFoundException: message was not found. message <span class="nv">id</span> <span class="o">=</span> MSG00010
    at nablarch.core.message.StringResourceHolder.get<span class="o">(</span>StringResourceHolder.java:40<span class="o">)</span>
    <span class="c1"># 以降のスタックトレースは省略。(以降Caused byは出現しない)</span>
</pre></div>
</div>
<p>ただし、フレームワークのクラス毎に障害コードを設定するのは、分類が細かすぎるため現実的ではない。
基本はパッケージ名単位に障害コードを指定することで、フレームワークのどの機能で例外が送出されたか判断することができる。</p>
<p>フレームワークの障害コードは、プロパティファイルに指定する。
プロパティファイルでは、キーにフレームワークのパッケージ名、値に障害コードを指定する。
キーに指定されたパッケージ名は、スタックトレースから取得した例外が送出されたクラスのFQCN(完全修飾クラス名)に対して、
前方一致で検索する。このため、プロパティファイルの内容は読み込み後に、より限定的なパッケージ名から検索するように、
キー名の長さの降順にソートする。</p>
<p>フレームワークの障害コードの変更例を下記に示す。</p>
<p>まず、プロパティファイルを準備する。
<code class="docutils literal"><span class="pre">failure-log-fw-codes.properties</span></code> というファイル名でクラスパス直下に配置しているものとする。
nablarchというパッケージ名を指定することで、個別に指定していない全てのパッケージに対して障害コードを指定できる。</p>
<dl class="docutils">
<dt>failure-log-fw-codes.propertiesの設定例</dt>
<dd><div class="first highlight-properties"><div class="highlight"><pre><span></span><span class="c"># フレームワークのパッケージ名=障害コード</span>
<span class="na">nablarch</span><span class="o">=</span><span class="s">FW_ERROR</span>
<span class="na">nablarch.core.cache</span><span class="o">=</span><span class="s">FW_CACHE_ERROR</span>
<span class="na">nablarch.core.date</span><span class="o">=</span><span class="s">FW_DATE_ERROR</span>
<span class="na">nablarch.core.db</span><span class="o">=</span><span class="s">FW_DB_ERROR</span>
<span class="na">nablarch.core.message</span><span class="o">=</span><span class="s">FW_MESSAGE_ERROR</span>
<span class="na">nablarch.core.repository</span><span class="o">=</span><span class="s">FW_REPOSITORY_ERROR</span>
<span class="na">nablarch.core.transaction</span><span class="o">=</span><span class="s">FW_TRANSACTION_ERROR</span>
</pre></div>
</div>
<p>上記プロパティファイルは、読み込み後下記の通りソートされ、上から順に検索に使用する。</p>
<div class="last highlight-properties"><div class="highlight"><pre><span></span><span class="na">nablarch.core.transaction</span><span class="o">=</span><span class="s">FW_TRANSACTION_ERROR</span>
<span class="na">nablarch.core.repository</span><span class="o">=</span><span class="s">FW_REPOSITORY_ERROR</span>
<span class="na">nablarch.core.message</span><span class="o">=</span><span class="s">FW_MESSAGE_ERROR</span>
<span class="na">nablarch.core.cache</span><span class="o">=</span><span class="s">FW_CACHE_ERROR</span>
<span class="na">nablarch.core.date</span><span class="o">=</span><span class="s">FW_DATE_ERROR</span>
<span class="na">nablarch.core.db</span><span class="o">=</span><span class="s">FW_DB_ERROR</span>
<span class="na">nablarch</span><span class="o">=</span><span class="s">FW_ERROR</span>
</pre></div>
</div>
</dd>
</dl>
<p>次に、FailureLogFormatterの設定でプロパティファイルのパスを指定する。</p>
<dl class="docutils">
<dt>app-log.propertiesの設定例</dt>
<dd><div class="first last highlight-properties"><div class="highlight"><pre><span></span><span class="na">failureLogFormatter.defaultFailureCode</span><span class="o">=</span><span class="s">UNEXPECTED_ERROR</span>
<span class="na">failureLogFormatter.defaultMessage</span><span class="o">=</span><span class="s">an unexpected exception occurred.</span>
<span class="na">failureLogFormatter.notificationFormat</span><span class="o">=</span><span class="s">[$failureCode$:$message$]</span>
<span class="na">failureLogFormatter.analysisFormat</span><span class="o">=</span><span class="s">fail_code = [$failureCode$] $message$</span>
<span class="c"># プロパティファイルのパスを指定する。</span>
<span class="na">failureLogFormatter.fwFailureCodeFilePath</span><span class="o">=</span><span class="s">classpath:failure-log-fw-codes.properties</span>
</pre></div>
</div>
</dd>
</dl>
<p>上記の設定により、フレームワークの障害コードが変更される。障害通知ログでいくつか出力例を下記に示す。</p>
<dl class="docutils">
<dt>nablarch.core.date.BasicBusinessDateProviderクラスで例外を送出した場合</dt>
<dd><div class="first last highlight-bash"><div class="highlight"><pre><span></span><span class="c1"># プロパティファイルのnablarch.core.date=FW_DATE_ERRORが該当する。</span>
<span class="m">2011</span>-02-15 <span class="m">16</span>:48:54.993 -FATAL- <span class="o">[</span>APUSRMGR0001201102151648315060002<span class="o">]</span> R<span class="o">[</span>/login<span class="o">]</span> U<span class="o">[</span><span class="m">9999999999</span><span class="o">]</span> <span class="nv">fail_code</span> <span class="o">=</span> <span class="o">[</span>FW_DATE_ERROR<span class="o">]</span> segment was not found. segment:00.
Stack Trace Information :
java.lang.IllegalStateException: segment was not found. segment:00.
    at nablarch.core.date.BasicBusinessDateProvider.getDate<span class="o">(</span>BasicBusinessDateProvider.java:103<span class="o">)</span>
    <span class="c1"># 以降のスタックトレースは省略。</span>
</pre></div>
</div>
</dd>
<dt>nablarch.core.message.StringResourceHolderクラスで例外を送出した場合</dt>
<dd><div class="first last highlight-bash"><div class="highlight"><pre><span></span><span class="c1"># プロパティファイルのnablarch.core.message=FW_MESSAGE_ERRORが該当する。</span>
<span class="m">2011</span>-02-15 <span class="m">16</span>:54:06.413 -FATAL- <span class="o">[</span>APUSRMGR0001201102151653476260011<span class="o">]</span> R<span class="o">[</span>/users/edit<span class="o">]</span> U<span class="o">[</span><span class="m">0000000001</span><span class="o">]</span> <span class="nv">fail_code</span> <span class="o">=</span> <span class="o">[</span>FW_MESSAGE_ERROR<span class="o">]</span> ValidateFor method invocation failed. <span class="nv">targetClass</span> <span class="o">=</span> java.lang.Class, <span class="nv">method</span> <span class="o">=</span> validateForRegisterUser
Stack Trace Information :
java.lang.RuntimeException: ValidateFor method invocation failed. <span class="nv">targetClass</span> <span class="o">=</span> java.lang.Class, <span class="nv">method</span> <span class="o">=</span> validateForRegisterUser
    at nablarch.core.validation.ValidationManager.validateAndConvert<span class="o">(</span>ValidationManager.java:202<span class="o">)</span>
    <span class="c1"># 途中のスタックトレースは省略。</span>
Caused by: nablarch.core.message.MessageNotFoundException: message was not found. message <span class="nv">id</span> <span class="o">=</span> MSG00010
    at nablarch.core.message.StringResourceHolder.get<span class="o">(</span>StringResourceHolder.java:40<span class="o">)</span>
    <span class="c1"># 以降のスタックトレースは省略。</span>
</pre></div>
</div>
</dd>
<dt>nablarch.common.authentication.PasswordAuthenticatorクラスで例外を送出した場合</dt>
<dd><div class="first last highlight-bash"><div class="highlight"><pre><span></span><span class="c1"># プロパティファイルのnablarch=FW_ERRORが該当する。</span>
<span class="m">2011</span>-02-15 <span class="m">16</span>:59:03.076 -FATAL- <span class="o">[</span>APUSRMGR0001201102151658551890017<span class="o">]</span> R<span class="o">[</span>/login<span class="o">]</span> U<span class="o">[</span><span class="m">9999999999</span><span class="o">]</span> <span class="nv">fail_code</span> <span class="o">=</span> <span class="o">[</span>FW_ERROR<span class="o">]</span> authentication failed.
Stack Trace Information :
nablarch.common.authentication.AuthenticationFailedException
    at nablarch.common.authentication.PasswordAuthenticator.authenticate<span class="o">(</span>PasswordAuthenticator.java:302<span class="o">)</span>
    <span class="c1"># 以降のスタックトレースは省略。</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="failure-log-output-src-exe-info">
<span id="id9"></span><h3><a class="toc-backref" href="#id18">7.1.1.2.1.2.5. 派生元実行時情報を出力する</a><a class="headerlink" href="#failure-log-output-src-exe-info" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>派生元実行時情報とは、例えば、ウェブからバッチにデータ連携する場合であれば、
画面処理を実行した時点の実行時情報がバッチ処理での派生元実行時情報となる。
以降では、処理方式間でデータ連携した場合に、先に処理を行う側を前段処理、後に処理を行う側を後段処理と呼ぶ。
後段処理における障害発生時に、前段処理の追跡作業を軽減するために派生元実行時情報を出力する。</p>
<p>派生元実行時情報の出力には、本機能のプレースホルダ「$data$」が使用できる。
プレースホルダ「$data$」が指定された場合、データリーダを使用して読み込まれたデータが障害ログに出力される。
この機能を使用して、前段処理において予め実行時情報をデータに含めておくことで、
後段処理の障害発生時に処理対象データとして前段処理の実行時情報が出力されることになる。</p>
<p>ここでは、データベースを使用したデータ連携における派生元実行時情報の出力例を示す。
前段処理において下記のカラム名で実行時情報が設定されていることとする。</p>
<table border="1" class="docutils">
<colgroup>
<col width="50%" />
<col width="50%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td>項目</td>
<td>カラム名</td>
</tr>
<tr class="row-even"><td>リクエストID</td>
<td>INSERT_REQUEST_ID</td>
</tr>
<tr class="row-odd"><td>実行時ID</td>
<td>INSERT_EXECUTION_ID</td>
</tr>
<tr class="row-even"><td>ユーザID</td>
<td>UPDATED_USER_ID</td>
</tr>
</tbody>
</table>
<dl class="docutils">
<dt>app-log.propertiesの設定例</dt>
<dd><div class="first last highlight-properties"><div class="highlight"><pre><span></span><span class="na">failureLogFormatter.defaultFailureCode</span><span class="o">=</span><span class="s">UNEXPECTED_ERROR</span>
<span class="na">failureLogFormatter.defaultMessage</span><span class="o">=</span><span class="s">an unexpected exception occurred.</span>
<span class="na">failureLogFormatter.notificationFormat</span><span class="o">=</span><span class="s">fail_code = [$failureCode$] $message$</span>
<span class="c"># 処理対象データのプレースホルダ「data」を障害解析ログのフォーマットに指定する。</span>
<span class="na">failureLogFormatter.analysisFormat</span><span class="o">=</span><span class="s">fail_code = [$failureCode$] $message$\nInput Data :\n$data$</span>
</pre></div>
</div>
</dd>
<dt>障害解析ログの出力例</dt>
<dd><div class="first last highlight-bash"><div class="highlight"><pre><span></span><span class="c1"># 障害解析ログ</span>
<span class="m">2011</span>-09-26 <span class="m">21</span>:06:35.745 -FATAL- root <span class="o">[</span>EXECUTION_ID_0000000123456789<span class="o">]</span> <span class="nv">boot_proc</span> <span class="o">=</span> <span class="o">[]</span> <span class="nv">proc_sys</span> <span class="o">=</span> <span class="o">[]</span> <span class="nv">req_id</span> <span class="o">=</span> <span class="o">[</span>RB11AC0160<span class="o">]</span> <span class="nv">usr_id</span> <span class="o">=</span> <span class="o">[</span>batchuser1<span class="o">]</span> <span class="nv">fail_code</span> <span class="o">=</span> <span class="o">[</span>USER_REGISTER_FAILED<span class="o">]</span> ユーザ情報の登録に失敗しました。
Input Data :
<span class="o">{</span><span class="nv">MOBILE_PHONE_NUMBER_AREA_CODE</span><span class="o">=</span><span class="m">002</span>, <span class="nv">KANJI_NAME</span><span class="o">=</span>山本太郎, <span class="nv">USER_INFO_ID</span><span class="o">=</span><span class="m">00000000000000000113</span>, <span class="nv">INSERT_EXECUTION_ID</span><span class="o">=</span>EXECUTION_ID_2000000123456789, <span class="nv">MAIL_ADDRESS</span><span class="o">=</span>yamamoto@sample.com, <span class="nv">MOBILE_PHONE_NUMBER_CITY_CODE</span><span class="o">=</span><span class="m">0003</span>, <span class="nv">UPDATED_USER_ID</span><span class="o">=</span>batch_user, <span class="nv">MOBILE_PHONE_NUMBER_SBSCR_CODE</span><span class="o">=</span><span class="m">0004</span>, <span class="nv">KANA_NAME</span><span class="o">=</span>ヤマモトタロウ, <span class="nv">EXTENSION_NUMBER_BUILDING</span><span class="o">=</span><span class="m">13</span>, <span class="nv">LOGIN_ID</span><span class="o">=</span><span class="m">12345678901234567890</span>, <span class="nv">EXTENSION_NUMBER_PERSONAL</span><span class="o">=</span><span class="m">1235</span>, <span class="nv">INSERT_REQUEST_ID</span><span class="o">=</span>RB11AC0140<span class="o">}</span>
Stack Trace Information :
<span class="o">[</span><span class="m">100</span> TransactionAbnormalEnd<span class="o">]</span> ユーザ情報の登録に失敗しました。
    at nablarch.sample.ss11AC.B11AC016Action.handle<span class="o">(</span>B11AC016Action.java:73<span class="o">)</span>
    at nablarch.sample.ss11AC.B11AC016Action.handle<span class="o">(</span>B11AC016Action.java:1<span class="o">)</span>
    at nablarch.fw.action.BatchAction.handle<span class="o">(</span>BatchAction.java:1<span class="o">)</span>
    <span class="c1"># 以降のスタックトレースは省略。</span>
</pre></div>
</div>
</dd>
<dt>処理対象データ(出力例の「Input Data :」)に下記の実行時情報が出力される。</dt>
<dd><div class="first last highlight-properties"><div class="highlight"><pre><span></span><span class="na">INSERT_REQUEST_ID</span><span class="o">=</span><span class="s">RB11AC0140</span>
<span class="na">INSERT_EXECUTION_ID</span><span class="o">=</span><span class="s">EXECUTION_ID_2000000123456789</span>
<span class="na">UPDATED_USER_ID</span><span class="o">=</span><span class="s">batch_user</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="failure-log-placeholder-customize">
<span id="id10"></span><h3><a class="toc-backref" href="#id19">7.1.1.2.1.2.6. プレースホルダに対する出力処理をカスタマイズする</a><a class="headerlink" href="#failure-log-placeholder-customize" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>処理対象データ($data$)はデフォルトでtoStringメソッドにより全てのデータ項目が出力されるため、
プロジェクトのセキュリティ要件で特定項目をマスクした出力が要求されるケースが考えられる。
このように、プレースホルダに対する出力処理をカスタマイズしたい場合は、以下の作業を行う。</p>
<ul class="simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/LogItem.html" title="nablarch.core.log.LogItem">LogItem</a> を実装したクラスを作る</li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/app/FailureLogFormatter.html" title="nablarch.core.log.app.FailureLogFormatter">FailureLogFormatter</a> を継承したクラスを作り、プレースホルダを追加する</li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/app/FailureLogFormatter.html" title="nablarch.core.log.app.FailureLogFormatter">FailureLogFormatter</a> を継承したクラスを使うように設定する</li>
</ul>
<p>ここでは、処理対象データ($data$)に対する出力処理のカスタマイズ例を示す。</p>
<dl class="docutils">
<dt><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/LogItem.html" title="nablarch.core.log.LogItem">LogItem</a> を実装したクラスを作る</dt>
<dd><p class="first">処理対象データ($data$)に対する出力内容を提供するクラスを作る。
今回はフレームワークが提供する <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/app/FailureLogFormatter.DataItem.html" title="nablarch.core.log.app.FailureLogFormatter.DataItem">DataItem</a> を継承して作成し、
処理対象データがMap型の場合のみマスク処理を行うように実装している。</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="c1">// FailureLogFormatterの拡張クラスにインナークラスとして定義している。</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">CustomDataItem</span> <span class="kd">extends</span> <span class="n">DataItem</span> <span class="o">{</span>

    <span class="cm">/** マスク文字 */</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">char</span> <span class="n">MASKING_CHAR</span> <span class="o">=</span> <span class="sc">&#39;*&#39;</span><span class="o">;</span>

    <span class="cm">/** マスク対象のパターン */</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Pattern</span><span class="o">[]</span> <span class="n">MASKING_PATTERNS</span>
            <span class="o">=</span> <span class="k">new</span> <span class="n">Pattern</span><span class="o">[]</span> <span class="o">{</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">&quot;.*MOBILE_PHONE_NUMBER.*&quot;</span><span class="o">),</span>
                              <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">&quot;.*MAIL.*&quot;</span><span class="o">)};</span>

    <span class="cm">/**</span>
<span class="cm">     * マップの値をマスキングするエディタ。</span>
<span class="cm">     * フレームワークが提供するMap編集用のユーティリティ。</span>
<span class="cm">     */</span>
    <span class="kd">private</span> <span class="n">MapValueEditor</span> <span class="n">mapValueEditor</span>
        <span class="o">=</span> <span class="k">new</span> <span class="n">MaskingMapValueEditor</span><span class="o">(</span><span class="n">MASKING_CHAR</span><span class="o">,</span> <span class="n">MASKING_PATTERNS</span><span class="o">);</span>

    <span class="nd">@Override</span>
    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">get</span><span class="o">(</span><span class="n">FailureLogContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// FailureLogContextのgetDataメソッドを呼び出し処理対象データを取得する。</span>
        <span class="n">Object</span> <span class="n">data</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span>

        <span class="c1">// Mapでない場合はフレームワークのデフォルト実装を呼び出す。</span>
        <span class="k">if</span> <span class="o">(!(</span><span class="n">data</span> <span class="k">instanceof</span> <span class="n">Map</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Mapをマスクした文字列を返す。</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">editedMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="o">((</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;)</span> <span class="n">data</span><span class="o">).</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
            <span class="n">editedMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">mapValueEditor</span><span class="o">.</span><span class="na">edit</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">()));</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">editedMap</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
<dt><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/app/FailureLogFormatter.html" title="nablarch.core.log.app.FailureLogFormatter">FailureLogFormatter</a> を継承したクラスを作り、プレースホルダを追加する</dt>
<dd><p class="first"><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/app/FailureLogFormatter.html#getLogItems-java.util.Map-" title="nablarch.core.log.app.FailureLogFormatter.getLogItems(java.util.Map)">FailureLogFormatter#getLogItems</a>
をオーバライドし、プレースホルダ <code class="docutils literal"><span class="pre">$data$</span></code> に対して上記のCustomDataItemを設定する。</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomDataFailureLogFormatter</span> <span class="kd">extends</span> <span class="n">FailureLogFormatter</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">LogItem</span><span class="o">&lt;</span><span class="n">FailureLogContext</span><span class="o">&gt;&gt;</span> <span class="nf">getLogItems</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>

        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">LogItem</span><span class="o">&lt;</span><span class="n">FailureLogContext</span><span class="o">&gt;&gt;</span> <span class="n">logItems</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">getLogItems</span><span class="o">(</span><span class="n">props</span><span class="o">);</span>

        <span class="c1">// CustomDataItemで$data$を上書き設定する。</span>
        <span class="n">logItems</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;$data$&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">CustomDataItem</span><span class="o">());</span>

        <span class="k">return</span> <span class="n">logItems</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">CustomDataItem</span> <span class="kd">extends</span> <span class="n">DataItem</span> <span class="o">{</span>
        <span class="c1">// 省略。</span>
    <span class="o">}</span>
 <span class="o">}</span>
</pre></div>
</div>
</dd>
<dt><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/log/app/FailureLogFormatter.html" title="nablarch.core.log.app.FailureLogFormatter">FailureLogFormatter</a> を継承したクラスを使うように設定する</dt>
<dd><p class="first">障害ログのフォーマッタとしてCustomDataFailureLogFormatterを使用するように <code class="docutils literal"><span class="pre">app-log.properties</span></code> に設定を行う。</p>
<div class="last highlight-properties"><div class="highlight"><pre><span></span><span class="c"># CustomDataFailureLogFormatterを指定する。</span>
<span class="na">failureLogFormatter.className</span><span class="o">=</span><span class="s">nablarch.core.log.app.CustomDataFailureLogFormatter</span>
<span class="na">failureLogFormatter.defaultFailureCode</span><span class="o">=</span><span class="s">UNEXPECTED_ERROR</span>
<span class="na">failureLogFormatter.defaultMessage</span><span class="o">=</span><span class="s">an unexpected exception occurred.</span>
<span class="na">failureLogFormatter.notificationFormat</span><span class="o">=</span><span class="s">fail_code = [$failureCode$] $message$</span>
<span class="na">failureLogFormatter.analysisFormat</span><span class="o">=</span><span class="s">fail_code = [$failureCode$] $message$\nInput Data :\n$data$</span>
</pre></div>
</div>
</dd>
</dl>
</div>
</div>
</div>


           </div>
           <div class="articleComments">
            
           </div>
          </div>
          <footer>

    <hr/>

    <div role="contentinfo">
        <p>
            &copy; Copyright 2010-2021, TIS Inc.
        </p>
    </div>
    Built with <a href="http://sphinx-doc.org/">Sphinx</a> using a <a href="https://github.com/snide/sphinx_rtd_theme">theme</a> provided by <a href="https://readthedocs.org">Read the Docs</a>.

</footer>

        </div>
      </div>

    </section>

  </div>
  


  

    <script type="text/javascript">
        var DOCUMENTATION_OPTIONS = {
            URL_ROOT:'../../../../',
            VERSION:'5u19',
            COLLAPSE_INDEX:false,
            FILE_SUFFIX:'.html',
            HAS_SOURCE:  true,
            SOURCELINK_SUFFIX: ''
        };
    </script>
      <script type="text/javascript" src="../../../../_static/jquery.js"></script>
      <script type="text/javascript" src="../../../../_static/underscore.js"></script>
      <script type="text/javascript" src="../../../../_static/doctools.js"></script>
      <script type="text/javascript" src="../../../../_static/custom.js"></script>
      <script type="text/javascript" src="../../../../_static/translations.js"></script>

  

  
  
    <script type="text/javascript" src="../../../../_static/js/theme.js"></script>
  

  
  
  <script type="text/javascript">
      jQuery(function () {
          SphinxRtdTheme.StickyNav.enable();
      });
  </script>
   

</body>
</html>