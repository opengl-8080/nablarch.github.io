


<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en" > <!--<![endif]-->
<head>
  <meta charset="utf-8">
  <meta http-equiv='content-language' content='ja'>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <title>7.19. JSPカスタムタグ &mdash; ∇Nablarch  5u19 ドキュメント</title>
  

  
  
  
  

  

  
  
    

  

  
  
    <link rel="stylesheet" href="../../../_static/custom.css" type="text/css" />
  

  

  
  <link rel="canonical" href="https://nablarch.github.io/docs/LATEST/doc/application_framework/application_framework/libraries/tag.html" />
  
    <link rel="top" title="∇Nablarch  5u19 ドキュメント" href="../../../index.html"/>
        <link rel="up" title="7. Nablarchが提供するライブラリ" href="index.html"/>
        <link rel="next" title="7.19.1. タグリファレンス" href="tag/tag_reference.html"/>
        <link rel="prev" title="7.18. Webアプリケーションをステートレスにする" href="stateless_web_app.html"/>
 

  
  <script src="../../../_static/js/modernizr.min.js"></script>

</head>

<body class="wy-body-for-nav" role="document">

   
  <div class="wy-grid-for-nav">

    
    <nav data-toggle="wy-nav-shift" class="wy-nav-side">
      <div class="wy-side-scroll">
        <div class="wy-side-nav-search">
          
  
  <a href="../../../index.html" id="sidebar-title" class="icon"> ∇Nablarch 
  

  
    <div id="sidebar-version">Version: 5u19</div>
  </a>

  <div role="search">
    <form id="google-search-form" class="wy-form" method="get" action="https://www.google.co.jp/search">
      <input type="text" name="text" placeholder="Search docs on google" id="text"/>
      <input type="hidden" name="q" id="q"/>
    </form>
  </div>
    
    

        </div>

        <div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
          
  
  
    <ul class="current">
<li class="toctree-l1"><a class="reference internal" href="../../../about_nablarch/index.html">Nablarchについて</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../about_nablarch/concept.html">Nablarchのコンセプト</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../about_nablarch/concept.html#robustness">Robustness</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../about_nablarch/concept.html#testability">Testability</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../about_nablarch/concept.html#ready-to-use">Ready-to-Use</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../about_nablarch/mvn_module.html">Nablarch のモジュール一覧</a></li>
<li class="toctree-l2"><a class="reference internal" href="../../../about_nablarch/license.html">Nablarchのライセンスについて</a></li>
</ul>
</li>
<li class="toctree-l1 current"><a class="reference internal" href="../../index.html">Nablarchアプリケーションフレームワーク</a><ul class="current">
<li class="toctree-l2 current"><a class="reference internal" href="../index.html">アプリケーションフレームワーク</a><ul class="current">
<li class="toctree-l3"><a class="reference internal" href="../nablarch/index.html">1. Nablarchアプリケーションフレームワークとは</a></li>
<li class="toctree-l3"><a class="reference internal" href="../web/index.html">2. ウェブアプリケーション編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../web_service/index.html">3. ウェブサービス編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../batch/index.html">4. バッチアプリケーション編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../messaging/index.html">5. メッセージング編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../handlers/index.html">6. Nablarchの提供する標準ハンドラ</a></li>
<li class="toctree-l3 current"><a class="reference internal" href="index.html">7. Nablarchが提供するライブラリ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../blank_project/index.html">8. ブランクプロジェクト</a></li>
<li class="toctree-l3"><a class="reference internal" href="../setting_guide/index.html">9. Nablarchアプリケーションフレームワーク設定ガイド</a></li>
<li class="toctree-l3"><a class="reference internal" href="../configuration/index.html">10. デフォルト設定一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../cloud_native/index.html">11. Nablarchクラウドネイティブ対応</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../adaptors/index.html">アダプタ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/log_adaptor.html">logアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/router_adaptor.html">ルーティングアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/webspheremq_adaptor.html">IBM WebSphere MQアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/jaxrs_adaptor.html">JAX-RSアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/doma_adaptor.html">Domaアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/jsr310_adaptor.html">JSR310(Date and Time API)アダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/mail_sender_freemarker_adaptor.html">E-mail FreeMarkerアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/mail_sender_thymeleaf_adaptor.html">E-mail Thymeleafアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/mail_sender_velocity_adaptor.html">E-mail Velocityアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/web_thymeleaf_adaptor.html">ウェブアプリケーション Thymeleafアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/lettuce_adaptor.html">Lettuceアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/slf4j_adaptor.html">SLF4Jアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/micrometer_adaptor.html">Micrometerアダプタ</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../example/index.html">Example</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../example/index.html#id1">環境構築手順について</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../example/index.html#id2">アプリケーションの実行手順について</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../extension_components/index.html">Nablarch拡張コンポーネント</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/report/index.html">1. 帳票ライブラリ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#id2">1.1. 概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#id3">1.2. 要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#id7">1.3. 構造</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#report-template">1.4. 実装例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html">2. ワークフローライブラリ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#id3">2.1. 機能概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#id6">2.2. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#id7">2.3. 使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#xor">2.4. XORゲートウェイの進行先ノードの判定方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#workflow-multi-completion">2.5. マルチインスタンスの完了条件の判定方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/workflow/tool/index.html">3. ワークフロー定義データ生成ツール</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/tool/index.html#id3">3.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/tool/index.html#id4">3.2. 使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/etl/index.html">4. ETL</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id3">4.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#etl-phase">4.2. ETLの各フェーズの仕様</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id5">4.3. ETLを使用するバッチの設計ポイント</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id9">4.4. 使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id18">4.5. 拡張例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/etl/etl_maven_plugin.html">5. ETL Mavenプラグイン</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/etl_maven_plugin.html#id2">5.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/etl_maven_plugin.html#id3">5.2. 使用方法</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../development_tools/index.html">Nablarch開発ツール</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html">1. 効率的なJava静的チェック</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html#code-analysis">1.1. 構文チェックを行う</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html#code-format">1.2. フォーマットを統一する</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html#api">1.3. 許可していないAPIが使用されていないかチェックする</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/ui_dev/index.html">2. フロントエンド上級者向けのUI開発基盤</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/ui_dev/doc/index.html">2.1. Nablarch UI開発基盤 解説書</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/ui_dev/guide/index.html">2.2. JSP/HTML作成ガイド</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/ui_dev/guide/widget_usage/widget_list.html">2.3. UI部品の実装サンプルで提供しているウィジェットの一覧</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/testing_framework/index.html">3. テスティングフレームワーク</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/testing_framework/guide/development_guide/05_UnitTestGuide/index.html">3.1. 単体テスト実施方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/testing_framework/guide/development_guide/06_TestFWGuide/index.html">3.2. 自動テストフレームワークの使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/testing_framework/guide/development_guide/08_TestTools/index.html">3.3. プログラミング工程で使用するツール</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/toolbox/index.html">4. アプリケーション開発時に使える便利なツール</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/toolbox/JspStaticAnalysis/index.html">4.1. JSP静的解析ツール</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/toolbox/SqlExecutor/SqlExecutor.html">4.2. Nablarch SQL Executor</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/toolbox/JspVerifier/JspVerifier.html">4.3. 業務画面JSP検証ツール</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../examples/index.html">Nablarch実装例集</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/01/index.html">データベースを用いたパスワード認証機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/0101_PBKDF2PasswordEncryptor.html">PBKDF2を用いたパスワード暗号化機能サンプル</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id12">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/02/index.html">バリデーション機能の拡張</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#extendedvalidation-mailaddressvalidator">メールアドレスバリデーション</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#extendedvalidation-japanesetelnumbervalidator">日本電話番号バリデーション</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#id12">コード値精査</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/03/index.html">検索結果の一覧表示</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id5">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id8">使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchinfo">ListSearchInfoクラス</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult">listSearchResultタグ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-sort">検索結果の並び替え</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-nopaging">1画面にすべての検索結果を一覧表示する場合の実装方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-defaultcondition">デフォルトの検索条件で検索した結果を初期表示する場合の実装方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-setting">検索結果の一覧表示機能のデフォルト値設定</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-customize">業務アプリケーションへのサンプル実装(タグファイル)の取り込み方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-tagreference">タグリファレンス</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/04/index.html">フォーマッタ機能の拡張</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/04/0401_ExtendedDataFormatter.html">データフォーマッタの拡張</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/04/0402_ExtendedFieldType.html">データフォーマッタ機能におけるフィールドタイプの拡張</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/05/index.html">データベースを用いたファイル管理機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id2">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id6">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id7">機能</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id10">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id15">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/06/index.html">CAPTCHA機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/06_Captcha_guide.html">CAPTCHA機能の組み込み手順</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id21">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/07/index.html">UserAgent情報取得機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id1">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id3">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id8">設定の記述</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id11">使用例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/08/index.html">HTMLメール送信機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id1">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id3">要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id14">実装例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/09/index.html">bouncycastleを使用した電子署名つきメールの送信サンプルの使用方法</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id3">環境準備</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id4">電子署名付きメール送信機能の構造</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id5">設定ファイルの準備</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id7">実行方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/10/index.html">ログ集計サンプルの使用方法</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/10/index.html#id3">提供サンプル一覧</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/11/index.html">メッセージング基盤テストシミュレータサンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id4">用途</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id8">特徴</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id12">要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id15">使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id18">拡張例</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../nablarch_api/index.html">Nablarch API</a></li>
</ul>

  

        </div>
      </div>
    </nav>

    <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap">

      
      <nav class="wy-nav-top" role="navigation" aria-label="top navigation">
        
          <i data-toggle="wy-nav-top" class="fa fa-bars"></i>
          <a href="../../../index.html">∇Nablarch </a>
        
      </nav>


      
      <div class="wy-nav-content">
        <div class="rst-content">
          

 



<div role="navigation" aria-label="breadcrumbs navigation">
  <ul class="wy-breadcrumbs">
    <li><a href="../../../index.html">Docs</a> &raquo;</li>
      
          <li><a href="../../index.html">Nablarchアプリケーションフレームワーク</a> &raquo;</li>
      
          <li><a href="../index.html">アプリケーションフレームワーク</a> &raquo;</li>
      
          <li><a href="index.html">7. Nablarchが提供するライブラリ</a> &raquo;</li>
      
    <li>7.19. JSPカスタムタグ</li>
    <li class="wy-breadcrumbs-aside">
      <a href="https://github.com/nablarch" class="fa fa-github">GitHub</a>
    </li>
    <li class="wy-breadcrumbs-aside">
        <a href="https://nablarch.github.io/docs/LATEST/doc/en/index.html" class="en">English</a>
    </li>
  </ul>
  <hr/>
</div>
          <div role="main" class="document" itemscope="itemscope" itemtype="http://schema.org/Article">
           <div itemprop="articleBody">
            
  <div class="section" id="jsp">
<span id="tag"></span><h1>7.19. JSPカスタムタグ<a class="headerlink" href="#jsp" title="このヘッドラインへのパーマリンク">¶</a></h1>
<div class="contents local topic" id="id1">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#id2" id="id43">機能概要</a><ul>
<li><a class="reference internal" href="#html" id="id44">HTMLエスケープ漏れを防げる</a></li>
<li><a class="reference internal" href="#id3" id="id45">入力画面と確認画面のJSPを共通化して実装を減らす</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id4" id="id46">モジュール一覧</a></li>
<li><a class="reference internal" href="#id5" id="id47">使用方法</a><ul>
<li><a class="reference internal" href="#tag-setting" id="id48">カスタムタグの設定を行う</a></li>
<li><a class="reference internal" href="#taglib" id="id49">カスタムタグを使用する(taglibディレクティブの指定方法)</a></li>
<li><a class="reference internal" href="#tag-input-form" id="id50">入力フォームを作る</a></li>
<li><a class="reference internal" href="#tag-selection" id="id51">選択項目(プルダウン/ラジオボタン/チェックボックス)を表示する</a></li>
<li><a class="reference internal" href="#tag-checkbox-off-value" id="id52">チェックボックスでチェックなしに対する値を指定する</a></li>
<li><a class="reference internal" href="#tag-window-scope" id="id53">入力データを画面間で持ち回る(ウィンドウスコープ)</a></li>
<li><a class="reference internal" href="#hidden" id="id54">クライアントに保持するデータを暗号化する(hidden暗号化)</a></li>
<li><a class="reference internal" href="#tag-composite-key" id="id55">複合キーのラジオボタンやチェックボックスを作る</a></li>
<li><a class="reference internal" href="#tag-submit" id="id56">複数のボタン/リンクからフォームをサブミットする</a></li>
<li><a class="reference internal" href="#tag-onclick-override" id="id57">サブミット前に処理を追加する</a></li>
<li><a class="reference internal" href="#tag-onchange-submit" id="id58">プルダウン変更などの画面操作でサブミットする</a></li>
<li><a class="reference internal" href="#tag-submit-change-parameter" id="id59">ボタン/リンク毎にパラメータを追加する</a></li>
<li><a class="reference internal" href="#tag-submit-display-control" id="id60">認可チェック/サービス提供可否に応じてボタン/リンクの表示/非表示を切り替える</a></li>
<li><a class="reference internal" href="#tag-submit-popup" id="id61">別ウィンドウ/タブを開くボタン/リンクを作る(ポップアップ)</a></li>
<li><a class="reference internal" href="#tag-submit-download" id="id62">ファイルダウンロードを行うボタン/リンクを作る</a></li>
<li><a class="reference internal" href="#tag-double-submission" id="id63">二重サブミットを防ぐ</a><ul>
<li><a class="reference internal" href="#id20" id="id64">サーバ側のトークンをデータベースに保存する</a></li>
</ul>
</li>
<li><a class="reference internal" href="#tag-make-common" id="id65">入力画面と確認画面を共通化する</a></li>
<li><a class="reference internal" href="#tag-set-variable" id="id66">変数に値を設定する</a></li>
<li><a class="reference internal" href="#get" id="id67">GETリクエストを使用する</a></li>
<li><a class="reference internal" href="#tag-write-value" id="id68">値を出力する</a></li>
<li><a class="reference internal" href="#tag-html-unescape" id="id69">HTMLエスケープせずに値を出力する</a></li>
<li><a class="reference internal" href="#tag-format-value" id="id70">フォーマットして値を出力する</a></li>
<li><a class="reference internal" href="#tag-write-error" id="id71">エラー表示を行う</a></li>
<li><a class="reference internal" href="#tag-code-input-output" id="id72">コード値を表示する</a></li>
<li><a class="reference internal" href="#tag-write-message" id="id73">メッセージを出力する</a></li>
<li><a class="reference internal" href="#tag-change-resource-path-of-lang" id="id74">言語毎にリソースパスを切り替える</a></li>
<li><a class="reference internal" href="#id30" id="id75">ブラウザのキャッシュを防止する</a></li>
<li><a class="reference internal" href="#id31" id="id76">静的コンテンツの変更時にクライアント側のキャッシュを参照しないようにする</a></li>
<li><a class="reference internal" href="#dynamic-attribute" id="id77">任意の属性を指定する</a><ul>
<li><a class="reference internal" href="#id33" id="id78">論理属性の扱い</a></li>
</ul>
</li>
</ul>
</li>
<li><a class="reference internal" href="#id34" id="id79">拡張例</a><ul>
<li><a class="reference internal" href="#id35" id="id80">フォーマッタを追加する</a></li>
<li><a class="reference internal" href="#tag-submit-display-control-change" id="id81">ボタン/リンクの表示制御に使う判定処理を変更する</a></li>
<li><a class="reference internal" href="#tag-double-submission-client-side-change" id="id82">クライアント側の二重サブミット防止で、二重サブミット発生時の振る舞いを追加する</a></li>
<li><a class="reference internal" href="#tag-double-submission-server-side-change" id="id83">サーバ側の二重サブミット防止で、トークンの発行処理を変更する</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id39" id="id84">カスタムタグのルール</a><ul>
<li><a class="reference internal" href="#tag-naming-rule" id="id85">命名ルール</a></li>
<li><a class="reference internal" href="#tag-access-rule" id="id86">入力/出力データへのアクセスルール</a></li>
<li><a class="reference internal" href="#uri" id="id87">URIの指定方法</a></li>
<li><a class="reference internal" href="#tag-html-escape" id="id88">HTMLエスケープと改行、半角スペース変換</a></li>
</ul>
</li>
<li><a class="reference internal" href="#tag-reference" id="id89"><a class="reference internal" href="tag/tag_reference.html#tag-reference"><span>タグリファレンス</span></a></a></li>
</ul>
</div>
<div class="toctree-wrapper compound">
</div>
<p>この機能では、ウェブアプリケーションの画面作成を支援するカスタムタグを提供する。</p>
<p>カスタムタグには、以下の制約がある。</p>
<ul class="simple">
<li>JSP2.1以降をサポートしているWebコンテナで動作する。</li>
<li>条件分岐やループなどの制御にはJSTLを使用する。</li>
<li>XHTML 1.0 Transitionalに対応した属性をサポートする。</li>
<li>クライアントのJavaScriptが必須である。( <a class="reference internal" href="#tag-onclick-override"><span>サブミット前に処理を追加する</span></a> を参照)</li>
<li>GETリクエストで一部のカスタムタグが使用できない。( <a class="reference internal" href="#tag-using-get"><span>GETリクエストを使用する</span></a> を参照)</li>
</ul>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p>HTML5で追加された属性は、 <a class="reference internal" href="#dynamic-attribute"><span>動的属性</span></a> を利用して記述することができる。
ただし、頻繁に使用されそうな次の属性は予めカスタムタグの属性として定義している。
また、HTML5で追加されたinput要素は、それぞれ <a class="reference internal" href="tag/tag_reference.html#tag-text-tag"><span>textタグ</span></a> をベースに以下のタグを追加している。
各input要素固有の属性はカスタムタグで個別に定義していないため、動的属性により指定する必要がある。</p>
<ul class="simple">
<li>追加した属性（属性を追加したHTMLのタグ名をカッコ内に記載する。）</li>
</ul>
<blockquote>
<div><ul class="simple">
<li>autocomplete(input、password、form)</li>
<li>autofocus(input、textarea、select、button)</li>
<li>placeholder(text、password、textarea)</li>
<li>maxlength(textarea)</li>
<li>multiple(input)</li>
</ul>
</div></blockquote>
<ul class="simple">
<li>追加したinput要素</li>
</ul>
<blockquote class="last">
<div><ul class="simple">
<li><a class="reference internal" href="tag/tag_reference.html#tag-search-tag"><span>searchタグ</span></a> (検索テキスト)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-tel-tag"><span>telタグ</span></a> (電話番号)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-url-tag"><span>urlタグ</span></a> (URL)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-email-tag"><span>emailタグ</span></a> (メールアドレス)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-date-tag"><span>dateタグ</span></a> (日付)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-month-tag"><span>monthタグ</span></a> (月)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-week-tag"><span>weekタグ</span></a> (週)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-time-tag"><span>timeタグ</span></a> (時間)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-datetimelocal-tag"><span>datetimeLocalタグ</span></a> (ローカル日時)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-number-tag"><span>numberタグ</span></a> (数値)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-range-tag"><span>rangeタグ</span></a> (レンジ)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-color-tag"><span>colorタグ</span></a> (色)</li>
</ul>
</div></blockquote>
</div>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p>カスタムタグは、以下のような単純な画面遷移を行うウェブアプリケーションを対象にしている。
そのため、操作性を重視したリッチな画面作成やSPA(シングルページアプリケーション)に対応していない。</p>
<ul class="simple">
<li>検索画面→詳細画面による検索/詳細表示</li>
<li>入力画面→確認画面→完了画面による登録/更新/削除</li>
<li>ポップアップ(別ウィンドウ、別タブ)による入力補助</li>
</ul>
<p class="last">プロジェクトでJavaScriptを多用する場合は、カスタムタグが出力するJavaScriptと
プロジェクトで作成するJavaScriptで副作用が起きないように注意する。
カスタムタグが出力するJavaScriptについては <a class="reference internal" href="#tag-onclick-override"><span>サブミット前に処理を追加する</span></a> を参照。</p>
</div>
<div class="section" id="id2">
<h2><a class="toc-backref" href="#id43">7.19.2. 機能概要</a><a class="headerlink" href="#id2" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="section" id="html">
<h3><a class="toc-backref" href="#id44">7.19.2.1. HTMLエスケープ漏れを防げる</a><a class="headerlink" href="#html" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>HTMLの中では「&lt;」「&gt;」「&#8221;」といった文字は、特別な意味を持つため、
それらを含む値をそのままJSPで出力してしまうと、悪意のあるユーザが容易にスクリプトを埋め込むことができ、
クロスサイトスクリプティング(XSS)と呼ばれる脆弱性につながってしまう。
そのため、入力値を出力する場合、HTMLエスケープを行う。</p>
<p>ところが、JSPでEL式を使って値を出力すると、HTMLエスケープされない。
そのため、値の出力時はHTMLエスケープを考慮した実装が常に必要になり、生産性の低下につながる。</p>
<p>カスタムタグは、デフォルトでHTMLエスケープを行うので、
カスタムタグを使って実装している限り、HTMLエスケープ漏れを防げる。</p>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">JavaScriptに対するエスケープ処理は、提供してないため、
scriptタグのボディやonclick属性など、JavaScriptを記述する部分には、動的な値(入力データなど)を埋め込まないこと。
JavaScriptを記述する部分に動的な値(入力データなど)を埋め込む場合は、プロジェクトの責任でエスケープ処理を実施すること。</p>
</div>
<p>HTMLエスケープの詳細は以下を参照。</p>
<ul class="simple">
<li><a class="reference internal" href="#tag-html-escape"><span>HTMLエスケープと改行、半角スペース変換</span></a></li>
<li><a class="reference internal" href="#tag-html-unescape"><span>HTMLエスケープせずに値を出力する</span></a></li>
</ul>
</div>
<div class="section" id="id3">
<h3><a class="toc-backref" href="#id45">7.19.2.2. 入力画面と確認画面のJSPを共通化して実装を減らす</a><a class="headerlink" href="#id3" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>多くのシステムでは、入力画面と確認画面でレイアウトが変わらず、
似たようなJSPを作成している。</p>
<p>カスタムタグでは、入力画面と確認画面のJSPを共通化する機能を提供しているので、
入力画面向けに作成したJSPに、確認画面との差分(例えば、ボタンなど)のみを追加実装するだけで、
確認画面を作成することができ、生産性の向上が期待できる。</p>
<p>入力画面と確認画面の共通化については以下を参照。</p>
<ul class="simple">
<li><a class="reference internal" href="#tag-make-common"><span>入力画面と確認画面を共通化する</span></a></li>
</ul>
</div>
</div>
<div class="section" id="id4">
<h2><a class="toc-backref" href="#id46">7.19.3. モジュール一覧</a><a class="headerlink" href="#id4" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.nablarch.framework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>nablarch-fw-web-tag<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>

<span class="c">&lt;!-- hidden暗号化を使う場合のみ --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.nablarch.framework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>nablarch-common-encryption<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>

<span class="c">&lt;!-- ファイルダウンロードを使う場合のみ --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.nablarch.framework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>nablarch-fw-web-extension<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</pre></div>
</div>
</div>
<div class="section" id="id5">
<h2><a class="toc-backref" href="#id47">7.19.4. 使用方法</a><a class="headerlink" href="#id5" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">カスタムタグの説明では、すべての属性について説明していないので、
各カスタムタグで指定できる属性については、 <a class="reference internal" href="tag/tag_reference.html#tag-reference"><span>タグリファレンス</span></a> を参照。</p>
</div>
<div class="section" id="tag-setting">
<span id="id6"></span><h3><a class="toc-backref" href="#id48">7.19.4.1. カスタムタグの設定を行う</a><a class="headerlink" href="#tag-setting" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>カスタムタグの設定は、 <a class="reference internal" href="../handlers/web/nablarch_tag_handler.html#nablarch-tag-handler"><span>Nablarchカスタムタグ制御ハンドラ</span></a> と
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html" title="nablarch.common.web.tag.CustomTagConfig">CustomTagConfig</a>
により行う。</p>
<dl class="docutils">
<dt><a class="reference internal" href="../handlers/web/nablarch_tag_handler.html#nablarch-tag-handler"><span>Nablarchカスタムタグ制御ハンドラ</span></a></dt>
<dd><p class="first">カスタムタグを使用したリクエストを処理する際に、以下の機能に必要となる前処理を行うハンドラ。
カスタムタグを使用する場合は、このハンドラの設定が必須となる。</p>
<ul class="simple">
<li><a class="reference internal" href="#tag-checkbox-off-value"><span>チェックボックスでチェックなしに対する値を指定する</span></a></li>
<li><a class="reference internal" href="#tag-hidden-encryption"><span>クライアントに保持するデータを暗号化する(hidden暗号化)</span></a></li>
<li><a class="reference internal" href="#tag-submit-change-parameter"><span>ボタン/リンク毎にパラメータを追加する</span></a></li>
<li><a class="reference internal" href="#tag-composite-key"><span>複合キーのラジオボタンやチェックボックスを作る</span></a></li>
</ul>
<p class="last">このハンドラの設定値については、 <a class="reference internal" href="../handlers/web/nablarch_tag_handler.html#nablarch-tag-handler"><span>Nablarchカスタムタグ制御ハンドラ</span></a> を参照。</p>
</dd>
<dt><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html" title="nablarch.common.web.tag.CustomTagConfig">CustomTagConfig</a></dt>
<dd><p class="first">カスタムタグのデフォルト値の設定を行うクラス。
選択項目のラベルパターンなど、カスタムタグの属性は、個々の画面で毎回設定するよりも、
アプリケーション全体で統一したデフォルト値を使用したい場合がある。
そのため、カスタムタグのデフォルト値の設定をこのクラスで行う。</p>
<p class="last">デフォルト値の設定は、 このクラスを <code class="docutils literal"><span class="pre">customTagConfig</span></code> という名前でコンポーネント定義に追加する。
設定項目については、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html" title="nablarch.common.web.tag.CustomTagConfig">CustomTagConfig</a> を参照。</p>
</dd>
</dl>
</div>
<div class="section" id="taglib">
<span id="tag-specify-taglib"></span><h3><a class="toc-backref" href="#id49">7.19.4.2. カスタムタグを使用する(taglibディレクティブの指定方法)</a><a class="headerlink" href="#taglib" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>カスタムタグとJSTLを使用する想定なので、それぞれのtaglibディレクティブを指定する。</p>
<div class="highlight-jsp"><div class="highlight"><pre><span></span><span class="k">&lt;%@</span> <span class="n">taglib</span> <span class="n">prefix</span><span class="o">=</span><span class="s">&quot;c&quot;</span> <span class="n">uri</span><span class="o">=</span><span class="s">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> <span class="k">%&gt;</span>
<span class="k">&lt;%@</span> <span class="n">taglib</span> <span class="n">prefix</span><span class="o">=</span><span class="s">&quot;n&quot;</span> <span class="n">uri</span><span class="o">=</span><span class="s">&quot;http://tis.co.jp/nablarch&quot;</span> <span class="k">%&gt;</span>
</pre></div>
</div>
</div>
<div class="section" id="tag-input-form">
<span id="id7"></span><h3><a class="toc-backref" href="#id50">7.19.4.3. 入力フォームを作る</a><a class="headerlink" href="#tag-input-form" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>入力フォームは、次のカスタムタグを使用して作成する。
以下に列挙したカスタムタグの詳細は、 <a class="reference internal" href="tag/tag_reference.html#tag-reference"><span>タグリファレンス</span></a> を参照。</p>
<ul class="simple">
<li><a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a></li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-text-tag"><span>textタグ</span></a> などの入力を行うカスタムタグ</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-submit-tag"><span>submitタグ</span></a>  などのサブミットを行うカスタムタグ</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-error-tag"><span>errorタグ</span></a> などのエラー表示を行うカスタムタグ</li>
</ul>
<dl class="docutils">
<dt>入力フォームを作る上でのポイント</dt>
<dd><p class="first"></p>
<dl class="last docutils">
<dt>入力値の復元</dt>
<dd>バリデーションエラーなどで、入力フォームを再表示した場合、カスタムタグによりリクエストパラメータから入力値が復元される。</dd>
<dt>初期値の出力</dt>
<dd>入力項目に初期値を出力したい場合は、アクション側でリクエストスコープに初期値を設定したオブジェクトを設定する。
そして、カスタムタグのname属性と、リクエストスコープ上の変数名が対応するように、name属性を指定する。
指定方法の詳細や実装例は、 <a class="reference internal" href="#tag-access-rule"><span>入力/出力データへのアクセスルール</span></a> を参照。</dd>
<dt>サブミット先のURI指定</dt>
<dd>カスタムタグでは、フォームに配置された複数のボタン/リンクから、それぞれ別々のURIにサブミットできる。
ボタン/リンクのサブミット先となるURIは、uri属性に指定する。
指定方法の詳細や実装例は、 <a class="reference internal" href="#tag-specify-uri"><span>URIの指定方法</span></a> を参照。</dd>
</dl>
</dd>
<dt>実装例</dt>
<dd><p class="first"></p>
<div class="last highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;n:form&gt;</span>
  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;label&gt;</span>ユーザID<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;n:text</span> <span class="na">name=</span><span class="s">&quot;form.userId&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;n:error</span> <span class="na">name=</span><span class="s">&quot;form.userId&quot;</span> <span class="na">messageFormat=</span><span class="s">&quot;span&quot;</span> <span class="na">errorCss=</span><span class="s">&quot;alert alert-danger&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;label&gt;</span>パスワード<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;n:password</span> <span class="na">name=</span><span class="s">&quot;form.password&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;n:error</span> <span class="na">name=</span><span class="s">&quot;form.password&quot;</span> <span class="na">messageFormat=</span><span class="s">&quot;span&quot;</span> <span class="na">errorCss=</span><span class="s">&quot;alert alert-danger&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;padding: 8px 0;&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">uri=</span><span class="s">&quot;/action/login&quot;</span> <span class="na">value=</span><span class="s">&quot;ログイン&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>
</pre></div>
</div>
</dd>
<dt>出力結果</dt>
<dd><p class="first"></p>
<img alt="../../../_images/login_form.png" class="last" src="../../../_images/login_form.png" />
</dd>
</dl>
<p></p>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p id="tag-input-form-name-constraint"><a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> のname属性には以下の制約がある。</p>
<ul class="simple">
<li>画面内で一意な名前をname属性に指定する</li>
<li>JavaScriptの変数名の構文に則った値を指定する</li>
</ul>
<dl class="last docutils">
<dt>画面内で一意な名前をname属性に指定する</dt>
<dd><p class="first">カスタムタグでは、サブミット制御にJavaScriptを使用する。
JavaScriptについては <a class="reference internal" href="#tag-onclick-override"><span>サブミット前に処理を追加する</span></a> を参照。</p>
<p>このJavaScriptでは、サブミット対象のフォームを特定するために、
<a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> のname属性を使用する。
そのため、アプリケーションで <a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> のname属性を指定する場合は、
画面内で一意な名前をname属性に指定する必要がある。</p>
<p class="last">アプリケーションで <a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> のname属性を指定しなかった場合、
カスタムタグは一意な値をname属性に設定する。</p>
</dd>
<dt>JavaScriptの変数名の構文に則った値を指定する</dt>
<dd><p class="first"><a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> のname属性はJavaScriptで使用するため、
JavaScriptの変数名の構文に則った値を指定する必要がある。</p>
<dl class="last docutils">
<dt>変数名の構文</dt>
<dd><ul class="first last simple">
<li>値の先頭は英字始まり</li>
<li>先頭以降の値は英数字またはアンダーバー</li>
</ul>
</dd>
</dl>
</dd>
</dl>
</div>
</div>
<div class="section" id="tag-selection">
<span id="id8"></span><h3><a class="toc-backref" href="#id51">7.19.4.4. 選択項目(プルダウン/ラジオボタン/チェックボックス)を表示する</a><a class="headerlink" href="#tag-selection" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>選択項目には、次のカスタムタグを使用する。</p>
<ul class="simple">
<li><a class="reference internal" href="tag/tag_reference.html#tag-select-tag"><span>selectタグ</span></a> (プルダウン)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-radio-buttons-tag"><span>radioButtonsタグ</span></a> (複数のラジオボタン)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-checkboxes-tag"><span>checkboxesタグ</span></a> (複数のチェックボックス)</li>
</ul>
<p>アクション側で選択肢リスト(選択肢のラベルと値をもつオブジェクトのリスト)をリクエストスコープに設定し、
カスタムタグで選択肢リストを使用して表示する。</p>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">選択状態の判定は、選択された値と選択肢の値をともに
<a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--" title="java.lang.Object.toString()">Object#toString</a> してから行う。</p>
</div>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first"></p>
<dl class="last docutils">
<dt>選択肢のクラス</dt>
<dd><p class="first"></p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Plan</span> <span class="o">{</span>

    <span class="c1">// 選択肢の値</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">planId</span><span class="o">;</span>

    <span class="c1">// 選択肢のラベル</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">planName</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Plan</span><span class="o">(</span><span class="n">String</span> <span class="n">planId</span><span class="o">,</span> <span class="n">String</span> <span class="n">planName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">planId</span> <span class="o">=</span> <span class="n">planId</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">planName</span> <span class="o">=</span> <span class="n">planName</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// カスタムタグはこのプロパティから選択肢の値を取得する。</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPlanId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">planId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// カスタムタグはこのプロパティから選択肢のラベルを取得する。</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPlanName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">planName</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
<dt>アクション</dt>
<dd><p class="first"></p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="c1">// 選択肢リストをリクエストスコープに設定する。</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">Plan</span><span class="o">&gt;</span> <span class="n">plans</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="n">Plan</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">,</span> <span class="s">&quot;フリー&quot;</span><span class="o">),</span>
                                 <span class="k">new</span> <span class="n">Plan</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">,</span> <span class="s">&quot;ベーシック&quot;</span><span class="o">),</span>
                                 <span class="k">new</span> <span class="n">Plan</span><span class="o">(</span><span class="s">&quot;C&quot;</span><span class="o">,</span> <span class="s">&quot;プレミアム&quot;</span><span class="o">));</span>

<span class="c1">// カスタムタグはここで指定した名前を使ってリクエストスコープから選択肢リストを取得する。</span>
<span class="n">context</span><span class="o">.</span><span class="na">setRequestScopedVar</span><span class="o">(</span><span class="s">&quot;plans&quot;</span><span class="o">,</span> <span class="n">plans</span><span class="o">);</span>
</pre></div>
</div>
</dd>
<dt>プルダウン</dt>
<dd><dl class="first last docutils">
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!--</span>
<span class="c">  以下の属性指定により、選択肢の内容にアクセスする。</span>
<span class="c">  listName属性: 選択肢リストの名前</span>
<span class="c">  elementLabelProperty属性: ラベルを表すプロパティ名</span>
<span class="c">  elementValueProperty属性: 値を表すプロパティ名</span>
<span class="c">--&gt;</span>
<span class="nt">&lt;n:select</span> <span class="na">name=</span><span class="s">&quot;form.plan1&quot;</span>
          <span class="na">listName=</span><span class="s">&quot;plans&quot;</span>
          <span class="na">elementLabelProperty=</span><span class="s">&quot;planName&quot;</span>
          <span class="na">elementValueProperty=</span><span class="s">&quot;planId&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
<dt>出力されるHTML</dt>
<dd><div class="first last highlight-html"><div class="highlight"><pre><span></span><span class="c">&lt;!--</span>
<span class="c">  &quot;form.plan1&quot;の値が&quot;A&quot;だった場合。</span>
<span class="c">--&gt;</span>
<span class="p">&lt;</span><span class="nt">select</span> <span class="na">name</span><span class="o">=</span><span class="s">&quot;form.plan1&quot;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;A&quot;</span> <span class="na">selected</span><span class="o">=</span><span class="s">&quot;selected&quot;</span><span class="p">&gt;</span>フリー<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;B&quot;</span><span class="p">&gt;</span>ベーシック<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;C&quot;</span><span class="p">&gt;</span>プレミアム<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">select</span><span class="p">&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>ラジオボタン</dt>
<dd><dl class="first last docutils">
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- 属性指定はselectタグと同じ。 --&gt;</span>
<span class="nt">&lt;n:radioButtons</span> <span class="na">name=</span><span class="s">&quot;form.plan2&quot;</span>
                <span class="na">listName=</span><span class="s">&quot;plans&quot;</span>
                <span class="na">elementLabelProperty=</span><span class="s">&quot;planName&quot;</span>
                <span class="na">elementValueProperty=</span><span class="s">&quot;planId&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
<dt>出力されるHTML</dt>
<dd><div class="first last highlight-html"><div class="highlight"><pre><span></span><span class="c">&lt;!--</span>
<span class="c"> &quot;form.plan2&quot;の値が&quot;B&quot;だった場合。</span>
<span class="c"> デフォルトだとbrタグで出力する。</span>
<span class="c"> listFormat属性を指定して、divタグ、spanタグ、ulタグ、olタグ、スペース区切りに変更できる。</span>
<span class="c">--&gt;</span>
<span class="p">&lt;</span><span class="nt">input</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;nablarch_radio1&quot;</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;radio&quot;</span> <span class="na">name</span><span class="o">=</span><span class="s">&quot;form.plan2&quot;</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;A&quot;</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&quot;nablarch_radio1&quot;</span><span class="p">&gt;</span>フリー<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;&lt;</span><span class="nt">br</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nt">input</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;nablarch_radio2&quot;</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;radio&quot;</span> <span class="na">name</span><span class="o">=</span><span class="s">&quot;form.plan2&quot;</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;B&quot;</span> <span class="na">checked</span><span class="o">=</span><span class="s">&quot;checked&quot;</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&quot;nablarch_radio2&quot;</span><span class="p">&gt;</span>ベーシック<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;&lt;</span><span class="nt">br</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nt">input</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;nablarch_radio3&quot;</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;radio&quot;</span> <span class="na">name</span><span class="o">=</span><span class="s">&quot;form.plan2&quot;</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;C&quot;</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&quot;nablarch_radio3&quot;</span><span class="p">&gt;</span>プレミアム<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;&lt;</span><span class="nt">br</span> <span class="p">/&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>チェックボックス</dt>
<dd><dl class="first last docutils">
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- 属性指定はselectタグと同じ。 --&gt;</span>
<span class="nt">&lt;n:checkboxes</span> <span class="na">name=</span><span class="s">&quot;form.plan4&quot;</span>
              <span class="na">listName=</span><span class="s">&quot;plans&quot;</span>
              <span class="na">elementLabelProperty=</span><span class="s">&quot;planName&quot;</span>
              <span class="na">elementValueProperty=</span><span class="s">&quot;planId&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
<dt>出力されるHTML</dt>
<dd><div class="first last highlight-html"><div class="highlight"><pre><span></span><span class="c">&lt;!--</span>
<span class="c"> &quot;form.plan4&quot;の値が&quot;C&quot;だった場合。</span>
<span class="c"> デフォルトだとbrタグで出力する。</span>
<span class="c"> listFormat属性を指定して、divタグ、spanタグ、ulタグ、olタグ、スペース区切りに変更できる。</span>
<span class="c">--&gt;</span>
<span class="p">&lt;</span><span class="nt">input</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;nablarch_checkbox1&quot;</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">name</span><span class="o">=</span><span class="s">&quot;form.plan4&quot;</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;A&quot;</span>
       <span class="na">checked</span><span class="o">=</span><span class="s">&quot;checked&quot;</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&quot;nablarch_checkbox1&quot;</span><span class="p">&gt;</span>フリー<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;&lt;</span><span class="nt">br</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nt">input</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;nablarch_checkbox2&quot;</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">name</span><span class="o">=</span><span class="s">&quot;form.plan4&quot;</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;B&quot;</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&quot;nablarch_checkbox2&quot;</span><span class="p">&gt;</span>ベーシック<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;&lt;</span><span class="nt">br</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nt">input</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;nablarch_checkbox3&quot;</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">name</span><span class="o">=</span><span class="s">&quot;form.plan4&quot;</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;C&quot;</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&quot;nablarch_checkbox3&quot;</span><span class="p">&gt;</span>プレミアム<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;&lt;</span><span class="nt">br</span> <span class="p">/&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p><a class="reference internal" href="tag/tag_reference.html#tag-radio-buttons-tag"><span>radioButtonsタグ</span></a> と <a class="reference internal" href="tag/tag_reference.html#tag-checkboxes-tag"><span>checkboxesタグ</span></a> は、
簡単に選択項目を出力できる反面、カスタムタグで選択肢をすべて出力するので、
どうしても出力されるHTMLに制限が出てくる。
そのため、デザイン会社が作成したHTMLをベースに開発する場合など、プロジェクトでデザインをコントロールできない場合は、
<a class="reference internal" href="tag/tag_reference.html#tag-radio-buttons-tag"><span>radioButtonsタグ</span></a> と <a class="reference internal" href="tag/tag_reference.html#tag-checkboxes-tag"><span>checkboxesタグ</span></a> が出力するHTMLがデザインに合わないケースが出てくる。</p>
<p>このような場合は、JSTLのc:forEachタグと <a class="reference internal" href="tag/tag_reference.html#tag-radio-tag"><span>radioButtonタグ</span></a> または <a class="reference internal" href="tag/tag_reference.html#tag-checkbox-tag"><span>checkboxタグ</span></a> を使って実装すれば、
選択肢を表示するHTMLを自由に実装できる。</p>
<div class="last highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;c:forEach</span> <span class="na">items=</span><span class="s">&quot;${plans}&quot;</span> <span class="na">var=</span><span class="s">&quot;plan&quot;</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- 前後に好きなHTMLを追加できる。 --&gt;</span>
  <span class="nt">&lt;n:radioButton</span> <span class="na">name=</span><span class="s">&quot;form.plan3&quot;</span> <span class="na">label=</span><span class="s">&quot;${plan.planName}&quot;</span> <span class="na">value=</span><span class="s">&quot;${plan.planId}&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/c:forEach&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="tag-checkbox-off-value">
<span id="id9"></span><h3><a class="toc-backref" href="#id52">7.19.4.5. チェックボックスでチェックなしに対する値を指定する</a><a class="headerlink" href="#tag-checkbox-off-value" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>HTMLのcheckboxタグは、チェックなしの場合にリクエストパラメータが送信されない。
単一の入力項目としてcheckboxタグを使用する場合は、データベース上でフラグとして表現されたデータ項目に対応することが多く、
通常はチェックなしの場合にも何らかの値を設定する。
そのため、 <a class="reference internal" href="tag/tag_reference.html#tag-checkbox-tag"><span>checkboxタグ</span></a> では、チェックなしに対応する値を指定できる機能を提供する。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!--</span>
<span class="c"> 以下の属性指定により、チェックなしの場合の動作を制御する。</span>
<span class="c"> useOffValue属性: チェックなしの値設定を使用するか否か。デフォルトはtrue</span>
<span class="c">                  一括削除などで複数選択させる場合にfalseを指定する。</span>
<span class="c"> offLabel属性: チェックなしの場合に使用するラベル。</span>
<span class="c">               入力画面と確認画面を共通化した場合に確認画面で表示されるラベル。</span>
<span class="c"> offValue属性: チェックなしの場合に使用する値。デフォルトは0。</span>
<span class="c">--&gt;</span>
<span class="nt">&lt;n:checkbox</span> <span class="na">name=</span><span class="s">&quot;form.useMail&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="na">label=</span><span class="s">&quot;使用する&quot;</span>
            <span class="na">offLabel=</span><span class="s">&quot;使用しない&quot;</span> <span class="na">offValue=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
</dl>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">この機能は、<a class="reference internal" href="../handlers/web/nablarch_tag_handler.html#nablarch-tag-handler"><span>Nablarchカスタムタグ制御ハンドラ</span></a> と <a class="reference internal" href="#tag-hidden-encryption"><span>hidden暗号化</span></a> を使って実現している。
checkboxタグ出力時にチェックなしに対応する値をhiddenタグに出力しておき、
<a class="reference internal" href="../handlers/web/nablarch_tag_handler.html#nablarch-tag-handler"><span>Nablarchカスタムタグ制御ハンドラ</span></a> がリクエスト受付時に、checkboxタグがチェックされていない場合のみ、
リクエストパラメータにチェックなしに対応する値を設定する。</p>
</div>
</div>
<div class="section" id="tag-window-scope">
<span id="id10"></span><h3><a class="toc-backref" href="#id53">7.19.4.6. 入力データを画面間で持ち回る(ウィンドウスコープ)</a><a class="headerlink" href="#tag-window-scope" title="このヘッドラインへのパーマリンク">¶</a></h3>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p>入力データ保持は、ここで説明するウィンドウスコープを使う方法と、
ライブラリの <a class="reference internal" href="session_store.html#session-store"><span>セッションストア</span></a> を使う方法の2通りがある。
以下の理由から、画面間での入力データ保持には、 <a class="reference internal" href="session_store.html#session-store"><span>セッションストア</span></a> を使用すること。</p>
<ul class="last">
<li><p class="first">ウィンドウスコープでは、データをキー/値のペアで保持するため、Beanをそのまま格納することができない。
Beanが保持するデータを格納したい場合は、データをバラすことになり、とても実装が煩雑となる。</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="c1">// こんなBeanがあるとする。</span>
<span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
<span class="n">person</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;名前&quot;</span><span class="o">);</span>
<span class="n">person</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="s">&quot;年齢&quot;</span><span class="o">);</span>

<span class="c1">// ウィンドウスコープへの設定(アクションで行う場合)</span>
<span class="n">request</span><span class="o">.</span><span class="na">setParam</span><span class="o">(</span><span class="s">&quot;person.name&quot;</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
<span class="n">request</span><span class="o">.</span><span class="na">setParam</span><span class="o">(</span><span class="s">&quot;person.age&quot;</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">());</span>

<span class="c1">// ウィンドウスコープへの設定(JSPで行う場合)</span>
<span class="o">&lt;</span><span class="n">n</span><span class="o">:</span><span class="n">hidden</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;person.name&quot;</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="n">n</span><span class="o">:</span><span class="n">hidden</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;person.age&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
</li>
<li><p class="first">ウィンドウスコープへの入力データの設定は、カスタムタグの属性指定により行うため、動きが把握しにくい。(実装難易度が高い)</p>
</li>
</ul>
</div>
<p>入力データは、クライアント側にhiddenタグとして保持する。
クライアント側に保持することで、サーバ側(セッション)に保持する場合に比べ、
複数ウィンドウの使用やブラウザの戻るボタンの使用など、ブラウザの使用制限を減らし、柔軟な画面設計が可能となる。</p>
<p>ここでは、クライアント側に保持するデータの格納先をウィンドウスコープと呼ぶ。
ウィンドウスコープのデータは、 <a class="reference internal" href="#tag-hidden-encryption"><span>hidden暗号化</span></a> により暗号化する。</p>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">ウィンドウスコープのデータは、<a class="reference internal" href="#tag-hidden-encryption"><span>hidden暗号化</span></a> により暗号化されhiddenタグに出力される。
そのため、Ajaxを使って取得したデータで書き換えるなど、クライアント側でウィンドウスコープの内容を書き換えることはできない。</p>
</div>
<p>ウィンドウスコープにデータを設定するには、 <a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> のwindowScopePrefixes属性を指定する。</p>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p>windowScopePrefixes属性を指定すると、リクエストパラメータのうち、
パラメータ名がこの属性に指定された値に <strong>前方一致</strong> するパラメータが、
ウィンドウスコープに設定される。</p>
<p class="last">例えば、 <code class="docutils literal"><span class="pre">windowScopePrefixes=&quot;user&quot;</span></code> と指定すると、
<code class="docutils literal"><span class="pre">users</span></code> で始まるパラメータもウィンドウスコープに設定される。</p>
</div>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first">検索機能の検索条件、更新機能の入力データを画面間で持ち回る。
画面遷移とhiddenに格納されるデータの動きは以下のとおり。</p>
<img alt="../../../_images/window_scope.png" src="../../../_images/window_scope.png" />
<p>検索条件のリクエストパラメータは <code class="docutils literal"><span class="pre">searchCondition.*</span></code> 、
入力データのリクエストパラメータは <code class="docutils literal"><span class="pre">user.*</span></code> とする。</p>
<dl class="last docutils">
<dt>検索画面</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- ウィンドウスコープのデータを送信しない。 --&gt;</span>
<span class="nt">&lt;n:form&gt;</span>
</pre></div>
</div>
</dd>
<dt>更新画面</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- 検索条件だけ送信する。 --&gt;</span>
<span class="nt">&lt;n:form</span> <span class="na">windowScopePrefixes=</span><span class="s">&quot;searchCondition&quot;</span><span class="nt">&gt;</span>
</pre></div>
</div>
</dd>
<dt>更新確認画面</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!--</span>
<span class="c">  検索条件と入力データを送信する。</span>
<span class="c">  複数指定する場合はカンマ区切りで指定する。</span>
<span class="c">--&gt;</span>
<span class="nt">&lt;n:form</span> <span class="na">windowScopePrefixes=</span><span class="s">&quot;searchCondition,user&quot;</span><span class="nt">&gt;</span>
</pre></div>
</div>
</dd>
<dt>更新完了画面</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- 検索条件だけ送信する。 --&gt;</span>
<span class="nt">&lt;n:form</span> <span class="na">windowScopePrefixes=</span><span class="s">&quot;searchCondition&quot;</span><span class="nt">&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">データベースのデータについては、更新対象データを特定する主キーや楽観ロック用のデータなど、必要最低限に留めること。
特に入力画面と確認画面で表示するデータ(入力項目ではなく、表示するだけの項目)等は、
hiddenで引き回すのではなくデータが必要となる度にデータベースから取得すること。
hiddenのデータ量が増えると、通信速度の低下、メモリ圧迫につながるため。</p>
</div>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">ウィンドウスコープに格納したデータは、hiddenタグに出力し、リクエストパラメータとして画面間を持ち回っている。
そのため、アクション側でウィンドウスコープに格納したデータを使用する場合は、
<a class="reference internal" href="validation.html#validation"><span>バリデーション</span></a> を行う必要がある。</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last"><a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> では、一律リクエストパラメータを全てhiddenタグに出力するのではなく、
既に入力項目として出力したリクエストパラメータはhiddenタグの出力から除外する。</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">ログイン情報など、全ての業務に渡って必要になる情報はサーバ側(セッション)に保持する。</p>
</div>
</div>
<div class="section" id="hidden">
<span id="tag-hidden-encryption"></span><h3><a class="toc-backref" href="#id54">7.19.4.7. クライアントに保持するデータを暗号化する(hidden暗号化)</a><a class="headerlink" href="#hidden" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p><a class="reference internal" href="#tag-window-scope"><span>ウィンドウスコープ</span></a> や <a class="reference internal" href="tag/tag_reference.html#tag-hidden-tag"><span>hiddenタグ</span></a> の値は、
クライアント側で改竄されたり、HTMLソースから容易に値を参照できる。
そのため、hiddenタグの改竄や参照を防ぐことを目的に、カスタムタグではhidden暗号化機能を提供する。</p>
<p>デフォルトで全ての <a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> で暗号化を行い、全てのリクエストで復号及び改竄チェックを行う。
このため、アプリケーションプログラマは、hidden暗号化機能に関して実装する必要がない。</p>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">仕様が複雑であり容易に使用することができない、また <a class="reference internal" href="#tag-window-scope"><span>ウィンドウスコープ</span></a> にあるように
暗号化対象のデータの使用が非推奨であるため本機能も非推奨とする。
このため、特に理由がない限り <a class="reference internal" href="#tag-use-hidden-encryption"><span>useHiddenEncryption</span></a> には <code class="docutils literal"><span class="pre">false</span></code> を設定すること。</p>
</div>
<dl class="docutils">
<dt>hidden暗号化</dt>
<dd><p class="first">hidden暗号化は、 <a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> と <a class="reference internal" href="../handlers/web/nablarch_tag_handler.html#nablarch-tag-handler"><span>Nablarchカスタムタグ制御ハンドラ</span></a> により実現する。
hidden暗号化の処理イメージを以下に示す。
<a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> が暗号化、 <a class="reference internal" href="../handlers/web/nablarch_tag_handler.html#nablarch-tag-handler"><span>Nablarchカスタムタグ制御ハンドラ</span></a> が復号及び改竄チェックを行う。</p>
<img alt="../../../_images/hidden_encryption.png" src="../../../_images/hidden_encryption.png" />
<p class="last"></p>
</dd>
<dt>暗号化処理</dt>
<dd><p class="first">暗号化は、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/encryption/Encryptor.html" title="nablarch.common.encryption.Encryptor">Encryptor</a> インタフェースを実装したクラスが行う。
フレームワークでは、デフォルトの暗号化アルゴリズムとして <code class="docutils literal"><span class="pre">AES(128bit)</span></code> を使用する。
暗号化アルゴリズムを変更したい場合は、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/encryption/Encryptor.html" title="nablarch.common.encryption.Encryptor">Encryptor</a> を実装したクラスを
コンポーネント定義に <code class="docutils literal"><span class="pre">hiddenEncryptor</span></code> という名前で追加する。</p>
<p>暗号化では、<a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> 毎に、 <a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> に含まれる以下のデータをまとめて暗号化し、
1つのhiddenタグで出力する。</p>
<ul class="simple">
<li>カスタムタグの <a class="reference internal" href="tag/tag_reference.html#tag-hidden-tag"><span>hiddenタグ</span></a> で明示的に指定したhiddenパラメータ</li>
<li><a class="reference internal" href="#tag-window-scope"><span>ウィンドウスコープ</span></a> の値</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-reference-submit"><span>サブミットを行うカスタムタグ</span></a> で指定したリクエストID</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-reference-submit"><span>サブミットを行うカスタムタグ</span></a> で追加した <a class="reference internal" href="#tag-submit-change-parameter"><span>パラメータ</span></a></li>
</ul>
<p>さらに、暗号化では、改竄を検知するために、上記のデータから生成したハッシュ値を含める。
リクエストIDは、異なる入力フォーム間で暗号化した値を入れ替えた場合の改ざんを検知するために、
ハッシュ値は、値の書き換えによる改竄を検知するために使用する。
暗号化した結果は、BASE64でエンコードしhiddenタグに出力する。</p>
<div class="last admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">カスタムタグの <a class="reference internal" href="tag/tag_reference.html#tag-hidden-tag"><span>hiddenタグ</span></a> で明示的に指定したhiddenパラメータは、
暗号化に含まれるため、クライアント側でJavaScriptを使用して値を操作できない。
クライアント側のJavaScriptでhiddenパラメータを操作したい場合は、
<a class="reference internal" href="tag/tag_reference.html#tag-plain-hidden-tag"><span>plainHiddenタグ</span></a> を使用して、暗号化しないhiddenタグを出力する。</p>
</div>
</dd>
</dl>
<dl class="docutils" id="tag-hidden-encryption-decryption">
<dt>復号処理</dt>
<dd><p class="first">復号処理は、 <a class="reference internal" href="../handlers/web/nablarch_tag_handler.html#nablarch-tag-handler"><span>Nablarchカスタムタグ制御ハンドラ</span></a> が行う。
<a class="reference internal" href="../handlers/web/nablarch_tag_handler.html#nablarch-tag-handler"><span>Nablarchカスタムタグ制御ハンドラ</span></a> では以下の場合に改竄と判定し、設定で指定された画面に遷移させる。</p>
<ul class="last simple">
<li>暗号化したhiddenパラメータ(nablarch_hidden)が存在しない。</li>
<li>BASE64のデコードに失敗する。</li>
<li>復号に失敗する。</li>
<li>暗号化時に生成したハッシュ値と復号した値で生成したハッシュ値が一致しない。</li>
<li>暗号化時に追加したリクエストIDと受け付けたリクエストのリクエストIDが一致しない。</li>
</ul>
</dd>
<dt>暗号化に使用する鍵の保存場所</dt>
<dd>暗号化に使用する鍵は、鍵の有効期間をできるだけ短くするため、セッション毎に生成する。
このため、同じユーザであってもログインをやり直すと、ログイン前に使用していた画面から処理を継続できない。</dd>
<dt>hidden暗号化の設定</dt>
<dd><p class="first">hidden暗号化では、 <a class="reference internal" href="#tag-setting"><span>カスタムタグの設定を行う</span></a> により、以下の設定ができる。</p>
<dl class="docutils" id="tag-use-hidden-encryption">
<dt>useHiddenEncryptionプロパティ</dt>
<dd>hidden暗号化を使用するか否か。
デフォルトはtrue。</dd>
<dt>noHiddenEncryptionRequestIdsプロパティ</dt>
<dd>hidden暗号化を行わないリクエストID。</dd>
</dl>
<p>noHiddenEncryptionRequestIdsプロパティには、以下のように、hidden暗号化を使用できないリクエストを指定する。</p>
<ul class="simple">
<li>ログイン画面など、アプリケーションの入口となるリクエスト</li>
<li>ブックマークから遷移してくるリクエスト</li>
<li>外部サイトから遷移してくるリクエスト</li>
</ul>
<p>これらのリクエストは、暗号化したhiddenパラメータ(nablarch_hidden)が存在しない、
またはセッション毎に生成する鍵が存在しないため、noHiddenEncryptionRequestIdsプロパティを設定しないと改竄エラーとなる。</p>
<p>noHiddenEncryptionRequestIdsプロパティの設定値は、
<a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> と <a class="reference internal" href="../handlers/web/nablarch_tag_handler.html#nablarch-tag-handler"><span>Nablarchカスタムタグ制御ハンドラ</span></a> が、
それぞれ暗号化と復号を行う際に参照して処理を行う。</p>
<dl class="last docutils">
<dt><a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a></dt>
<dd><a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> に暗号化対象のリクエストIDが1つでも含まれていれば暗号化を行う。
反対に、暗号化対象のリクエストIDが1つも含まれていない場合、 <a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> は暗号化を行わない。</dd>
<dt><a class="reference internal" href="../handlers/web/nablarch_tag_handler.html#nablarch-tag-handler"><span>Nablarchカスタムタグ制御ハンドラ</span></a></dt>
<dd>リクエストされたリクエストIDが暗号化対象のリクエストIDの場合のみ、復号を行う。</dd>
</dl>
</dd>
</dl>
</div>
<div class="section" id="tag-composite-key">
<span id="id11"></span><h3><a class="toc-backref" href="#id55">7.19.4.8. 複合キーのラジオボタンやチェックボックスを作る</a><a class="headerlink" href="#tag-composite-key" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>一覧画面でデータを選択する場合などは、ラジオボタンやチェックボックスを使用する。
データを識別する値が単一であれば、 <a class="reference internal" href="tag/tag_reference.html#tag-radio-tag"><span>radioButtonタグ</span></a> や <a class="reference internal" href="tag/tag_reference.html#tag-checkbox-tag"><span>checkboxタグ</span></a> を使用すればよいが、
複合キーの場合は単純に実装できない。</p>
<p>カスタムタグでは、複合キーに対応したラジオボタンやチェックボックスを提供する。</p>
<ul class="simple">
<li><a class="reference internal" href="tag/tag_reference.html#tag-composite-key-radio-button-tag"><span>compositeKeyRadioButtonタグ</span></a> (複合キーに対応したラジオボタン)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-composite-key-checkbox-tag"><span>compositeKeyCheckboxタグ</span></a> (複合キーに対応したチェックボックス)</li>
</ul>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">この機能を使用するには、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/compositekey/CompositeKeyConvertor.html" title="nablarch.common.web.compositekey.CompositeKeyConvertor">CompositeKeyConvertor</a> と
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/compositekey/CompositeKeyArrayConvertor.html" title="nablarch.common.web.compositekey.CompositeKeyArrayConvertor">CompositeKeyArrayConvertor</a>
をコンポーネント定義に追加しておく必要がある。
設定方法については、 <a class="reference internal" href="validation/nablarch_validation.html#nablarch-validation-definition-validator-convertor"><span>使用するバリデータとコンバータを設定する</span></a> を参照。</p>
</div>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">この機能は、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/compositekey/CompositeKeyConvertor.html" title="nablarch.common.web.compositekey.CompositeKeyConvertor">CompositeKeyConvertor</a> と
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/compositekey/CompositeKeyArrayConvertor.html" title="nablarch.common.web.compositekey.CompositeKeyArrayConvertor">CompositeKeyArrayConvertor</a>
を使用するため、 <a class="reference internal" href="validation/nablarch_validation.html#nablarch-validation"><span>Nablarch Validation</span></a> でのみ使用できる。
<a class="reference internal" href="validation/bean_validation.html#bean-validation"><span>Bean Validation</span></a> は対応していない。</p>
</div>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first">一覧表示で複合キーをもつチェックボックスを使用する例を元に、実装方法を説明する。</p>
<dl class="last docutils">
<dt>フォーム</dt>
<dd><p class="first">フォームでは、複合キーを保持するプロパティを
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/compositekey/CompositeKey.html" title="nablarch.common.web.compositekey.CompositeKey">CompositeKey</a>
として定義する。</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderItemsForm</span> <span class="o">{</span>

    <span class="c1">// 今回は、一覧表示で複数データに対する複合キーを受け付けるので、</span>
    <span class="c1">// 配列として定義する。</span>
    <span class="kd">public</span> <span class="n">CompositeKey</span><span class="o">[]</span> <span class="n">orderItems</span><span class="o">;</span>

    <span class="c1">// getter, コンストラクタ等は省略。</span>

    <span class="c1">// CompositeKeyTypeアノテーションで複合キーのサイズを指定する。</span>
    <span class="nd">@CompositeKeyType</span><span class="o">(</span><span class="n">keySize</span> <span class="o">=</span> <span class="mi">2</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setOrderItems</span><span class="o">(</span><span class="n">CompositeKey</span><span class="o">[]</span> <span class="n">orderItems</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">orderItems</span> <span class="o">=</span> <span class="n">orderItems</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;table&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="c">&lt;!-- ヘッダ出力は省略。 --&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
  <span class="nt">&lt;tbody&gt;</span>
    <span class="nt">&lt;c:forEach</span> <span class="na">var=</span><span class="s">&quot;orderItem&quot;</span> <span class="na">items=</span><span class="s">&quot;${orderItems}&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;td&gt;</span>
        <span class="c">&lt;!--</span>
<span class="c">          以下の属性を指定する。</span>
<span class="c">          name属性: フォームのプロパティ名に合わせて指定する。</span>
<span class="c">          valueObject属性: 複合キーの値を持つオブジェクトを指定する。</span>
<span class="c">          keyNames属性: valueObject属性で指定したオブジェクトから</span>
<span class="c">                        複合キーの値を取得する際に使用するプロパティ名を指定する。</span>
<span class="c">                        ここに指定した順番でCompositeKeyに設定される。</span>
<span class="c">          namePrefix属性: 複合キーの値をリクエストパラメータに展開する際に使用する</span>
<span class="c">                          プレフィクスを指定する。</span>
<span class="c">                          name属性と異なる値を指定する必要がある。</span>
<span class="c">        --&gt;</span>
        <span class="nt">&lt;n:compositeKeyCheckbox</span>
          <span class="na">name=</span><span class="s">&quot;form.orderItems&quot;</span>
          <span class="na">label=</span><span class="s">&quot;&quot;</span>
          <span class="na">valueObject=</span><span class="s">&quot;${orderItem}&quot;</span>
          <span class="na">keyNames=</span><span class="s">&quot;orderId,productId&quot;</span>
          <span class="na">namePrefix=</span><span class="s">&quot;orderItems&quot;</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;/td&gt;</span>
      <span class="c">&lt;!-- 以下略 --&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/c:forEach&gt;</span>
  <span class="nt">&lt;/tbody&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
</div>
<div class="section" id="tag-submit">
<span id="id12"></span><h3><a class="toc-backref" href="#id56">7.19.4.9. 複数のボタン/リンクからフォームをサブミットする</a><a class="headerlink" href="#tag-submit" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>フォームのサブミットは、ボタンとリンクに対応しており、次のカスタムタグを使用して行う。
1つのフォームに複数のボタンとリンクを配置することができる。</p>
<dl class="docutils">
<dt>フォームのサブミット</dt>
<dd><div class="first last line-block">
<div class="line"><a class="reference internal" href="tag/tag_reference.html#tag-submit-tag"><span>submitタグ</span></a> (inputタグのボタン)</div>
<div class="line"><a class="reference internal" href="tag/tag_reference.html#tag-button-tag"><span>buttonタグ</span></a> (buttonタグのボタン)</div>
<div class="line"><a class="reference internal" href="tag/tag_reference.html#tag-submit-link-tag"><span>submitLinkタグ</span></a> (リンク)</div>
</div>
</dd>
<dt>別ウィンドウを開いてサブミット(ポップアップ)</dt>
<dd><div class="first last line-block">
<div class="line"><a class="reference internal" href="tag/tag_reference.html#tag-popup-submit-tag"><span>popupSubmitタグ</span></a> (inputタグのボタン)</div>
<div class="line"><a class="reference internal" href="tag/tag_reference.html#tag-popup-button-tag"><span>popupButtonタグ</span></a> (buttonタグのボタン)</div>
<div class="line"><a class="reference internal" href="tag/tag_reference.html#tag-popup-link-tag"><span>popupLinkタグ</span></a> (リンク)</div>
</div>
</dd>
<dt>ダウンロード用のサブミット</dt>
<dd><div class="first last line-block">
<div class="line"><a class="reference internal" href="tag/tag_reference.html#tag-download-submit-tag"><span>downloadSubmitタグ</span></a> (inputタグのボタン)</div>
<div class="line"><a class="reference internal" href="tag/tag_reference.html#tag-download-button-tag"><span>downloadButtonタグ</span></a> (buttonタグのボタン)</div>
<div class="line"><a class="reference internal" href="tag/tag_reference.html#tag-download-link-tag"><span>downloadLinkタグ</span></a> (リンク)</div>
</div>
</dd>
</dl>
<p>タグ名が <code class="docutils literal"><span class="pre">popup</span></code> から始まるタグは、新しいウィンドウをオープンし、
オープンしたウィンドウに対してサブミットを行う。
タグ名が <code class="docutils literal"><span class="pre">download</span></code> から始まるタグは、ダウンロード用のサブミットを行う。
それぞれ詳細は、以下を参照。</p>
<ul class="simple">
<li><a class="reference internal" href="#tag-submit-popup"><span>別ウィンドウ/タブを開くボタン/リンクを作る(ポップアップ)</span></a></li>
<li><a class="reference internal" href="#tag-submit-download"><span>ファイルダウンロードを行うボタン/リンクを作る</span></a></li>
</ul>
<p>これらのカスタムタグでは、ボタン/リンクとURIを関連付けるためにname属性とuri属性を指定する。
name属性は、フォーム内で一意な名前を指定する。name属性の指定がない場合は、カスタムタグで一意な名前が自動で出力される。
uri属性の指定方法については、 <a class="reference internal" href="#tag-specify-uri"><span>URIの指定方法</span></a> を参照。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- name属性は自動で出力されるので指定しなくてよい。 --&gt;</span>
<span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">uri=</span><span class="s">&quot;login&quot;</span> <span class="na">value=</span><span class="s">&quot;ログイン&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="tag-onclick-override">
<span id="id13"></span><h3><a class="toc-backref" href="#id57">7.19.4.10. サブミット前に処理を追加する</a><a class="headerlink" href="#tag-onclick-override" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>フォームのサブミットは、JavaScriptを使用してボタン/リンク毎のURIを組み立てることで実現している。
カスタムタグは、グローバル領域にこのJavaScript関数を出力し、
ボタン/リンクのonclick属性にその関数呼び出しを設定した状態でHTML出力を行う。</p>
<dl class="docutils" id="tag-submit-function">
<dt>カスタムタグが出力するJavaScript関数のシグネチャ</dt>
<dd><div class="first last highlight-javascript"><div class="highlight"><pre><span></span><span class="cm">/**</span>
<span class="cm"> * @param event イベントオブジェクト</span>
<span class="cm"> * @param element イベント元の要素(ボタン又はリンク)</span>
<span class="cm"> * @return イベントを伝搬させないため常にfalse</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">nablarch_submit</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span>
</pre></div>
</div>
</dd>
</dl>
<p>出力例を以下に示す。</p>
<dl class="docutils">
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;n:form&gt;</span>
  <span class="c">&lt;!-- 省略 --&gt;</span>
  <span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">uri=</span><span class="s">&quot;login&quot;</span> <span class="na">value=</span><span class="s">&quot;ログイン&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>
</pre></div>
</div>
</dd>
<dt>HTML</dt>
<dd><div class="first last highlight-html"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;text/javascript&quot;</span><span class="p">&gt;</span>
<span class="c">&lt;!--</span>
<span class="kd">function</span> <span class="nx">nablarch_submit</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 省略</span>
<span class="p">}</span>
<span class="o">--&gt;</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">form</span> <span class="na">name</span><span class="o">=</span><span class="s">&quot;nablarch_form1&quot;</span> <span class="na">method</span><span class="o">=</span><span class="s">&quot;post&quot;</span><span class="p">&gt;</span>
  <span class="c">&lt;!-- onclick属性にサブミット制御を行うJavaScript関数が設定される。 --&gt;</span>
  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;submit&quot;</span> <span class="na">name</span><span class="o">=</span><span class="s">&quot;nablarch_form1_1&quot;</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;ログイン&quot;</span>
         <span class="na">onclick</span><span class="o">=</span><span class="s">&quot;return window.nablarch_submit(event, this);&quot;</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</pre></div>
</div>
</dd>
</dl>
<p>サブミット前に処理を追加したい場合は、onclick属性にアプリケーションで作成したJavaScript関数を指定する。
カスタムタグは、onclick属性が指定された場合、サブミット用のJavaScript関数の指定を行わない。
この場合、アプリケーションで作成したJavaScriptで、カスタムタグが設定する <a class="reference internal" href="#tag-submit-function"><span>JavaScript関数</span></a> を呼び出す必要がある。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first">サブミット前に確認ダイアログを表示する。</p>
<dl class="last docutils">
<dt>JavaScript</dt>
<dd><div class="first last highlight-javascript"><div class="highlight"><pre><span></span><span class="kd">function</span> <span class="nx">popUpConfirmation</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="s2">&quot;登録します。よろしいですか？&quot;</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// カスタムタグが出力するJavaScript関数を明示的に呼び出す。</span>
    <span class="k">return</span> <span class="nx">nablarch_submit</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">element</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// キャンセル</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</dd>
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">uri=</span><span class="s">&quot;register&quot;</span> <span class="na">value=</span><span class="s">&quot;登録&quot;</span>
          <span class="na">onclick=</span><span class="s">&quot;return popUpConfirmation(event, this);&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
</div>
<div class="section" id="tag-onchange-submit">
<span id="id14"></span><h3><a class="toc-backref" href="#id58">7.19.4.11. プルダウン変更などの画面操作でサブミットする</a><a class="headerlink" href="#tag-onchange-submit" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>カスタムタグは、サブミット制御にJavaScriptを使用しており、
サブミット制御を行うJavaScript関数が、ボタンやリンクのイベントハンドラ(onclick属性)に指定されることを前提に動作する。
JavaScriptの詳細については、 <a class="reference internal" href="#tag-onclick-override"><span>サブミット前に処理を追加する</span></a> を参照。</p>
<p>そのため、プルダウン変更などの画面操作でサブミットを行いたい場合は、サブミットさせたいボタンのクリックイベントを発生させる。</p>
<p>プルダウン変更でサブミットを行う場合の実装例を示す。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><div class="first highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- onchange属性にて、サブミットしたいボタン要素のclick関数を呼ぶ。 --&gt;</span>
<span class="nt">&lt;n:select</span> <span class="na">name=</span><span class="s">&quot;form.plan&quot;</span>
          <span class="na">listName=</span><span class="s">&quot;plans&quot;</span>
          <span class="na">elementLabelProperty=</span><span class="s">&quot;planName&quot;</span>
          <span class="na">elementValueProperty=</span><span class="s">&quot;planId&quot;</span>
          <span class="na">onchange=</span><span class="s">&quot;window.document.getElementById(&#39;register&#39;).click(); return false;&quot;</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;n:submit</span> <span class="na">id=</span><span class="s">&quot;register&quot;</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">uri=</span><span class="s">&quot;register&quot;</span> <span class="na">value=</span><span class="s">&quot;登録&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<div class="last admonition important">
<p class="first admonition-title">重要</p>
<p class="last">上記の実装例では、説明がしやすいので、onchangeイベントハンドラに直接JavaScriptを記載しているが、
実際のプロジェクトでは、オープンソースのJavaScriptライブラリを使うなどして、処理を動的にバインドすることを推奨する。</p>
</div>
</dd>
</dl>
</div>
<div class="section" id="tag-submit-change-parameter">
<span id="id15"></span><h3><a class="toc-backref" href="#id59">7.19.4.12. ボタン/リンク毎にパラメータを追加する</a><a class="headerlink" href="#tag-submit-change-parameter" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>更新機能などにおいて、一覧画面から詳細画面に遷移するケースでは、
同じURLだけどパラメータが異なるリンクを表示したい場合がある。</p>
<p>カスタムタグでは、フォームのボタンやリンク毎にパラメータを追加するためのカスタムタグを提供する。</p>
<ul class="simple">
<li><a class="reference internal" href="tag/tag_reference.html#tag-param-tag"><span>paramタグ</span></a> (サブミット時に追加するパラメータの指定)</li>
</ul>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first">検索結果から一覧画面でリンク毎にパラメータを追加する。</p>
<div class="last highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;n:form&gt;</span>
  <span class="nt">&lt;table&gt;</span>
    <span class="c">&lt;!-- テーブルのヘッダ行は省略 --&gt;</span>
    <span class="nt">&lt;c:forEach</span> <span class="na">var=</span><span class="s">&quot;person&quot;</span> <span class="na">items=</span><span class="s">&quot;${persons}&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;td&gt;</span>
          <span class="nt">&lt;n:submitLink</span> <span class="na">uri=</span><span class="s">&quot;/action/person/show&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;n:write</span> <span class="na">name=</span><span class="s">&quot;person.personName&quot;</span> <span class="nt">/&gt;</span>
            <span class="c">&lt;!-- パラメータ名に&quot;personId&quot;を指定している。 --&gt;</span>
            <span class="nt">&lt;n:param</span> <span class="na">paramName=</span><span class="s">&quot;personId&quot;</span> <span class="na">name=</span><span class="s">&quot;person.personId&quot;</span> <span class="nt">/&gt;</span>
          <span class="nt">&lt;/n:submitLink&gt;</span>
        <span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/c:forEach&gt;</span>
  <span class="nt">&lt;/table&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>
</pre></div>
</div>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">パラメータを追加する場合は、その数に応じてリクエストのデータ量は増大する。
そのため、一覧画面で詳細画面へのリンク毎にパラメータを追加する場合は、
パラメータをプライマリキーだけにするなど、必要最小限のパラメータのみ追加する。</p>
</div>
</div>
<div class="section" id="tag-submit-display-control">
<span id="id16"></span><h3><a class="toc-backref" href="#id60">7.19.4.13. 認可チェック/サービス提供可否に応じてボタン/リンクの表示/非表示を切り替える</a><a class="headerlink" href="#tag-submit-display-control" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p><a class="reference internal" href="permission_check.html#permission-check"><span>認可チェック</span></a> と <a class="reference internal" href="service_availability.html#service-availability"><span>サービス提供可否チェック</span></a> の結果に応じて、
<a class="reference internal" href="tag/tag_reference.html#tag-reference-submit"><span>フォームのサブミットを行うボタン/リンク</span></a> の表示を切り替える機能を提供する。
これにより、ユーザーが実際にボタン/リンクを選択する前に該当機能が使用可能かどうかが分かるため、ユーザビリティの向上につながる。</p>
<p><a class="reference internal" href="tag/tag_reference.html#tag-reference-submit"><span>フォームのサブミットを行うボタン/リンク</span></a>
に指定されたリクエストIDに対して、 <a class="reference internal" href="permission_check.html#permission-check"><span>認可チェック</span></a> と <a class="reference internal" href="service_availability.html#service-availability"><span>サービス提供可否チェック</span></a> を行い、
<code class="docutils literal"><span class="pre">権限なし</span></code> または <code class="docutils literal"><span class="pre">サービス提供不可</span></code> の場合に表示切り替えを行う。</p>
<p>切り替え時の表示方法には次の3パターンがある。</p>
<dl class="docutils">
<dt>非表示</dt>
<dd>タグを出力しない。</dd>
<dt>非活性</dt>
<dd>タグを非活性にする。
ボタンの場合は、disabled属性を有効にする。
リンクの場合は、ラベルのみ表示するか、非活性リンク描画用JSPをインクルードする。
JSPインクルードを行うには、 <a class="reference internal" href="#tag-setting"><span>カスタムタグの設定を行う</span></a> で
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html#setSubmitLinkDisabledJsp-java.lang.String-" title="nablarch.common.web.tag.CustomTagConfig.setSubmitLinkDisabledJsp(java.lang.String)">submitLinkDisabledJspプロパティ</a>
を指定する。</dd>
<dt>通常表示</dt>
<dd>通常どおりタグが出力される。
表示方法の切り替えを行わない。</dd>
</dl>
<p>デフォルトは、 <code class="docutils literal"><span class="pre">通常表示</span></code> である。
<a class="reference internal" href="#tag-setting"><span>カスタムタグの設定を行う</span></a> で
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html#setDisplayMethod-java.lang.String-" title="nablarch.common.web.tag.CustomTagConfig.setDisplayMethod(java.lang.String)">displayMethodプロパティ</a>
を指定することで、デフォルトを変更できる。</p>
<p>個別に表示方法を変更したい場合は、displayMethod属性に指定する。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!--</span>
<span class="c">  NODISPLAY(非表示)、DISABLED(非活性)、NORMAL(通常表示)のいずれかを指定する。</span>
<span class="c">  このタグは常に表示する。</span>
<span class="c">--&gt;</span>
<span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">uri=</span><span class="s">&quot;login&quot;</span> <span class="na">value=</span><span class="s">&quot;ログイン&quot;</span> <span class="na">displayMethod=</span><span class="s">&quot;NORMAL&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
</dl>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">アプリケーションで表示制御に使用する判定処理を変更したい場合は、
<a class="reference internal" href="#tag-submit-display-control-change"><span>ボタン/リンクの表示制御に使う判定処理を変更する</span></a> を参照。</p>
</div>
</div>
<div class="section" id="tag-submit-popup">
<span id="id17"></span><h3><a class="toc-backref" href="#id61">7.19.4.14. 別ウィンドウ/タブを開くボタン/リンクを作る(ポップアップ)</a><a class="headerlink" href="#tag-submit-popup" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>ユーザの操作性を向上させるために、複数ウィンドウを立ち上げたい場合がある。
例えば、郵便番号の入力欄から住所検索など、検索画面を別ウィンドウで立ち上げ入力補助を行う場合がある。</p>
<p>カスタムタグでは、複数ウィンドウの立ち上げをサポートするカスタムタグ(以降はポップアップタグと称す)を提供する。</p>
<ul class="simple">
<li><a class="reference internal" href="tag/tag_reference.html#tag-popup-submit-tag"><span>popupSubmitタグ</span></a> (inputタグのボタン)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-popup-button-tag"><span>popupButtonタグ</span></a> (buttonタグのボタン)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-popup-link-tag"><span>popupLinkタグ</span></a> (リンク)</li>
</ul>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p>これらのタグは、以下の問題点があるため非推奨とする。</p>
<ul class="last">
<li><p class="first">外部サイトへのリンクやボタンを作成した場合、一部のブラウザで新しいウィンドウでページを開けない。(例えば、IEの保護モードを有効にした場合発生する)</p>
<p><a class="reference internal" href="tag/tag_reference.html#tag-a-tag"><span>aタグ</span></a> やhtmlタグを使用することでこの問題を回避できる。</p>
</li>
<li><p class="first">サブウィンドウを用いた画面遷移は利便性が低い。</p>
<p>ページ内にポップアップウィンドウを表示する方式が一般的であり、サブウィンドウを用いた検索などは今や時代遅れである。
ページ内でのポップアップウィンドウの表示処理は、オープンソースライブラリを用いることで対応出来る。</p>
</li>
</ul>
</div>
<p>ポップアップタグは、画面内のフォームに対するサブミットを行うカスタムタグと以下の点が異なる。</p>
<ul class="simple">
<li>新しいウィンドウをオープンし、オープンしたウィンドウに対してサブミットを行う。</li>
<li>入力項目のパラメータ名を変更できる。</li>
</ul>
<p>ポップアップは、JavaScriptのwindow.open関数を使用して実現する。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first">指定したスタイルでウィンドウを開く検索ボタンを作成する。</p>
<div class="last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!--</span>
<span class="c">  以下の属性指定により、ウィンドウをオープンする動作を制御する。</span>
<span class="c">  popupWindowName属性: ポップアップのウィンドウ名。</span>
<span class="c">                       新しいウィンドウを開く際にwindow.open関数の第2引数に指定する。</span>
<span class="c">  popupOption属性: ポップアップのオプション情報。</span>
<span class="c">                   新しいウィンドウを開く際にwindow.open関数の第3引数に指定する。</span>
<span class="c">--&gt;</span>
<span class="nt">&lt;n:popupButton</span> <span class="na">uri=</span><span class="s">&quot;/action/person/list&quot;</span>
               <span class="na">popupWindowName=</span><span class="s">&quot;postalCodeSupport&quot;</span>
               <span class="na">popupOption=</span><span class="s">&quot;width=400, height=300, menubar=no, toolbar=no, scrollbars=yes&quot;</span><span class="nt">&gt;</span>
  検索
<span class="nt">&lt;/n:popupButton&gt;</span>
</pre></div>
</div>
</dd>
</dl>
<p>popupWindowName属性が指定されない場合、 <a class="reference internal" href="#tag-setting"><span>カスタムタグの設定を行う</span></a> で
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html#setPopupWindowName-java.lang.String-" title="nablarch.common.web.tag.CustomTagConfig.setPopupWindowName(java.lang.String)">popupWindowNameプロパティ</a>
に指定したデフォルト値が使用される。
デフォルト値が設定されていない場合、カスタムタグは、JavaScriptのDate関数から取得した現在時刻(ミリ秒)を新しいウィンドウの名前に使用する。
デフォルト値の指定有無により、ポップアップのデフォルト動作が以下のとおり決まる。</p>
<blockquote>
<div><dl class="docutils">
<dt>デフォルト値を指定した場合</dt>
<dd>常に同じウィンドウ名を使用するため、オープンするウィンドウが1つとなる。</dd>
<dt>デフォルト値を指定しなかった場合</dt>
<dd>常に異なるウィンドウ名を使用するため、常に新しいウィンドウをオープンする。</dd>
</dl>
</div></blockquote>
<dl class="docutils" id="tag-submit-change-param-name">
<dt>パラメータ名変更</dt>
<dd><p class="first">ポップアップタグは、元画面のフォームに含まれる全てのinput要素を動的に追加してサブミットする。
ポップアップタグにより開いたウィンドウに対するアクションと、元画面のアクションでパラメータ名が一致するとは限らない。
そのため、カスタムタグでは、元画面の入力項目のパラメータ名を変更するために以下のカスタムタグを提供する。</p>
<ul class="simple">
<li><a class="reference internal" href="tag/tag_reference.html#tag-change-param-name-tag"><span>changeParamNameタグ</span></a> (ポップアップ用のサブミット時にパラメータ名の変更)</li>
</ul>
<dl class="last docutils">
<dt>実装例</dt>
<dd><p class="first">画面イメージを以下に示す。</p>
<img alt="../../../_images/popup_postal_code.png" src="../../../_images/popup_postal_code.png" />
<p></p>
<p>検索ボタンが選択されると、郵便番号欄に入力された番号に該当する住所を検索する別ウィンドウを開く。</p>
<div class="last highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;n:form&gt;</span>
  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;label&gt;</span>郵便番号<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;n:text</span> <span class="na">name=</span><span class="s">&quot;form.postalCode&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;n:popupButton</span> <span class="na">uri=</span><span class="s">&quot;/action/postalCode/show&quot;</span><span class="nt">&gt;</span>
      検索
      <span class="c">&lt;!--</span>
<span class="c">        郵便番号のパラメータ名&quot;form.postalCode&quot;を&quot;condition.postalCode&quot;に変更する。</span>
<span class="c">      --&gt;</span>
      <span class="nt">&lt;n:changeParamName</span> <span class="na">inputName=</span><span class="s">&quot;form.postalCode&quot;</span> <span class="na">paramName=</span><span class="s">&quot;condition.postalCode&quot;</span> <span class="nt">/&gt;</span>
      <span class="c">&lt;!--</span>
<span class="c">        パラメータの追加もできる。</span>
<span class="c">      --&gt;</span>
      <span class="nt">&lt;n:param</span> <span class="na">paramName=</span><span class="s">&quot;condition.max&quot;</span> <span class="na">value=</span><span class="s">&quot;10&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/n:popupButton&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
<dl class="docutils" id="tag-submit-access-open-window">
<dt>オープンしたウィンドウへのアクセス方法</dt>
<dd><p class="first">別ウィンドウを開いた状態で元画面が遷移した場合、元画面が遷移するタイミングで不要となった別ウィンドウを全て閉じるなど、
アプリケーションでオープンしたウィンドウにアクセスしたい場合がある。
そのため、カスタムタグは、オープンしたウィンドウに対する参照をJavaScriptのグローバル変数に保持する。
オープンしたウィンドウを保持する変数名を以下に示す。</p>
<div class="highlight-javascript"><div class="highlight"><pre><span></span><span class="c1">// keyはウィンドウ名</span>
<span class="kd">var</span> <span class="nx">nablarch_opened_windows</span> <span class="o">=</span> <span class="p">{};</span>
</pre></div>
</div>
<p>元画面が遷移するタイミングで不要となった別ウィンドウを全て閉じる場合の実装例を以下に示す。</p>
<div class="last highlight-javascript"><div class="highlight"><pre><span></span><span class="c1">// onunloadイベントハンドラにバインドする。</span>
<span class="c1">// nablarch_opened_windows変数に保持されたWindowのclose関数を呼び出す。</span>
<span class="nx">onunload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">nablarch_opened_windows</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">openedWindow</span> <span class="o">=</span> <span class="nx">nablarch_opened_windows</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">openedWindow</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">openedWindow</span><span class="p">.</span><span class="nx">closed</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">openedWindow</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="tag-submit-download">
<span id="id18"></span><h3><a class="toc-backref" href="#id62">7.19.4.15. ファイルダウンロードを行うボタン/リンクを作る</a><a class="headerlink" href="#tag-submit-download" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>ファイルダウンロードを行うボタン/リンクを作るために、
ダウンロード専用のサブミットを行うカスタムタグ(以降はダウンロードタグと称す)と
アクションの実装を容易にする <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/fw/web/HttpResponse.html" title="nablarch.fw.web.HttpResponse">HttpResponse</a>
のサブクラス(以降はダウンロードユーティリティと称す)を提供する。</p>
<dl class="docutils">
<dt>ダウンロードタグ</dt>
<dd><ul class="first last simple">
<li><a class="reference internal" href="tag/tag_reference.html#tag-download-submit-tag"><span>downloadSubmitタグ</span></a> (inputタグのボタン)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-download-button-tag"><span>downloadButtonタグ</span></a> (buttonタグのボタン)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-download-link-tag"><span>downloadLinkタグ</span></a> (リンク)</li>
</ul>
</dd>
<dt>ダウンロードユーティリティ</dt>
<dd><dl class="first last docutils">
<dt><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/download/StreamResponse.html" title="nablarch.common.web.download.StreamResponse">StreamResponse</a></dt>
<dd>ストリームからHTTPレスポンスメッセージを生成するクラス。
ファイルシステム上のファイルやデータベースのBLOB型のカラムに格納したバイナリデータをダウンロードする場合に使用する。
<a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/java/io/File.html" title="java.io.File">File</a> または <a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/java/sql/Blob.html" title="java.sql.Blob">Blob</a> のダウンロードをサポートする。</dd>
<dt><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/download/DataRecordResponse.html" title="nablarch.common.web.download.DataRecordResponse">DataRecordResponse</a></dt>
<dd>データレコードからHTTPレスポンスメッセージを生成するクラス。
検索結果など、アプリケーションで使用するデータをダウンロードする場合に使用する。
ダウンロードされるデータは <a class="reference internal" href="data_io/data_format.html#data-format"><span>汎用データフォーマット</span></a> を使用してフォーマットされる。
Map&lt;String, ?&gt;型データ( <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/db/statement/SqlRow.html" title="nablarch.core.db.statement.SqlRow">SqlRow</a> など)のダウンロードをサポートする。</dd>
</dl>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">カスタムタグではフォームのサブミット制御にJavaScriptを使用しているため、
画面内のフォームに対するサブミット( <a class="reference internal" href="tag/tag_reference.html#tag-submit-tag"><span>submitタグ</span></a> など)でダウンロードを行うと、
同じフォーム内の他のサブミットが機能しなくなる。
そこで、カスタムタグでは、画面内のフォームに影響を与えずにサブミットを行うダウンロードタグを提供する。
ダウンロードを行うボタンやリンクには必ずダウンロードタグを使用すること。</p>
</div>
<p>ダウンロードタグは、画面内のフォームに対するサブミットを行うカスタムタグと以下の点が異なる。</p>
<ul class="simple">
<li>新しいフォームを作成し、新規に作成したフォームに対してサブミットを行う。</li>
<li>入力項目のパラメータ名を変更できる。</li>
</ul>
<p>パラメータ名の変更は、 <a class="reference internal" href="tag/tag_reference.html#tag-change-param-name-tag"><span>changeParamNameタグ</span></a> を使用して行う。
<a class="reference internal" href="tag/tag_reference.html#tag-change-param-name-tag"><span>changeParamNameタグ</span></a> の使い方はポップアップタグと同じなので、
<a class="reference internal" href="#tag-submit-change-param-name"><span>ポップアップ時のパラメータ名変更</span></a> を参照。</p>
<dl class="docutils">
<dt>ファイルのダウンロードの実装例</dt>
<dd><p class="first">ボタンが押されたらサーバ上のファイルをダウンロードする。</p>
<dl class="last docutils">
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- downloadButtonタグを使用してダウンロードボタンを作る。 --&gt;</span>
<span class="nt">&lt;n:downloadButton</span> <span class="na">uri=</span><span class="s">&quot;/action/download/tempFile&quot;</span><span class="nt">&gt;</span>ダウンロード<span class="nt">&lt;/n:downloadButton&gt;</span>
</pre></div>
</div>
</dd>
<dt>アクション</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="n">HttpResponse</span> <span class="nf">doTempFile</span><span class="o">(</span><span class="n">HttpRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">ExecutionContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>

    <span class="c1">// ファイルを取得する処理はプロジェクトの実装方式に従う。</span>
    <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">getTempFile</span><span class="o">();</span>

    <span class="c1">// Fileのダウンロードには、StreamResponseを使用する。</span>
    <span class="c1">// コンストラクタ引数にダウンロード対象のファイルと</span>
    <span class="c1">// リクエスト処理の終了時にファイルを削除する場合はtrue、削除しない場合はfalseを指定する。</span>
    <span class="c1">// ファイルの削除はフレームワークが行う。</span>
    <span class="c1">// 通常ダウンロード用のファイルはダウンロード後に不要となるためtrueを指定する。</span>
    <span class="n">StreamResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StreamResponse</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>

    <span class="c1">// Content-Typeヘッダ、Content-Dispositionヘッダを設定する。</span>
    <span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&quot;application/pdf&quot;</span><span class="o">);</span>
    <span class="n">response</span><span class="o">.</span><span class="na">setContentDisposition</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>

    <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>BLOB型カラムのダウンロードの実装例</dt>
<dd><p class="first">テーブルの行データ毎にリンクを表示し、
選択されたリンクに対応するデータをダウンロードする。</p>
<dl class="last docutils">
<dt>テーブル</dt>
<dd><table border="1" class="first last docutils">
<colgroup>
<col width="25%" />
<col width="25%" />
<col width="25%" />
<col width="25%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td>カラム(論理名)</td>
<td>カラム(物理名)</td>
<td>データ型</td>
<td>補足</td>
</tr>
<tr class="row-even"><td>ファイルID</td>
<td>FILE_ID</td>
<td>CHAR(3)</td>
<td>PK</td>
</tr>
<tr class="row-odd"><td>ファイル名</td>
<td>FILE_NAME</td>
<td>NVARCHAR2(100)</td>
<td>&nbsp;</td>
</tr>
<tr class="row-even"><td>ファイルデータ</td>
<td>FILE_DATA</td>
<td>BLOB</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
</dd>
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!--</span>
<span class="c">  recordsという名前で行データのリストが</span>
<span class="c">  リクエストスコープに設定されているものとする。</span>
<span class="c">--&gt;</span>
<span class="nt">&lt;c:forEach</span> <span class="na">var=</span><span class="s">&quot;record&quot;</span> <span class="na">items=</span><span class="s">&quot;${records}&quot;</span> <span class="na">varStatus=</span><span class="s">&quot;status&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;n:set</span> <span class="na">var=</span><span class="s">&quot;fileId&quot;</span> <span class="na">name=</span><span class="s">&quot;record.fileId&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;div&gt;</span>
    <span class="c">&lt;!-- downloadLinkタグを使用してリンクを作成する。 --&gt;</span>
    <span class="nt">&lt;n:downloadLink</span> <span class="na">uri=</span><span class="s">&quot;/action/download/tempFile&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;n:write</span> <span class="na">name=</span><span class="s">&quot;record.fileName&quot;</span> <span class="nt">/&gt;</span>(<span class="nt">&lt;n:write</span> <span class="na">name=</span><span class="s">&quot;fileId&quot;</span> <span class="nt">/&gt;</span>)
      <span class="c">&lt;!-- 選択されたリンクを判別するためにfileIdパラメータをparamタグで設定する。 --&gt;</span>
      <span class="nt">&lt;n:param</span> <span class="na">paramName=</span><span class="s">&quot;fileId&quot;</span> <span class="na">name=</span><span class="s">&quot;fileId&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/n:downloadLink&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/c:forEach&gt;</span>
</pre></div>
</div>
</dd>
<dt>アクション</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="n">HttpResponse</span> <span class="nf">tempFile</span><span class="o">(</span><span class="n">HttpRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">ExecutionContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>

    <span class="c1">// fileIdパラメータを使用して選択されたリンクに対応する行データを取得する。</span>
    <span class="n">SqlRow</span> <span class="n">record</span> <span class="o">=</span> <span class="n">getRecord</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>

    <span class="c1">// BlobのダウンロードにはStreamResponseクラスを使用する。</span>
    <span class="n">StreamResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StreamResponse</span><span class="o">((</span><span class="n">Blob</span><span class="o">)</span> <span class="n">record</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;FILE_DATA&quot;</span><span class="o">));</span>

    <span class="c1">// Content-Typeヘッダ、Content-Dispositionヘッダを設定する。*/</span>
    <span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&quot;image/jpeg&quot;</span><span class="o">);</span>
    <span class="n">response</span><span class="o">.</span><span class="na">setContentDisposition</span><span class="o">(</span><span class="n">record</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;FILE_NAME&quot;</span><span class="o">));</span>
    <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>データレコードのダウンロードの実装例</dt>
<dd><p class="first">テーブルの全データをCSV形式でダウンロードする。</p>
<dl class="last docutils">
<dt>テーブル</dt>
<dd><table border="1" class="first last docutils">
<colgroup>
<col width="25%" />
<col width="25%" />
<col width="25%" />
<col width="25%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td>カラム(論理名)</td>
<td>カラム(物理名)</td>
<td>データ型</td>
<td>補足</td>
</tr>
<tr class="row-even"><td>メッセージID</td>
<td>MESSAGE_ID</td>
<td>CHAR(8)</td>
<td>PK</td>
</tr>
<tr class="row-odd"><td>言語</td>
<td>LANG</td>
<td>CHAR(2)</td>
<td>PK</td>
</tr>
<tr class="row-even"><td>メッセージ</td>
<td>MESSAGE</td>
<td>NVARCHAR2(200)</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
</dd>
<dt>フォーマット定義</dt>
<dd><div class="first last highlight-bash"><div class="highlight"><pre><span></span><span class="c1">#-------------------------------------------------------------------------------</span>
<span class="c1"># メッセージ一覧のCSVファイルフォーマット</span>
<span class="c1"># N11AA001.fmtというファイル名でプロジェクトで規定された場所に配置する。</span>
<span class="c1">#-------------------------------------------------------------------------------</span>
file-type:        <span class="s2">&quot;Variable&quot;</span>
text-encoding:    <span class="s2">&quot;Shift_JIS&quot;</span> <span class="c1"># 文字列型フィールドの文字エンコーディング</span>
record-separator: <span class="s2">&quot;\n&quot;</span>        <span class="c1"># レコード区切り文字</span>
field-separator:  <span class="s2">&quot;,&quot;</span>         <span class="c1"># フィールド区切り文字</span>

<span class="o">[</span>header<span class="o">]</span>
<span class="m">1</span>   messageId    N <span class="s2">&quot;メッセージID&quot;</span>
<span class="m">2</span>   lang         N <span class="s2">&quot;言語&quot;</span>
<span class="m">3</span>   message      N <span class="s2">&quot;メッセージ&quot;</span>

<span class="o">[</span>data<span class="o">]</span>
<span class="m">1</span>   messageId    X <span class="c1"># メッセージID</span>
<span class="m">2</span>   lang         X <span class="c1"># 言語</span>
<span class="m">3</span>   message      N <span class="c1"># メッセージ</span>
</pre></div>
</div>
</dd>
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- downloadSubmitタグを使用してダウンロードボタンを実装する。 --&gt;</span>
<span class="nt">&lt;n:downloadSubmit</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">uri=</span><span class="s">&quot;/action/download/tempFile&quot;</span> <span class="na">value=</span><span class="s">&quot;ダウンロード&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
<dt>アクション</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="n">HttpResponse</span> <span class="nf">doCsvDataRecord</span><span class="o">(</span><span class="n">HttpRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">ExecutionContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>

    <span class="c1">// レコードを取得する。</span>
    <span class="n">SqlResultSet</span> <span class="n">records</span> <span class="o">=</span> <span class="n">getRecords</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>

    <span class="c1">// データレコードのダウンロードにはDataRecordResponseクラスを使用する。</span>
    <span class="c1">// コンストラクタ引数にフォーマット定義のベースパス論理名と</span>
    <span class="c1">// フォーマット定義のファイル名を指定する。</span>
    <span class="n">DataRecordResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataRecordResponse</span><span class="o">(</span><span class="s">&quot;format&quot;</span><span class="o">,</span> <span class="s">&quot;N11AA001&quot;</span><span class="o">);</span>

    <span class="c1">// DataRecordResponse#writeメソッドを使用してヘッダーを書き込む。</span>
    <span class="c1">// フォーマット定義に指定したデフォルトのヘッダー情報を使用するため、</span>
    <span class="c1">// 空のマップを指定する。</span>
    <span class="n">response</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;header&quot;</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span><span class="n">emptyMap</span><span class="o">());</span>

    <span class="c1">// DataRecordResponse#writeメソッドを使用してレコードを書き込む。</span>
    <span class="k">for</span> <span class="o">(</span><span class="n">SqlRow</span> <span class="n">record</span> <span class="o">:</span> <span class="n">records</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// レコードを編集する場合はここで行う。</span>

        <span class="n">response</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;data&quot;</span><span class="o">,</span> <span class="n">record</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// Content-Typeヘッダ、Content-Dispositionヘッダを設定する。*/</span>
    <span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&quot;text/csv; charset=Shift_JIS&quot;</span><span class="o">);</span>
    <span class="n">response</span><span class="o">.</span><span class="na">setContentDisposition</span><span class="o">(</span><span class="s">&quot;メッセージ一覧.csv&quot;</span><span class="o">);</span>

    <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
</div>
<div class="section" id="tag-double-submission">
<span id="id19"></span><h3><a class="toc-backref" href="#id63">7.19.4.16. 二重サブミットを防ぐ</a><a class="headerlink" href="#tag-double-submission" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>二重サブミットの防止は、データベースにコミットを伴う処理を要求する画面で使用する。
二重サブミットの防止方法は、クライアント側とサーバ側の2つがあり、2つの防止方法を併用する。</p>
<p>クライアント側では、ユーザが誤ってボタンをダブルクリックした場合や、
リクエストを送信したがサーバからのレスポンスが返ってこないので再度ボタンをクリックした場合に、
リクエストを2回以上送信するのを防止する。</p>
<p>一方、サーバ側では、ブラウザの戻るボタンにより完了画面から確認画面に遷移し再度サブミットした場合など、
アプリケーションが既に処理済みのリクエストを重複して処理しないように、処理済みリクエストの受け付けを防止する。</p>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p>二重サブミットを防止する画面では、どちらか一方のみ使用した場合は以下の懸念がある。</p>
<ul class="last simple">
<li>クライアント側のみ使用した場合は、リクエストを重複して処理する恐れがある。</li>
<li>サーバ側のみ使用した場合は、ボタンのダブルクリックにより2回リクエストが送信されると、
サーバ側の処理順によっては二重サブミットエラーが返されてしまい、ユーザに処理結果が返されない恐れがある。</li>
</ul>
</div>
<dl class="docutils" id="tag-double-submission-client-side">
<dt>クライアント側の二重サブミット防止</dt>
<dd><p class="first">クライアント側では、JavaScriptを使用して実現する。
1回目のサブミット時に対象要素のonclick属性を書き換え、2回目以降のサブミット要求はサーバ側に送信しないことで防止する。
さらにボタンの場合は、disabled属性を設定し、画面上でボタンをクリックできない状態にする。</p>
<p>次のカスタムタグが対応している。</p>
<dl class="docutils">
<dt>フォームのサブミット</dt>
<dd><div class="first last line-block">
<div class="line"><a class="reference internal" href="tag/tag_reference.html#tag-submit-tag"><span>submitタグ</span></a> (inputタグのボタン)</div>
<div class="line"><a class="reference internal" href="tag/tag_reference.html#tag-button-tag"><span>buttonタグ</span></a> (buttonタグのボタン)</div>
<div class="line"><a class="reference internal" href="tag/tag_reference.html#tag-submit-link-tag"><span>submitLinkタグ</span></a> (リンク)</div>
</div>
</dd>
<dt>ダウンロード用のサブミット</dt>
<dd><div class="first last line-block">
<div class="line"><a class="reference internal" href="tag/tag_reference.html#tag-download-submit-tag"><span>downloadSubmitタグ</span></a> (inputタグのボタン)</div>
<div class="line"><a class="reference internal" href="tag/tag_reference.html#tag-download-button-tag"><span>downloadButtonタグ</span></a> (buttonタグのボタン)</div>
<div class="line"><a class="reference internal" href="tag/tag_reference.html#tag-download-link-tag"><span>downloadLinkタグ</span></a> (リンク)</div>
</div>
</dd>
</dl>
<p>上記カスタムタグのallowDoubleSubmission属性に <code class="docutils literal"><span class="pre">false</span></code> を指定することで、
特定のボタン及びリンクだけを対象に二重サブミットを防止する。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first">登録ボタンはデータベースにコミットを行うので、登録ボタンのみ二重サブミットを防止する。</p>
<div class="last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!--</span>
<span class="c">  allowDoubleSubmission属性: 二重サブミットを許可するか否か。</span>
<span class="c">                             許可する場合は true 、許可しない場合は false 。</span>
<span class="c">                             デフォルトは true 。</span>
<span class="c">--&gt;</span>
<span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">name=</span><span class="s">&quot;back&quot;</span> <span class="na">value=</span><span class="s">&quot;戻る&quot;</span> <span class="na">uri=</span><span class="s">&quot;./back&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">name=</span><span class="s">&quot;register&quot;</span> <span class="na">value=</span><span class="s">&quot;登録&quot;</span> <span class="na">uri=</span><span class="s">&quot;./register&quot;</span>
          <span class="na">allowDoubleSubmission=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
</dl>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">クライアント側の二重サブミット防止を使用している画面では、
サブミット後にサーバ側からレスポンスが返ってこない(サーバ側の処理が重たいなど)ため、
ユーザがブラウザの中止ボタンを押した場合、
ボタンはクリックできない状態(disabled属性により非活性)が続くため、再度サブミットできなくなる。
この場合、ユーザは、サブミットに使用したボタン以外のボタン又はリンクを使用して処理を継続することができる。</p>
</div>
<div class="last admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">アプリケーションで二重サブミット発生時の振る舞いを追加したい場合は、
<a class="reference internal" href="#tag-double-submission-client-side-change"><span>クライアント側の二重サブミット防止で、二重サブミット発生時の振る舞いを追加する</span></a> を参照。</p>
</div>
</dd>
</dl>
<dl class="docutils" id="tag-double-submission-server-side">
<dt>サーバ側の二重サブミット防止</dt>
<dd><p class="first">サーバ側では、サーバ側で発行した一意なトークンをサーバ側(セッション)とクライアント側(hiddenタグ)に保持し、
サーバ側で突合することで実現する。このトークンは、1回のチェックに限り有効である。</p>
<p>サーバ側の二重サブミット防止では、トークンの設定を行うJSPまたはアクションと、トークンのチェックを行うアクションにおいて、
それぞれ作業が必要となる。</p>
<dl class="docutils" id="tag-double-submission-token-setting">
<dt>JSPでトークンの設定を行う</dt>
<dd><p class="first"><a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> のuseToken属性を指定することで行う。</p>
<dl class="last docutils">
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!--</span>
<span class="c">  useToken属性: トークンを設定するか否か。</span>
<span class="c">                トークンを設定する場合は true 、設定しない場合は false 。</span>
<span class="c">                デフォルトは false 。</span>
<span class="c">                入力画面と確認画面を共通化した場合、確認画面ではデフォルトが true となる。</span>
<span class="c">                そのため、入力画面と確認画面を共通化した場合は指定しなくてよい。</span>
<span class="c">--&gt;</span>
<span class="nt">&lt;n:form</span> <span class="na">useToken=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>アクションでトークンの設定を行う</dt>
<dd>JSP以外のテンプレートエンジンを採用している場合はこちらの設定方法を使用する。
<a class="reference internal" href="../handlers/web_interceptor/use_token.html#use-token-interceptor"><span>UseTokenインターセプター</span></a> で設定を行う。
使用方法の詳細は、 <a class="reference internal" href="../handlers/web_interceptor/use_token.html#use-token-interceptor"><span>UseTokenインターセプター</span></a> を参照。</dd>
<dt>トークンのチェック</dt>
<dd>トークンのチェックは、 <a class="reference internal" href="../handlers/web_interceptor/on_double_submission.html#on-double-submission-interceptor"><span>OnDoubleSubmissionインターセプター</span></a> を使用する。
使用方法の詳細は、 <a class="reference internal" href="../handlers/web_interceptor/on_double_submission.html#on-double-submission-interceptor"><span>OnDoubleSubmissionインターセプター</span></a> を参照。</dd>
<dt>セッションスコープに保存するキーを変更する</dt>
<dd><p class="first">発行されたトークンはセッションスコープに&#8221;/nablarch_session_token&#8221;というキーで保存される。
このキーはコンポーネント設定ファイルで変更できる。</p>
<dl class="last docutils">
<dt>設定例</dt>
<dd><div class="first last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;webConfig&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.web.WebConfig&quot;</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- キーを&quot;sessionToken&quot;へ変更 --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;doubleSubmissionTokenSessionAttributeName&quot;</span> <span class="na">value=</span><span class="s">&quot;sessionToken&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>リクエストスコープに保存するキーを変更する</dt>
<dd><p class="first">発行されたトークンはThymeleafなどのテンプレートに埋め込むときに使用できるよう、リクエストスコープに&#8221;nablarch_request_token&#8221;というキーで保存される。
このキーはコンポーネント設定ファイルで変更できる。</p>
<dl class="last docutils">
<dt>設定例</dt>
<dd><div class="first last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;webConfig&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.web.WebConfig&quot;</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- キーを&quot;requestToken&quot;へ変更 --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;doubleSubmissionTokenRequestAttributeName&quot;</span> <span class="na">value=</span><span class="s">&quot;requestToken&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>hiddenに埋め込むときのname属性を変更する</dt>
<dd><p class="first">トークンをhiddenに埋め込むとき、name属性は&#8221;nablarch_token&#8221;という値を設定する。
このname属性値はコンポーネント設定ファイルで変更できる。</p>
<dl class="last docutils">
<dt>設定例</dt>
<dd><div class="first last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;webConfig&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.web.WebConfig&quot;</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- name属性に設定する値を&quot;hiddenToken&quot;へ変更 --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;doubleSubmissionTokenParameterName&quot;</span> <span class="na">value=</span><span class="s">&quot;hiddenToken&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p>サーバ側の二重サブミット防止では、トークンをサーバ側のセッションに格納しているため、
同一ユーザの複数リクエストに対して、別々にトークンをチェックすることができない。</p>
<p>このため、同一ユーザにおいて、サーバ側の二重サブミット防止を行う画面遷移
(登録確認→登録完了や更新確認→更新完了など)のみ、
複数ウィンドウや複数タブを使用して並行で行うことができない。</p>
<p class="last">これらの画面遷移を並行して行った場合は、後に確認画面に遷移した画面のみ処理を継続でき、
先に確認画面に遷移した画面はトークンが古いため、二重サブミットエラーとなる。</p>
</div>
<div class="last admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">トークンの発行は、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/token/UUIDV4TokenGenerator.html" title="nablarch.common.web.token.UUIDV4TokenGenerator">UUIDV4TokenGenerator</a> が行う。
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/token/UUIDV4TokenGenerator.html" title="nablarch.common.web.token.UUIDV4TokenGenerator">UUIDV4TokenGenerator</a>
では、36文字のランダムな文字列を生成する。
トークンの発行処理を変更したい場合は、<a class="reference internal" href="#tag-double-submission-server-side-change"><span>サーバ側の二重サブミット防止で、トークンの発行処理を変更する</span></a> を参照。</p>
</div>
</dd>
</dl>
<div class="section" id="id20">
<h4><a class="toc-backref" href="#id64">7.19.4.16.1. サーバ側のトークンをデータベースに保存する</a><a class="headerlink" href="#id20" title="このヘッドラインへのパーマリンク">¶</a></h4>
<p>デフォルト実装では、サーバ側のトークンはHTTPセッションに保存される。
このため、アプリケーションサーバをスケールアウトする際には、スティッキーセッションやセッションレプリケーション等を
使用する必要がある。</p>
<p>サーバ側のトークンをデータベースに保管する実装を使用することで、特にアプリケーションサーバの設定をしなくても、
複数のアプリケーションサーバ間でトークンを共有できる。</p>
<p>詳細は <a class="reference internal" href="db_double_submit.html#db-double-submit"><span>データベースを使用した二重サブミット防止</span></a> を参照。</p>
<img alt="../../../_images/db-double-submit.png" src="../../../_images/db-double-submit.png" />
</div>
</div>
<div class="section" id="tag-make-common">
<span id="id21"></span><h3><a class="toc-backref" href="#id65">7.19.4.17. 入力画面と確認画面を共通化する</a><a class="headerlink" href="#tag-make-common" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p><a class="reference internal" href="tag/tag_reference.html#tag-reference-input"><span>入力項目のカスタムタグ</span></a> は、
入力画面と全く同じJSP記述のまま、確認画面用の出力を行うことができる。</p>
<p>入力画面と確認画面の共通化は、以下のカスタムタグを使用する。</p>
<dl class="docutils">
<dt><a class="reference internal" href="tag/tag_reference.html#tag-confirmation-page-tag"><span>confirmationPageタグ</span></a></dt>
<dd>確認画面のJSPで入力画面のJSPへのパスを指定して、入力画面と確認画面の共通化を行う。</dd>
<dt><a class="reference internal" href="tag/tag_reference.html#tag-for-input-page-tag"><span>forInputPageタグ</span></a></dt>
<dd>入力画面でのみ表示したい部分を指定する。</dd>
<dt><a class="reference internal" href="tag/tag_reference.html#tag-for-confirmation-page-tag"><span>forConfirmationPageタグ</span></a></dt>
<dd>確認画面でのみ表示したい部分を指定する。</dd>
<dt><a class="reference internal" href="tag/tag_reference.html#tag-ignore-confirmation-tag"><span>ignoreConfirmationタグ</span></a></dt>
<dd>確認画面で、確認画面向けの表示を無効化したい部分に指定する。
例えば、チェックボックスを使用した項目で、確認画面でもチェック欄を表示したい場合などに使用する。</dd>
</dl>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p>入力・確認画面の表示制御は入力系のタグが対象となる。
ただし、以下のタグに関しては異なる動作となる。</p>
<dl class="last docutils">
<dt><a class="reference internal" href="tag/tag_reference.html#tag-plain-hidden-tag"><span>plainHiddenタグ</span></a></dt>
<dd>画面遷移の状態などを画面間で受け渡す目的で使用することを想定し、入力・確認画面ともに出力する。</dd>
<dt><a class="reference internal" href="tag/tag_reference.html#tag-hidden-store-tag"><span>hiddenStoreタグ</span></a></dt>
<dd><a class="reference internal" href="session_store.html#session-store"><span>セッションストア</span></a> に保存したデータを画面間で受け渡すために使用するため、入力・確認画面ともに出力する。</dd>
</dl>
</div>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first">以下の画面出力を行うJSPの実装例を示す。</p>
<img alt="../../../_images/make_common_input_confirm.png" src="../../../_images/make_common_input_confirm.png" />
<p></p>
<dl class="last docutils">
<dt>入力画面のJSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;n:form&gt;</span>
  <span class="c">&lt;!--</span>
<span class="c">    入力欄は、入力画面と確認画面で同じJSP記述を使用する。</span>
<span class="c">  --&gt;</span>
  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;label&gt;</span>名前<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;n:text</span> <span class="na">name=</span><span class="s">&quot;form.name&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;label&gt;</span>メール<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;n:checkbox</span> <span class="na">name=</span><span class="s">&quot;form.useMail&quot;</span> <span class="na">label=</span><span class="s">&quot;使用する&quot;</span> <span class="na">offLabel=</span><span class="s">&quot;使用しない&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;label&gt;</span>プラン<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;n:select</span> <span class="na">name=</span><span class="s">&quot;form.plan&quot;</span>
              <span class="na">listName=</span><span class="s">&quot;plans&quot;</span>
              <span class="na">elementLabelProperty=</span><span class="s">&quot;planName&quot;</span>
              <span class="na">elementValueProperty=</span><span class="s">&quot;planId&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="c">&lt;!--</span>
<span class="c">   ボタン表示は、入力画面と確認画面で異なるので、</span>
<span class="c">   forInputPageタグとforConfirmationPageタグを使用する。</span>
<span class="c">  --&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;padding: 8px 0;&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;n:forInputPage&gt;</span>
      <span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">uri=</span><span class="s">&quot;/action/sample/confirm&quot;</span> <span class="na">value=</span><span class="s">&quot;確認&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/n:forInputPage&gt;</span>
    <span class="nt">&lt;n:forConfirmationPage&gt;</span>
      <span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">uri=</span><span class="s">&quot;/action/sample/showNew&quot;</span> <span class="na">value=</span><span class="s">&quot;戻る&quot;</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">uri=</span><span class="s">&quot;/action/sample/register&quot;</span> <span class="na">value=</span><span class="s">&quot;登録&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/n:forConfirmationPage&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>
</pre></div>
</div>
</dd>
<dt>確認画面のJSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!--</span>
<span class="c">  入力画面のJSPへのパスを指定する。</span>
<span class="c">--&gt;</span>
<span class="nt">&lt;n:confirmationPage</span> <span class="na">path=</span><span class="s">&quot;./input.jsp&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
</div>
<div class="section" id="tag-set-variable">
<span id="id22"></span><h3><a class="toc-backref" href="#id66">7.19.4.18. 変数に値を設定する</a><a class="headerlink" href="#tag-set-variable" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>画面タイトルなど、ページ内の複数箇所に同じ内容で出力する値は、
JSP上の変数に格納したものを参照することで、メンテナンス性を高められる。</p>
<p>カスタムタグでは変数に値を設定する <a class="reference internal" href="tag/tag_reference.html#tag-set-tag"><span>setタグ</span></a> を提供する。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first">画面タイトルを変数に設定して使用する。</p>
<div class="last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- var属性に変数名を指定する。--&gt;</span>
<span class="nt">&lt;n:set</span> <span class="na">var=</span><span class="s">&quot;title&quot;</span> <span class="na">value=</span><span class="s">&quot;ユーザ情報登録&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="c">&lt;!-- 変数の出力にはwriteタグを使用する。 --&gt;</span>
  <span class="nt">&lt;title&gt;&lt;n:write</span> <span class="na">name=</span><span class="s">&quot;title&quot;</span> <span class="nt">/&gt;&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;h1&gt;&lt;n:write</span> <span class="na">name=</span><span class="s">&quot;title&quot;</span> <span class="nt">/&gt;&lt;/h1&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</pre></div>
</div>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last"><a class="reference internal" href="tag/tag_reference.html#tag-set-tag"><span>setタグ</span></a> で設定した変数を使用して出力する場合、
<a class="reference internal" href="tag/tag_reference.html#tag-set-tag"><span>setタグ</span></a> ではHTMLエスケープ処理を実施しないため、実装例のように <a class="reference internal" href="tag/tag_reference.html#tag-write-tag"><span>writeタグ</span></a> を使用して出力すること。</p>
</div>
<dl class="docutils">
<dt>変数を格納するスコープを指定する</dt>
<dd><p class="first">変数を格納するスコープは、scope属性で指定する。
scope属性には、リクエストスコープ(request)又はページスコープ(page)を指定する。</p>
<p>scope属性の指定がない場合、変数はリクエストスコープに設定される。</p>
<p class="last">ページスコープは、アプリケーション全体で共通利用されるUI部品を作成する場合に、他JSPの変数とのバッティングを防ぎたい場合に使用する。</p>
</dd>
<dt>変数に配列やコレクションの値を設定する</dt>
<dd><p class="first"><a class="reference internal" href="tag/tag_reference.html#tag-set-tag"><span>setタグ</span></a> は、name属性が指定された場合、デフォルトで単一値として値を取得する。
単一値での値取得では、name属性に対応する値が配列やコレクションの場合に先頭の要素を返す。</p>
<p>多くのケースはデフォルトのままで問題ないが、共通利用されるUI部品を作成する場合に、
配列やコレクションをそのまま取得したい場合がある。</p>
<p class="last">このようなケースでは、 <a class="reference internal" href="tag/tag_reference.html#tag-set-tag"><span>setタグ</span></a> のbySingleValue属性に <code class="docutils literal"><span class="pre">false</span></code> を指定することで、
配列やコレクションをそのまま取得することができる。</p>
</dd>
</dl>
</div>
<div class="section" id="get">
<span id="tag-using-get"></span><h3><a class="toc-backref" href="#id67">7.19.4.19. GETリクエストを使用する</a><a class="headerlink" href="#get" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>検索エンジン等のクローラ対策、および利用者がブックマーク可能なURLとするために、GETリクエストの使用が必要となる場合がある。</p>
<p>カスタムタグは、 <a class="reference internal" href="#tag-hidden-encryption"><span>hidden暗号化</span></a> や
<a class="reference internal" href="#tag-submit-change-parameter"><span>パラメータ追加</span></a> といった機能を実現するため、
hiddenパラメータを出力して使用している。
そのため、 <a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> を使用してGETリクエストを行おうとすると、業務機能として必要なパラメータに加えて、
このhiddenパラメータがURLに付与されてしまう。
その結果、不要なパラメータが付くことに加えて、URLの長さ制限により正しくリクエストできない可能性がある。</p>
<p>そこで、カスタムタグは、 <a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> でGETが指定された場合、hiddenパラメータを出力しない。
これにより、 <a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> でGETリクエストを使用しても上記問題が発生しないが、
hiddenパラメータが出力されないことで、使用制限のあるカスタムタグや使用不可となるカスタムタグが出てくる。
ここでは、それらのカスタムタグについて対応方法を説明する。</p>
<dl class="docutils">
<dt>使用制限のあるカスタムタグ</dt>
<dd><p class="first">使用制限のあるカスタムタグを以下に示す。</p>
<ul class="simple">
<li><a class="reference internal" href="tag/tag_reference.html#tag-checkbox-tag"><span>checkboxタグ</span></a></li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-code-checkbox-tag"><span>codeCheckboxタグ</span></a></li>
</ul>
<p>これらのカスタムタグは、 <a class="reference internal" href="#tag-checkbox-off-value"><span>チェックなしの場合にリクエストパラメータを設定する機能</span></a> があるが、
<a class="reference internal" href="#tag-hidden-encryption"><span>hidden暗号化</span></a> を使用して処理を行っているため、GETリクエストでは使用できない。</p>
<dl class="last docutils">
<dt>対応方法</dt>
<dd>GETリクエストでチェックボックスを使用した場合のチェックなしの判定は、
<a class="reference internal" href="validation.html#validation"><span>バリデーション</span></a> 後に該当項目の値についてnull判定で行う。
そして、null判定の結果でチェック有無を判断し、アクション側でチェックなしに対する値を設定する。</dd>
</dl>
</dd>
<dt>使用不可となるカスタムタグ</dt>
<dd><p class="first">使用不可となるカスタムタグを以下に示す。</p>
<ul class="simple">
<li><a class="reference internal" href="#tag-using-get-hidden-tag"><span>hiddenタグ</span></a></li>
<li><a class="reference internal" href="#tag-using-get-submit-tag"><span>submitタグ</span></a></li>
<li><a class="reference internal" href="#tag-using-get-button-tag"><span>buttonタグ</span></a></li>
<li><a class="reference internal" href="#tag-using-get-submit-link-tag"><span>submitLinkタグ</span></a></li>
<li><a class="reference internal" href="#tag-using-get-popup-submit-tag"><span>popupSubmitタグ</span></a></li>
<li><a class="reference internal" href="#tag-using-get-popup-button-tag"><span>popupButtonタグ</span></a></li>
<li><a class="reference internal" href="#tag-using-get-popup-link-tag"><span>popupLinkタグ</span></a></li>
<li><a class="reference internal" href="#tag-using-get-param-tag"><span>paramタグ</span></a></li>
<li><a class="reference internal" href="#tag-using-get-change-param-name-tag"><span>changeParamNameタグ</span></a></li>
</ul>
<p>使用不可のタグに対する対応方法と実装例を以下に示す。</p>
<dl class="docutils" id="tag-using-get-hidden-tag">
<dt>hiddenタグ</dt>
<dd><dl class="first last docutils">
<dt>対応方法</dt>
<dd><a class="reference internal" href="tag/tag_reference.html#tag-plain-hidden-tag"><span>plainHiddenタグ</span></a> を使用する。</dd>
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="k">&lt;%-</span><span class="o">-</span> <span class="n">POSTの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;n:hidden</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>

<span class="k">&lt;%-</span><span class="o">-</span> <span class="n">GETの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;n:plainHidden</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
<dl class="docutils" id="tag-using-get-submit-tag">
<dt>submitタグ</dt>
<dd><dl class="first last docutils">
<dt>対応方法</dt>
<dd>HTMLのinputタグ(type=”submit”)を使用する。
サブミット先のURIは <a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> のaction属性に指定する。</dd>
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="k">&lt;%-</span><span class="o">-</span> <span class="n">POSTの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;n:form&gt;</span>
  <span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">uri=</span><span class="s">&quot;search&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>

<span class="k">&lt;%-</span><span class="o">-</span> <span class="n">GETの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;n:form</span> <span class="na">method=</span><span class="s">&quot;GET&quot;</span> <span class="na">action=</span><span class="s">&quot;search&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
<dl class="docutils" id="tag-using-get-button-tag">
<dt>buttonタグ</dt>
<dd><dl class="first last docutils">
<dt>対応方法</dt>
<dd>HTMLのbuttonタグ(type=”submit”)を使用する。
サブミット先のURIは <a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> のaction属性に指定する。</dd>
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="k">&lt;%-</span><span class="o">-</span> <span class="n">POSTの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;n:form&gt;</span>
  <span class="nt">&lt;n:button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">uri=</span><span class="s">&quot;search&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>

<span class="k">&lt;%-</span><span class="o">-</span> <span class="n">GETの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;n:form</span> <span class="na">method=</span><span class="s">&quot;GET&quot;</span> <span class="na">action=</span><span class="s">&quot;search&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
<dl class="docutils" id="tag-using-get-submit-link-tag">
<dt>submitLinkタグ</dt>
<dd><dl class="first last docutils">
<dt>対応方法</dt>
<dd><a class="reference internal" href="tag/tag_reference.html#tag-a-tag"><span>aタグ</span></a> を使用し、onclick属性に画面遷移を行うJavaScript関数を指定する。
画面遷移を行う関数は <a class="reference internal" href="tag/tag_reference.html#tag-script-tag"><span>scriptタグ</span></a> 内に記述する。</dd>
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="k">&lt;%-</span><span class="o">-</span> <span class="n">POSTの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;n:form&gt;</span>
  <span class="nt">&lt;n:text</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;n:submitLink</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">uri=</span><span class="s">&quot;search&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>

<span class="k">&lt;%-</span><span class="o">-</span> <span class="n">GETの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="na">id=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;n:a</span> <span class="na">href=</span><span class="s">&quot;javascript:void(0);&quot;</span> <span class="na">onclick=</span><span class="s">&quot;searchTest();&quot;</span><span class="nt">&gt;</span>検索<span class="nt">&lt;/n:a&gt;</span>
<span class="nt">&lt;n:script</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
  var searchTest = function() {
    var test = document.getElementById(&#39;test&#39;).value;
    location.href = &#39;search?test=&#39; + test;
  }
<span class="nt">&lt;/n:script&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
<dl class="docutils" id="tag-using-get-popup-submit-tag">
<dt>popupSubmitタグ</dt>
<dd><dl class="first last docutils">
<dt>対応方法</dt>
<dd>HTMLのinputタグ(type=”button”)を使用し、onclick属性にJavaScriptのwindow.open()関数を指定する。</dd>
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="k">&lt;%-</span><span class="o">-</span> <span class="n">POSTの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;n:form&gt;</span>
  <span class="nt">&lt;n:popupSubmit</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span> <span class="na">uri=</span><span class="s">&quot;search&quot;</span>
    <span class="na">popupWindowName=</span><span class="s">&quot;popupWindow&quot;</span> <span class="na">popupOption=</span><span class="s">&quot;width=700,height=500&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>

<span class="k">&lt;%-</span><span class="o">-</span> <span class="n">GETの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;n:form</span> <span class="na">method=</span><span class="s">&quot;GET&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span>
    <span class="na">onclick=</span><span class="s">&quot;window.open(&#39;search&#39;, &#39;popupWindow&#39;, &#39;width=700,height=500&#39;)&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
<dl class="docutils" id="tag-using-get-popup-button-tag">
<dt>popupButtonタグ</dt>
<dd><dl class="first last docutils">
<dt>対応方法</dt>
<dd>HTMLのbuttonタグ(type=”submit”)を使用し、onclick属性にJavaScriptのwindow.open()関数を指定する。</dd>
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="k">&lt;%-</span><span class="o">-</span> <span class="n">POSTの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;n:form&gt;</span>
  <span class="nt">&lt;n:popupButton</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span> <span class="na">uri=</span><span class="s">&quot;search&quot;</span>
    <span class="na">popupWindowName=</span><span class="s">&quot;popupWindow&quot;</span> <span class="na">popupOption=</span><span class="s">&quot;width=700,height=500&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>

<span class="k">&lt;%-</span><span class="o">-</span> <span class="n">GETの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;n:form</span> <span class="na">method=</span><span class="s">&quot;GET&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span>
    <span class="na">onclick=</span><span class="s">&quot;window.open(&#39;search&#39;, &#39;popupWindow&#39;, &#39;width=700,height=500&#39;)&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
<dl class="docutils" id="tag-using-get-popup-link-tag">
<dt>popupLinkタグ</dt>
<dd><dl class="first last docutils">
<dt>対応方法</dt>
<dd><a class="reference internal" href="tag/tag_reference.html#tag-a-tag"><span>aタグ</span></a> を使用し、onclick属性にポップアップウィンドウの表示を行うJavaScript関数を指定する。
画面遷移を行う関数は <a class="reference internal" href="tag/tag_reference.html#tag-script-tag"><span>scriptタグ</span></a> 内に記述する。</dd>
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="k">&lt;%-</span><span class="o">-</span> <span class="n">POSTの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;n:form&gt;</span>
  <span class="nt">&lt;n:text</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;n:popupLink</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span> <span class="na">uri=</span><span class="s">&quot;search&quot;</span>
    <span class="na">popupWindowName=</span><span class="s">&quot;popupWindow&quot;</span> <span class="na">popupOption=</span><span class="s">&quot;width=700,height=500&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>

<span class="k">&lt;%-</span><span class="o">-</span> <span class="n">GETの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="na">id=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;n:a</span> <span class="na">href=</span><span class="s">&quot;javascript:void(0);&quot;</span> <span class="na">onclick=</span><span class="s">&quot;openTest();&quot;</span> <span class="nt">&gt;</span>検索<span class="nt">&lt;/n:a&gt;</span>
<span class="nt">&lt;n:script</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
  var openTest = function() {
    var test = document.getElementById(&#39;test&#39;).value;
    window.open(&#39;search?test=&#39; + test,
                &#39;popupWindow&#39;, &#39;width=700,height=500&#39;)
  }
<span class="nt">&lt;/n:script&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
<dl class="docutils" id="tag-using-get-param-tag">
<dt>paramタグ</dt>
<dd><dl class="first last docutils">
<dt>対応方法</dt>
<dd>パラメータを追加したいボタンやリンク毎に <a class="reference internal" href="tag/tag_reference.html#tag-form-tag"><span>formタグ</span></a> を記述し、そのform内にそれぞれパラメータを設定する。</dd>
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="k">&lt;%-</span><span class="o">-</span> <span class="n">POSTの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;n:form&gt;</span>
  <span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">uri=</span><span class="s">&quot;search&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;n:param</span> <span class="na">paramName=</span><span class="s">&quot;changeParam&quot;</span> <span class="na">value=</span><span class="s">&quot;テスト１&quot;</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/n:submit&gt;</span>
  <span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">uri=</span><span class="s">&quot;search&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;n:param</span> <span class="na">paramName=</span><span class="s">&quot;changeParam&quot;</span> <span class="na">value=</span><span class="s">&quot;テスト２&quot;</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/n:submit&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>

<span class="k">&lt;%-</span><span class="o">-</span> <span class="n">GETの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;n:form</span> <span class="na">method=</span><span class="s">&quot;GET&quot;</span> <span class="na">action=</span><span class="s">&quot;search&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;n:set</span> <span class="na">var=</span><span class="s">&quot;test&quot;</span> <span class="na">value=</span><span class="s">&quot;テスト１&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;changeParam&quot;</span> <span class="na">value=</span><span class="s">&quot;&lt;n:write name=&#39;test&#39; /&gt;&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>

<span class="nt">&lt;n:form</span> <span class="na">method=</span><span class="s">&quot;GET&quot;</span> <span class="na">action=</span><span class="s">&quot;search&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;n:set</span> <span class="na">var=</span><span class="s">&quot;test&quot;</span> <span class="na">value=</span><span class="s">&quot;テスト２&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;changeParam&quot;</span> <span class="na">value=</span><span class="s">&quot;&lt;n:write name=&#39;test&#39; /&gt;&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
<dl class="last docutils" id="tag-using-get-change-param-name-tag">
<dt>changeParamNameタグ</dt>
<dd><dl class="first last docutils">
<dt>対応方法</dt>
<dd>基本的な対応方法は <a class="reference internal" href="#tag-using-get-popup-link-tag"><span>popupLinkタグ</span></a> と同じ。
ポップアップウィンドウの表示を行う関数内のwindow.open()の第一引数に、
クエリストリングのキーを変更したいパラメータ名で指定する。</dd>
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="k">&lt;%-</span><span class="o">-</span> <span class="n">POSTの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;n:form&gt;</span>
  <span class="nt">&lt;n:text</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;n:popupSubmit</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span> <span class="na">uri=</span><span class="s">&quot;search&quot;</span>
      <span class="na">popupWindowName=</span><span class="s">&quot;popupWindow&quot;</span> <span class="na">popupOption=</span><span class="s">&quot;width=700,height=500&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;n:changeParamName</span> <span class="na">inputName=</span><span class="s">&quot;test&quot;</span> <span class="na">paramName=</span><span class="s">&quot;changeParam&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/n:popupSubmit&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>

<span class="k">&lt;%-</span><span class="o">-</span> <span class="n">GETの場合</span> <span class="o">--</span><span class="k">%&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;test&quot;</span> <span class="na">id=</span><span class="s">&quot;test&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;検索&quot;</span> <span class="na">onclick=</span><span class="s">&quot;openTest();&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;n:script</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
  var openTest = function() {
    var test = document.getElementById(&#39;test&#39;).value;
    window.open(&#39;search?changeParam=&#39; + test,
                &#39;popupWindow&#39;, &#39;width=700,height=500&#39;);
  }
<span class="nt">&lt;/n:script&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
</div>
<div class="section" id="tag-write-value">
<span id="id23"></span><h3><a class="toc-backref" href="#id68">7.19.4.20. 値を出力する</a><a class="headerlink" href="#tag-write-value" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>値の出力には、 <a class="reference internal" href="tag/tag_reference.html#tag-write-tag"><span>writeタグ</span></a> を使用する。</p>
<p>アクション側でリクエストスコープに設定したオブジェクトに、name属性を指定することでアクセスする。
name属性の指定方法は、 <a class="reference internal" href="#tag-access-rule"><span>入力/出力データへのアクセスルール</span></a> を参照。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><dl class="first last docutils">
<dt>アクション</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="c1">// リクエストスコープに&quot;person&quot;という名前でオブジェクトを設定する。</span>
<span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
<span class="n">person</span><span class="o">.</span><span class="na">setPersonName</span><span class="o">(</span><span class="s">&quot;名前&quot;</span><span class="o">);</span>
<span class="n">context</span><span class="o">.</span><span class="na">setRequestScopedVar</span><span class="o">(</span><span class="s">&quot;person&quot;</span><span class="o">,</span> <span class="n">person</span><span class="o">);</span>
</pre></div>
</div>
</dd>
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- name属性を指定してオブジェクトのpersonNameプロパティにアクセスする。 --&gt;</span>
<span class="nt">&lt;n:write</span> <span class="na">name=</span><span class="s">&quot;person.personName&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
</div>
<div class="section" id="tag-html-unescape">
<span id="id24"></span><h3><a class="toc-backref" href="#id69">7.19.4.21. HTMLエスケープせずに値を出力する</a><a class="headerlink" href="#tag-html-unescape" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>アクションなどで設定された値をページ上に出力する場合、 <a class="reference internal" href="tag/tag_reference.html#tag-write-tag"><span>writeタグ</span></a> を使用するが、
HTMLエスケープを行わず、変数内のHTMLタグを直接出力したい場合は、以下のカスタムタグを使用する。</p>
<ul class="simple">
<li><a class="reference internal" href="#tag-html-unescape-pretty-print-tag"><span>prettyPrintタグ</span></a></li>
<li><a class="reference internal" href="#tag-html-unescape-raw-write-tag"><span>rawWriteタグ</span></a></li>
</ul>
<p>これらのカスタムタグは、システム管理者がメンテナンス情報を設定できるようなシステムで、
特定の画面や表示領域のみで使用することを想定している。</p>
<dl class="docutils" id="tag-html-unescape-pretty-print-tag">
<dt><a class="reference internal" href="tag/tag_reference.html#tag-pretty-print-tag"><span>prettyPrintタグ</span></a></dt>
<dd><p class="first"><code class="docutils literal"><span class="pre">&lt;b&gt;</span></code> や <code class="docutils literal"><span class="pre">&lt;del&gt;</span></code> のような装飾系のHTMLタグをエスケープせずに出力するカスタムタグ。
使用可能なHTMLタグ及び属性は、 <a class="reference internal" href="#tag-setting"><span>カスタムタグの設定を行う</span></a> で
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html#setSafeTags-java.lang.String:A-" title="nablarch.common.web.tag.CustomTagConfig.setSafeTags(java.lang.String:A)">safeTagsプロパティ</a> /
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html#setSafeAttributes-java.lang.String:A-" title="nablarch.common.web.tag.CustomTagConfig.setSafeAttributes(java.lang.String:A)">safeAttributesプロパティ</a>
で任意に設定することができる。
デフォルトで使用可能なタグ、属性はリンク先を参照。</p>
<blockquote>
<div></div></blockquote>
<div class="admonition important" id="tag-pretty-print-tag-deprecated">
<p class="first admonition-title">重要</p>
<p>このタグは以下の問題があるため非推奨とする。</p>
<ul class="simple">
<li>使用可能なタグだけでなく、そのタグで使用する属性も含めて全て <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html" title="nablarch.common.web.tag.CustomTagConfig">CustomTagConfig</a> に設定しなければならない。
例えば、<code class="docutils literal"><span class="pre">a</span></code> タグを使用可能にしたい場合は <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html#setSafeTags-java.lang.String:A-" title="nablarch.common.web.tag.CustomTagConfig.setSafeTags(java.lang.String:A)">CustomTagConfig#safeTags</a> に <code class="docutils literal"><span class="pre">a</span></code> タグを追加するだけではなく、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html#setSafeAttributes-java.lang.String:A-" title="nablarch.common.web.tag.CustomTagConfig.setSafeAttributes(java.lang.String:A)">CustomTagConfig#safeAttributes</a> にも、<code class="docutils literal"><span class="pre">href</span></code> などの <code class="docutils literal"><span class="pre">a</span></code> タグで使用する属性を全て定義しなくてはならない。</li>
<li>入力された文字列が <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html" title="nablarch.common.web.tag.CustomTagConfig">CustomTagConfig</a>
に設定したタグ、属性のみを使用しているかのチェックしか行っておらず、HTMLとして正しいかどうかをチェックしていない。</li>
</ul>
<p>そのため、利用者が任意の装飾を施した文字列を画面に出力するような機能を実現したい場合は、
以下の手順を参考にPJの要件に合わせて実装を行うこと。</p>
<ol class="arabic simple">
<li>OSSのHTMLパーサを使用して入力された値をパースし、使用できないHTMLタグが含まれていないかをバリデーションする</li>
<li><a class="reference internal" href="#tag-html-unescape-raw-write-tag"><span>rawWriteタグ</span></a> を使用して画面に出力する</li>
</ol>
<p class="last">また、簡易的な装飾であれば、利用者にはMarkdownで入力してもらい、
OSSのJavaScriptライブラリを使用してクライアントサイドでMarkdownからHTMLに変換する方法もある。</p>
</div>
<div class="last admonition important">
<p class="first admonition-title">重要</p>
<p class="last"><a class="reference internal" href="tag/tag_reference.html#tag-pretty-print-tag"><span>prettyPrintタグ</span></a> で出力する変数の内容が、不特定のユーザによって任意に設定できるものであった場合、
脆弱性の要因となる可能性があるため、使用可能なHTMLタグ及び属性を設定する場合は、その選択に十分に留意すること。
例えば、&lt;script&gt;タグやonclick属性を使用可能とした場合、クロスサイトスクリプティング(XSS)脆弱性の直接要因となるため、
これらのタグや属性を使用可能としないこと。</p>
</div>
</dd>
</dl>
<dl class="docutils" id="tag-html-unescape-raw-write-tag">
<dt><a class="reference internal" href="tag/tag_reference.html#tag-raw-write-tag"><span>rawWriteタグ</span></a></dt>
<dd><p class="first">変数中の文字列の内容をエスケープせずにそのまま出力するカスタムタグ。</p>
<div class="last admonition important">
<p class="first admonition-title">重要</p>
<p class="last"><a class="reference internal" href="tag/tag_reference.html#tag-raw-write-tag"><span>rawWriteタグ</span></a> で出力する変数の内容が、不特定のユーザによって任意に設定できるものであった場合、
クロスサイトスクリプティング(XSS)脆弱性の直接の要因となる。
そのため、 <a class="reference internal" href="tag/tag_reference.html#tag-raw-write-tag"><span>rawWriteタグ</span></a> の使用には十分な考慮が必要である。</p>
</div>
</dd>
</dl>
</div>
<div class="section" id="tag-format-value">
<span id="id25"></span><h3><a class="toc-backref" href="#id70">7.19.4.22. フォーマットして値を出力する</a><a class="headerlink" href="#tag-format-value" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>カスタムタグでは、日付や金額などの値を人が見やすい形式にフォーマットして出力する機能を提供する。</p>
<p><a class="reference internal" href="format.html#format"><span>フォーマッタ</span></a> を使用してフォーマットする方法と、valueFormat属性を使用してフォーマットする2種類の方法が存在する。
以下の理由から、 <a class="reference internal" href="format.html#format"><span>フォーマッタ</span></a> を使用してフォーマットする方法を推奨する。</p>
<blockquote>
<div><ul class="simple">
<li><a class="reference internal" href="format.html#format"><span>フォーマッタ</span></a> を使用してフォーマットする方法は、ファイル出力やメッセージングなどの他の出力機能でのフォーマット処理と共通の部品を使用するため、設定が1箇所に集約できる。
また、使用できるタグに制限がない。</li>
<li>valueFormat属性でフォーマットする方法は、カスタムタグが独自で実装しておりカスタムタグのみでしか使用できないため、
他の出力機能でフォーマットをしたい場合は別途設定が必要となる。
そのため、フォーマットに関する設定が複数箇所に存在することとなり、管理が煩雑になる。
また、valueFormat属性は使用できるタグが <a class="reference internal" href="tag/tag_reference.html#tag-write-tag"><span>writeタグ</span></a> と <a class="reference internal" href="tag/tag_reference.html#tag-text-tag"><span>textタグ</span></a> に限定される。</li>
</ul>
</div></blockquote>
<dl class="docutils">
<dt><a class="reference internal" href="format.html#format"><span>フォーマッタ</span></a></dt>
<dd><p class="first"><a class="reference internal" href="format.html#format"><span>フォーマッタ</span></a> を使用する場合は、EL式内で <code class="docutils literal"><span class="pre">n:formatByDefault</span></code> または <code class="docutils literal"><span class="pre">n:format</span></code> を使用して、フォーマットした文字列をvalue属性に設定する。</p>
<p>EL式は、JSP上で簡単な記述で演算結果を出力できる記述方法である。 <code class="docutils literal"><span class="pre">${&lt;評価したい式&gt;}</span></code> と記述することで、評価結果がそのまま出力される。</p>
<p><code class="docutils literal"><span class="pre">n:formatByDefault</span></code> 及び <code class="docutils literal"><span class="pre">n:format</span></code> をEL式内で使用することで、 <a class="reference internal" href="format.html#format"><span>フォーマッタ</span></a> の <code class="docutils literal"><span class="pre">FormatterUtil</span></code> を呼び出して値をフォーマットすることができる。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><div class="first last highlight-html"><div class="highlight"><pre><span></span><span class="c">&lt;!-- フォーマッタのデフォルトのパターンでフォーマットする場合</span>
<span class="c">  第一引数に使用するフォーマッタ名を指定する</span>
<span class="c">  第二引数にフォーマット対象の値を指定する</span>
<span class="c">  value属性にEL式で n:formatByDefault の呼び出しを記述する --&gt;</span>
<span class="p">&lt;</span><span class="nt">n:write</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;${n:formatByDefault(&#39;dateTime&#39;, project.StartDate)}&quot;</span> <span class="p">/&gt;</span>

<span class="c">&lt;!-- 指定したパターンでフォーマットする場合</span>
<span class="c">  第一引数に使用するフォーマッタ名を指定する</span>
<span class="c">  第二引数にフォーマット対象の値を指定する</span>
<span class="c">  第三引数にフォーマットのパターンを指定する</span>
<span class="c">  value属性にEL式で n:format の呼び出しを記述する --&gt;</span>
<span class="p">&lt;</span><span class="nt">n:text</span> <span class="na">name</span><span class="o">=</span><span class="s">&quot;project.StartDate&quot;</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;${n:format(&#39;dateTime&#39;, project.StartDate, &#39;yyyy年MM月dd日&#39;)}&quot;</span> <span class="p">/&gt;</span>
</pre></div>
</div>
</dd>
</dl>
<div class="last admonition important">
<p class="first admonition-title">重要</p>
<p>EL式では、リクエストパラメータを参照できない。
そのため、 <a class="reference internal" href="validation/bean_validation.html#bean-validation"><span>Bean Validation</span></a> を使用してウェブアプリケーションのユーザ入力値のチェックを行う場合は
以下の設定をすること。</p>
<p><a class="reference internal" href="validation/bean_validation.html#bean-validation-onerror"><span>バリデーションエラー時にもリクエストパラメータをリクエストスコープから取得したい</span></a></p>
<p>上記の設定が使用できない場合は、 <code class="docutils literal"><span class="pre">n:set</span></code> を使用して、値をリクエストパラメータから取り出してページスコープにセットしてから出力すること。</p>
<p>実装例</p>
<div class="last highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;n:set</span> <span class="na">var=</span><span class="s">&quot;projectEndDate&quot;</span> <span class="na">name=</span><span class="s">&quot;form.projectEndDate&quot;</span> <span class="na">scope=</span><span class="s">&quot;page&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;n:text</span> <span class="na">name=</span><span class="s">&quot;form.projectEndDate&quot;</span> <span class="na">nameAlias=</span><span class="s">&quot;form.date&quot;</span>
  <span class="na">value=</span><span class="s">&quot;${n:formatByDefault(&#39;dateTime&#39;, projectEndDate)}&quot;</span>
  <span class="na">cssClass=</span><span class="s">&quot;form-control datepicker&quot;</span> <span class="na">errorCss=</span><span class="s">&quot;input-error&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</div>
</dd>
<dt>valueFormat属性</dt>
<dd><p class="first">valueFormat属性を指定することでフォーマット出力を行う。valueFormat属性の指定がない場合は、フォーマットせずに値を出力する。
使用できるタグは、<a class="reference internal" href="tag/tag_reference.html#tag-write-tag"><span>writeタグ</span></a> と <a class="reference internal" href="tag/tag_reference.html#tag-text-tag"><span>textタグ</span></a> のみである。</p>
<p>フォーマットは、 <code class="docutils literal"><span class="pre">データタイプ{パターン}</span></code> 形式で指定する。
カスタムタグでデフォルトで提供しているデータタイプを以下に示す。</p>
<ul class="simple">
<li><a class="reference internal" href="#tag-format-yyyymmdd"><span>yyyymmdd (年月日)</span></a></li>
<li><a class="reference internal" href="#tag-format-yyyymm"><span>yyyymm (年月)</span></a></li>
<li><a class="reference internal" href="#tag-format-datetime"><span>dateTime (日時)</span></a></li>
<li><a class="reference internal" href="#tag-format-decimal"><span>decimal (10進数)</span></a></li>
</ul>
<dl class="docutils" id="tag-format-yyyymmdd">
<dt>yyyymmdd</dt>
<dd><p class="first">年月日のフォーマット。</p>
<p>値はyyyyMMdd形式またはパターン形式の文字列を指定する。
パターンには <a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html" title="java.text.SimpleDateFormat">SimpleDateFormat</a> が規定している構文を指定する。
パターン文字には、y(年)、M(月)、d(月における日)のみ指定可能。
パターン文字列を省略した場合は、 <a class="reference internal" href="#tag-setting"><span>カスタムタグの設定を行う</span></a> (yyyymmddPatternプロパティ)に設定されたデフォルトのパターンを使用する。</p>
<p>また、パターンの後に区切り文字 <code class="docutils literal"><span class="pre">|</span></code> を使用してフォーマットのロケールを指定できる。
ロケールを明示的に指定しない場合は、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/ThreadContext.html" title="nablarch.core.ThreadContext">ThreadContext</a> の言語を使用する。
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/ThreadContext.html" title="nablarch.core.ThreadContext">ThreadContext</a> が設定されていない場合は、
システムデフォルトロケール値を使用する。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><div class="first last highlight-properties"><div class="highlight"><pre><span></span><span class="c"># デフォルトのパターンとスレッドコンテキストに設定されたロケールを使用する。</span>
<span class="na">valueFormat</span><span class="o">=</span><span class="s">&quot;yyyymmdd&quot;</span>

<span class="c"># 明示的に指定されたパターンと、スレッドコンテキストに設定されたロケールを使用する。</span>
<span class="na">valueFormat</span><span class="o">=</span><span class="s">&quot;yyyymmdd{yyyy/MM/dd}&quot;</span>

<span class="c"># デフォルトのパターンを使用し、ロケールのみ指定する場合。</span>
<span class="na">valueFormat</span><span class="o">=</span><span class="s">&quot;yyyymmdd{|ja}&quot;</span>

<span class="c"># パターン、ロケールの両方を明示的に指定する場合。</span>
<span class="na">valueFormat</span><span class="o">=</span><span class="s">&quot;yyyymmdd{yyyy年MM月d日|ja}&quot;</span>
</pre></div>
</div>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p><a class="reference internal" href="tag/tag_reference.html#tag-text-tag"><span>textタグ</span></a> のvalueFormat属性を指定した場合、
入力画面にもフォーマットした値が出力される。
入力された年月日をアクションで取得する場合は、 <a class="reference internal" href="#tag-window-scope"><span>ウィンドウスコープ</span></a> および
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/date/YYYYMMDDConvertor.html" title="nablarch.common.date.YYYYMMDDConvertor">Nablarch独自のバリデーションが提供する年月日コンバータ</a>
を使用する。
<a class="reference internal" href="tag/tag_reference.html#tag-text-tag"><span>textタグ</span></a> と <a class="reference internal" href="#tag-window-scope"><span>ウィンドウスコープ</span></a> 、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/date/YYYYMMDDConvertor.html" title="nablarch.common.date.YYYYMMDDConvertor">年月日コンバータ</a>
が連携し、valueFormat属性に指定されたパターンを使用した値変換とバリデーションを行う。</p>
<p class="last">なお、 <a class="reference internal" href="validation/bean_validation.html#bean-validation"><span>Bean Validation</span></a> は <a class="reference internal" href="tag/tag_reference.html#tag-text-tag"><span>textタグ</span></a> のvalueFormat属性に対応していない。</p>
</div>
<div class="last admonition important">
<p class="first admonition-title">重要</p>
<p class="last"><a class="reference internal" href="#tag-window-scope"><span>ウィンドウスコープ</span></a> を使用しない場合は、 <a class="reference internal" href="tag/tag_reference.html#tag-text-tag"><span>textタグ</span></a> のvalueFormat属性を指定しても
valueFormat属性の値がサーバサイドに送信されないためバリデーションエラーが発生してしまう。
その場合は <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/date/YYYYMMDD.html" title="nablarch.common.date.YYYYMMDD">YYYYMMDD</a> アノテーションのallowFormat属性を指定することで、
入力値のチェックを行うことができる。</p>
</div>
</dd>
</dl>
<dl class="docutils" id="tag-format-yyyymm">
<dt>yyyymm</dt>
<dd><p class="first">年月のフォーマット。</p>
<p class="last">値はyyyyMM形式またはパターン形式の文字列を指定する。
使用方法は、 <a class="reference internal" href="#tag-format-yyyymmdd"><span>yyyymmdd (年月日)</span></a> と同じ。</p>
</dd>
</dl>
<dl class="docutils" id="tag-format-datetime">
<dt>dateTime</dt>
<dd><p class="first">日時のフォーマット。</p>
<p>値は <a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/java/util/Date.html" title="java.util.Date">Date</a> 型を指定する。
パターンには
<a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html" title="java.text.SimpleDateFormat">SimpleDateFormat</a>
が規定している構文を指定する。
デフォルトでは、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/ThreadContext.html" title="nablarch.core.ThreadContext">ThreadContext</a> に設定された
言語とタイムゾーンに応じた日時が出力される。
また、パターン文字列の後に区切り文字 <code class="docutils literal"><span class="pre">|</span></code> を使用してロケールおよびタイムゾーンを明示的に指定することができる。</p>
<p><a class="reference internal" href="#tag-setting"><span>カスタムタグの設定を行う</span></a> (dateTimePatternプロパティ、patternSeparatorプロパティ)を使用して、
パターンのデフォルト値の設定と、区切り文字 <code class="docutils literal"><span class="pre">|</span></code> の変更を行うことができる。</p>
<dl class="last docutils">
<dt>実装例</dt>
<dd><div class="first last highlight-properties"><div class="highlight"><pre><span></span><span class="c"># デフォルトのパターンとThreadContextに設定されたロケール、タイムゾーンを使用する場合。</span>
<span class="na">valueFormat</span><span class="o">=</span><span class="s">&quot;dateTime&quot;</span>

<span class="c">#デフォルトのパターンを使用し、ロケールおよびタイムゾーンのみ指定する場合。</span>
<span class="na">valueFormat</span><span class="o">=</span><span class="s">&quot;dateTime{|ja|Asia/Tokyo}&quot;</span>

<span class="c"># デフォルトのパターンを使用し、タイムゾーンのみ指定する場合。</span>
<span class="na">valueFormat</span><span class="o">=</span><span class="s">&quot;dateTime{||Asia/Tokyo}&quot;</span>

<span class="c"># パターン、ロケール、タイムゾーンを全て指定する場合。</span>
<span class="na">valueFormat</span><span class="o">=</span><span class="s">&quot;dateTime{yyyy年MMM月d日(E) a hh:mm|ja|America/New_York}}&quot;</span>

<span class="c"># パターンとタイムゾーンを指定する場合。</span>
<span class="na">valueFormat</span><span class="o">=</span><span class="s">&quot;dateTime{yy/MM/dd HH:mm:ss||Asia/Tokyo}&quot;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
<dl class="last docutils" id="tag-format-decimal">
<dt>decimal</dt>
<dd><p class="first">10進数のフォーマット。</p>
<p>値は <a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/java/lang/Number.html" title="java.lang.Number">Number</a> 型又は数字の文字列を指定する。
文字列の場合、3桁ごとの区切り文字(1,000,000のカンマ)を取り除いた後でフォーマットされる。
パターンには <a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html" title="java.text.DecimalFormat">DecimalFormat</a> が規定している構文を指定する。</p>
<p>デフォルトでは、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/ThreadContext.html" title="nablarch.core.ThreadContext">ThreadContext</a> に設定された言語を使用して、
言語に応じた形式で値が出力される。
言語を直接指定することで、指定された言語に応じた形式で値を出力することもできる。
言語の指定は、パターンの末尾に区切り文字 <code class="docutils literal"><span class="pre">|</span></code> を使用して言語を付加することで行う。</p>
<p><a class="reference internal" href="#tag-setting"><span>カスタムタグの設定を行う</span></a> (patternSeparatorプロパティ)を使用して、区切り文字 <code class="docutils literal"><span class="pre">|</span></code> の変更を行うことができる。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><div class="first last highlight-properties"><div class="highlight"><pre><span></span><span class="c"># ThreadContextに設定された言語を使用し、パターンのみ指定する場合。</span>
<span class="na">valueFormat</span><span class="o">=</span><span class="s">&quot;decimal{###,###,###.000}&quot;</span>

<span class="c"># パターンと言語を指定する場合。</span>
<span class="na">valueFormat</span><span class="o">=</span><span class="s">&quot;decimal{###,###,###.000|ja}&quot;</span>
</pre></div>
</div>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p>本機能では値のフォーマットのみを行うため、丸め動作の設定は行わない。(<a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html" title="java.text.DecimalFormat">DecimalFormat</a> のデフォルトが使用される。)</p>
<p class="last">丸め処理を行いたい場合には、アプリケーション側で処理を行い、本機能を用いてフォーマット処理を行うこと。</p>
</div>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p><a class="reference internal" href="tag/tag_reference.html#tag-text-tag"><span>textタグ</span></a> のvalueFormat属性を指定した場合、入力画面にもフォーマットした値が出力される。
入力された数値をアクションで取得する場合は数値コンバータ(
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/convertor/BigDecimalConvertor.html" title="nablarch.core.validation.convertor.BigDecimalConvertor">BigDecimalConvertor</a> 、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/convertor/IntegerConvertor.html" title="nablarch.core.validation.convertor.IntegerConvertor">IntegerConvertor</a> 、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/convertor/LongConvertor.html" title="nablarch.core.validation.convertor.LongConvertor">LongConvertor</a>
)を使用する。
<a class="reference internal" href="tag/tag_reference.html#tag-text-tag"><span>textタグ</span></a> と数値コンバータが連携し、valueFormat属性に指定された言語に対応する値変換とバリデーションを行う。</p>
<p class="last">なお、 <a class="reference internal" href="validation/bean_validation.html#bean-validation"><span>Bean Validation</span></a> は <a class="reference internal" href="tag/tag_reference.html#tag-text-tag"><span>textタグ</span></a> のvalueFormat属性に対応していない。</p>
</div>
<div class="last admonition tip">
<p class="first admonition-title">補足</p>
<p>パターンに桁区切りと小数点を指定する場合は、言語に関係なく常に桁区切りにカンマ、小数点にドットを使用すること。</p>
<div class="last highlight-properties"><div class="highlight"><pre><span></span><span class="c"># es(スペイン語)の場合は、桁区切りがドット、小数点がカンマにフォーマットされる。</span>
<span class="c"># パターン指定では常に桁区切りにカンマ、小数点にドットを指定する。</span>
<span class="na">valueFormat</span><span class="o">=</span><span class="s">&quot;decimal{###,###,###.000|es}&quot;</span>

<span class="c"># 下記は不正なパターン指定のため実行時例外がスローされる。</span>
<span class="na">valueFormat</span><span class="o">=</span><span class="s">&quot;decimal{###.###.###,000|es}&quot;</span>
</pre></div>
</div>
</div>
</dd>
</dl>
</dd>
</dl>
</div>
<div class="section" id="tag-write-error">
<span id="id26"></span><h3><a class="toc-backref" href="#id71">7.19.4.23. エラー表示を行う</a><a class="headerlink" href="#tag-write-error" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>エラー表示では、以下の機能を提供する。</p>
<ul class="simple">
<li><a class="reference internal" href="#tag-write-error-errors-tag"><span>エラーメッセージの一覧表示</span></a></li>
<li><a class="reference internal" href="#tag-write-error-error-tag"><span>エラーメッセージの個別表示</span></a></li>
<li><a class="reference internal" href="#tag-write-error-css"><span>入力項目のハイライト表示</span></a></li>
</ul>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">エラー表示に使用するカスタムタグでは、リクエストスコープから
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/message/ApplicationException.html" title="nablarch.core.message.ApplicationException">ApplicationException</a>
を取得してエラーメッセージを出力する。
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/message/ApplicationException.html" title="nablarch.core.message.ApplicationException">ApplicationException</a> は、
<a class="reference internal" href="../handlers/web_interceptor/on_error.html#on-error-interceptor"><span>OnErrorインターセプター</span></a> を使用して、リクエストスコープに設定する。</p>
</div>
<dl class="docutils" id="tag-write-error-errors-tag">
<dt>エラーメッセージの一覧表示</dt>
<dd><p class="first">画面上部にエラーメッセージを一覧表示する場合に <a class="reference internal" href="tag/tag_reference.html#tag-errors-tag"><span>errorsタグ</span></a> を使用する。</p>
<dl class="last docutils">
<dt>すべてのエラーメッセージを表示する場合</dt>
<dd><p class="first"></p>
<dl class="last docutils">
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- filter属性に&quot;all&quot;を指定する。 --&gt;</span>
<span class="nt">&lt;n:errors</span> <span class="na">filter=</span><span class="s">&quot;all&quot;</span> <span class="na">errorCss=</span><span class="s">&quot;alert alert-danger&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
<dt>出力結果</dt>
<dd><img alt="../../../_images/errors_all.png" class="first last" src="../../../_images/errors_all.png" />
</dd>
</dl>
</dd>
<dt>入力項目に対応しないエラーメッセージのみを表示する場合</dt>
<dd><p class="first"></p>
<dl class="last docutils">
<dt>実装例</dt>
<dd><dl class="first last docutils">
<dt>アクション</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="c1">// データベースとの相関バリデーションなどで、ApplicationExceptionを送出する。</span>
<span class="k">throw</span> <span class="k">new</span> <span class="n">ApplicationException</span><span class="o">(</span>
  <span class="n">MessageUtil</span><span class="o">.</span><span class="na">createMessage</span><span class="o">(</span><span class="n">MessageLevel</span><span class="o">.</span><span class="na">ERROR</span><span class="o">,</span> <span class="s">&quot;errors.duplicateName&quot;</span><span class="o">));</span>
</pre></div>
</div>
</dd>
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- filter属性に&quot;global&quot;を指定する。 --&gt;</span>
<span class="nt">&lt;n:errors</span> <span class="na">filter=</span><span class="s">&quot;global&quot;</span> <span class="na">errorCss=</span><span class="s">&quot;alert alert-danger&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>出力結果</dt>
<dd><img alt="../../../_images/errors_global.png" class="first last" src="../../../_images/errors_global.png" />
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
<dl class="docutils" id="tag-write-error-error-tag">
<dt>エラーメッセージの個別表示</dt>
<dd><p class="first">入力項目ごとにエラーメッセージを表示する場合に <a class="reference internal" href="tag/tag_reference.html#tag-error-tag"><span>errorタグ</span></a> を使用する。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;div&gt;</span>
  <span class="nt">&lt;label&gt;</span>名前<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;n:text</span> <span class="na">name=</span><span class="s">&quot;form.userName&quot;</span> <span class="nt">/&gt;</span>
  <span class="c">&lt;!-- 入力項目と同じ名前をname属性に指定する。 --&gt;</span>
  <span class="nt">&lt;n:error</span> <span class="na">name=</span><span class="s">&quot;form.userName&quot;</span> <span class="na">messageFormat=</span><span class="s">&quot;span&quot;</span> <span class="na">errorCss=</span><span class="s">&quot;alert alert-danger&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>
</dd>
<dt>出力結果</dt>
<dd><img alt="../../../_images/error.png" class="first last" src="../../../_images/error.png" />
</dd>
</dl>
<p><a class="reference internal" href="validation/bean_validation.html#bean-validation-correlation-validation"><span>相関バリデーションを行う</span></a> のエラーメッセージを特定の項目の近くに表示したい場合も、
<a class="reference internal" href="tag/tag_reference.html#tag-error-tag"><span>errorタグ</span></a> を使用する。</p>
<dl class="last docutils">
<dt>実装例</dt>
<dd><dl class="first last docutils">
<dt>フォーム</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="c1">// 相関バリデーションを行うメソッド</span>
<span class="c1">// このプロパティ名でエラーメッセージが設定される。</span>
<span class="nd">@AssertTrue</span><span class="o">(</span><span class="n">message</span> <span class="o">=</span> <span class="s">&quot;パスワードが一致しません。&quot;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isComparePassword</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">password</span><span class="o">,</span> <span class="n">confirmPassword</span><span class="o">);</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;div&gt;</span>
  <span class="nt">&lt;label&gt;</span>パスワード<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;n:password</span> <span class="na">name=</span><span class="s">&quot;form.password&quot;</span> <span class="na">nameAlias=</span><span class="s">&quot;form.comparePassword&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;n:error</span> <span class="na">name=</span><span class="s">&quot;form.password&quot;</span> <span class="na">messageFormat=</span><span class="s">&quot;span&quot;</span> <span class="na">errorCss=</span><span class="s">&quot;alert alert-danger&quot;</span> <span class="nt">/&gt;</span>
  <span class="c">&lt;!--</span>
<span class="c">    相関バリデーションで指定されるプロパティ名をname属性に指定する。</span>
<span class="c">  --&gt;</span>
  <span class="nt">&lt;n:error</span> <span class="na">name=</span><span class="s">&quot;form.comparePassword&quot;</span> <span class="na">messageFormat=</span><span class="s">&quot;span&quot;</span> <span class="na">errorCss=</span><span class="s">&quot;alert alert-danger&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div&gt;</span>
  <span class="nt">&lt;label&gt;</span>パスワード(確認用)<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;n:password</span> <span class="na">name=</span><span class="s">&quot;form.confirmPassword&quot;</span> <span class="na">nameAlias=</span><span class="s">&quot;form.comparePassword&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;n:error</span> <span class="na">name=</span><span class="s">&quot;form.confirmPassword&quot;</span> <span class="na">messageFormat=</span><span class="s">&quot;span&quot;</span> <span class="na">errorCss=</span><span class="s">&quot;alert alert-danger&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>出力結果</dt>
<dd><img alt="../../../_images/error_correlation_validation.png" class="first last" src="../../../_images/error_correlation_validation.png" />
</dd>
</dl>
</dd>
</dl>
<dl class="docutils" id="tag-write-error-css">
<dt>入力項目のハイライト表示</dt>
<dd><p class="first">入力項目のカスタムタグは、エラーの原因となった入力項目のclass属性に、
元の値に対してCSSクラス名(デフォルトは”nablarch_error”)を追記する。</p>
<p>このクラス名にCSSでスタイルを指定することで、エラーがあった入力項目をハイライト表示する。</p>
<p>さらに、入力項目のカスタムタグでnameAlias属性を指定することで、
複数の入力項目を紐付け、
<a class="reference internal" href="validation/bean_validation.html#bean-validation-correlation-validation"><span>相関バリデーションを行う</span></a> でエラーとなった場合に、
複数の入力項目をハイライト表示できる。</p>
<dl class="last docutils">
<dt>実装例</dt>
<dd><dl class="first last docutils">
<dt>CSS</dt>
<dd><div class="first last highlight-css"><div class="highlight"><pre><span></span><span class="c">/* エラーがあった場合の入力項目の背景色を指定する。 */</span>
<span class="nt">input</span><span class="p">.</span><span class="nc">nablarch_error</span><span class="o">,</span><span class="nt">select</span><span class="p">.</span><span class="nc">nablarch_error</span> <span class="p">{</span>
  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#FFFFB3</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
</dd>
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;div&gt;</span>
  <span class="nt">&lt;label&gt;</span>パスワード<span class="nt">&lt;/label&gt;</span>
  <span class="c">&lt;!-- nameAlias属性に相関バリデーションのプロパティ名を指定する。 --&gt;</span>
  <span class="nt">&lt;n:password</span> <span class="na">name=</span><span class="s">&quot;form.password&quot;</span> <span class="na">nameAlias=</span><span class="s">&quot;form.comparePassword&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;n:error</span> <span class="na">name=</span><span class="s">&quot;form.password&quot;</span> <span class="na">messageFormat=</span><span class="s">&quot;span&quot;</span> <span class="na">errorCss=</span><span class="s">&quot;alert alert-danger&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;n:error</span> <span class="na">name=</span><span class="s">&quot;form.comparePassword&quot;</span> <span class="na">messageFormat=</span><span class="s">&quot;span&quot;</span> <span class="na">errorCss=</span><span class="s">&quot;alert alert-danger&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div&gt;</span>
  <span class="nt">&lt;label&gt;</span>パスワード(確認用)<span class="nt">&lt;/label&gt;</span>
  <span class="c">&lt;!-- nameAlias属性に相関バリデーションのプロパティ名を指定する。 --&gt;</span>
  <span class="nt">&lt;n:password</span> <span class="na">name=</span><span class="s">&quot;form.confirmPassword&quot;</span> <span class="na">nameAlias=</span><span class="s">&quot;form.comparePassword&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;n:error</span> <span class="na">name=</span><span class="s">&quot;form.confirmPassword&quot;</span> <span class="na">messageFormat=</span><span class="s">&quot;span&quot;</span> <span class="na">errorCss=</span><span class="s">&quot;alert alert-danger&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>出力結果</dt>
<dd><img alt="../../../_images/error_css.png" class="first last" src="../../../_images/error_css.png" />
</dd>
</dl>
</dd>
</dl>
</div>
<div class="section" id="tag-code-input-output">
<span id="id27"></span><h3><a class="toc-backref" href="#id72">7.19.4.24. コード値を表示する</a><a class="headerlink" href="#tag-code-input-output" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>カスタムタグでは、 <a class="reference internal" href="code.html#code"><span>コード管理</span></a> から取得したコード値の選択項目や表示項目を出力する
コード値専用のカスタムタグを提供する。</p>
<ul class="simple">
<li><a class="reference internal" href="tag/tag_reference.html#tag-code-tag"><span>codeタグ</span></a> (コード値)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-code-select-tag"><span>codeSelectタグ</span></a> (コード値のプルダウン)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-code-checkbox-tag"><span>codeCheckboxタグ</span></a> (コード値のチェックボックス)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-code-radio-buttons-tag"><span>codeRadioButtonsタグ</span></a> (コード値の複数のラジオボタン)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-code-checkboxes-tag"><span>codeCheckboxesタグ</span></a> (コード値の複数のチェックボックス)</li>
</ul>
<p><a class="reference internal" href="tag/tag_reference.html#tag-code-tag"><span>codeタグ</span></a> と <a class="reference internal" href="tag/tag_reference.html#tag-code-select-tag"><span>codeSelectタグ</span></a> の実装例を示す。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first"><a class="reference internal" href="code.html#code"><span>コード管理</span></a> のテーブルは以下とする。</p>
<dl class="last docutils">
<dt>コードパターンテーブル</dt>
<dd><table border="1" class="first last docutils">
<colgroup>
<col width="20%" />
<col width="26%" />
<col width="23%" />
<col width="31%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">ID</th>
<th class="head">VALUE</th>
<th class="head">PATTERN1</th>
<th class="head">PATTERN2</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>GENDER</td>
<td>MALE</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="row-odd"><td>GENDER</td>
<td>FEMALE</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="row-even"><td>GENDER</td>
<td>OTHER</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
</dd>
<dt>コード名称テーブル</dt>
<dd><table border="1" class="first last docutils">
<colgroup>
<col width="14%" />
<col width="18%" />
<col width="8%" />
<col width="20%" />
<col width="20%" />
<col width="22%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">ID</th>
<th class="head">VALUE</th>
<th class="head">LANG</th>
<th class="head">SORT_ORDER</th>
<th class="head">NAME</th>
<th class="head">SHORT_NAME</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>GENDER</td>
<td>MALE</td>
<td>ja</td>
<td>1</td>
<td>男性</td>
<td>男</td>
</tr>
<tr class="row-odd"><td>GENDER</td>
<td>FEMALE</td>
<td>ja</td>
<td>2</td>
<td>女性</td>
<td>女</td>
</tr>
<tr class="row-even"><td>GENDER</td>
<td>OTHER</td>
<td>ja</td>
<td>3</td>
<td>その他</td>
<td>他</td>
</tr>
</tbody>
</table>
</dd>
<dt><a class="reference internal" href="tag/tag_reference.html#tag-code-tag"><span>codeタグ</span></a> (コード値)</dt>
<dd><dl class="first last docutils">
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!--</span>
<span class="c">  以下の属性指定により、コード値の出力を制御する。</span>
<span class="c">  codeId属性: コードID。</span>
<span class="c">  pattern属性: 使用するパターンのカラム名。</span>
<span class="c">               デフォルトは指定なし。</span>
<span class="c">  optionColumnName属性: 取得するオプション名称のカラム名。</span>
<span class="c">  labelPattern属性: ラベルを整形するパターン。</span>
<span class="c">                    使用できるプレースホルダは以下のとおり。</span>
<span class="c">                    $NAME$: コード値に対応するコード名称</span>
<span class="c">                    $SHORTNAME$: コード値に対応するコードの略称</span>
<span class="c">                    $OPTIONALNAME$: コード値に対応するコードのオプション名称。</span>
<span class="c">                                    このプレースホルダを使用する場合は、</span>
<span class="c">                                    optionColumnName属性の指定が必須となる。</span>
<span class="c">                    $VALUE$: コード値</span>
<span class="c">                    デフォルトは$NAME$。</span>
<span class="c">--&gt;</span>
<span class="nt">&lt;n:code</span> <span class="na">name=</span><span class="s">&quot;user.gender&quot;</span>
        <span class="na">codeId=</span><span class="s">&quot;GENDER&quot;</span> <span class="na">pattern=</span><span class="s">&quot;PATTERN1&quot;</span>
        <span class="na">labelPattern=</span><span class="s">&quot;$VALUE$:$NAME$($SHORTNAME$)&quot;</span>
        <span class="na">listFormat=</span><span class="s">&quot;div&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
<dt>出力されるHTML</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!--</span>
<span class="c">  &quot;user.gender&quot;が&quot;FEMALE&quot;の場合</span>
<span class="c">  listFormat属性でdivを指定しているのでdivタグで出力される。</span>
<span class="c">--&gt;</span>
<span class="nt">&lt;div&gt;</span>FEMALE:女性(女)<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt><a class="reference internal" href="tag/tag_reference.html#tag-code-select-tag"><span>codeSelectタグ</span></a> (コード値のプルダウン)</dt>
<dd><dl class="first last docutils">
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!--</span>
<span class="c">  属性指定はcodeタグと同じ。</span>
<span class="c">--&gt;</span>
<span class="nt">&lt;n:codeSelect</span> <span class="na">name=</span><span class="s">&quot;form.gender&quot;</span>
              <span class="na">codeId=</span><span class="s">&quot;GENDER&quot;</span> <span class="na">pattern=</span><span class="s">&quot;PATTERN2&quot;</span>
              <span class="na">labelPattern=</span><span class="s">&quot;$VALUE$-$SHORTNAME$&quot;</span>
              <span class="na">listFormat=</span><span class="s">&quot;div&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
<dt>出力されるHTML</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- &quot;form.gender&quot;が&quot;FEMALE&quot;の場合 --&gt;</span>

<span class="c">&lt;!-- 入力画面 --&gt;</span>
<span class="nt">&lt;select</span> <span class="na">name=</span><span class="s">&quot;form.gender&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;MALE&quot;</span><span class="nt">&gt;</span>MALE-男<span class="nt">&lt;/option&gt;</span>
  <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;FEMALE&quot;</span> <span class="na">selected=</span><span class="s">&quot;selected&quot;</span><span class="nt">&gt;</span>FEMALE-女<span class="nt">&lt;/option&gt;</span>
<span class="nt">&lt;/select&gt;</span>

<span class="c">&lt;!-- 確認画面 --&gt;</span>
<span class="nt">&lt;div&gt;</span>FEMALE-女<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">カスタムタグでは、言語指定によるコード値の取得はできない。
カスタムタグでは、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/code/CodeUtil.html" title="nablarch.common.code.CodeUtil">CodeUtil</a> のロケールを指定しないAPIを使用している。
言語指定でコード値を取得したい場合は、アクションで
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/code/CodeUtil.html" title="nablarch.common.code.CodeUtil">CodeUtil</a>
を使用して値を取得する。</p>
</div>
</div>
<div class="section" id="tag-write-message">
<span id="id28"></span><h3><a class="toc-backref" href="#id73">7.19.4.25. メッセージを出力する</a><a class="headerlink" href="#tag-write-message" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>カスタムタグでは、 <a class="reference internal" href="message.html#message"><span>メッセージ管理</span></a> を使用して取得したメッセージを出力するカスタムタグを提供する。</p>
<ul class="simple">
<li><a class="reference internal" href="tag/tag_reference.html#tag-message-tag"><span>messageタグ</span></a> (メッセージ)</li>
</ul>
<p>国際化を行うアプリケーションにおいて1つのJSPファイルで多言語に対応する場合、
<a class="reference internal" href="tag/tag_reference.html#tag-message-tag"><span>messageタグ</span></a> を使用することでユーザが選択した言語に応じて画面の文言を切り替えることができる。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- messageId属性にメッセージIDを指定する。 --&gt;</span>
<span class="nt">&lt;n:message</span> <span class="na">messageId=</span><span class="s">&quot;page.not.found&quot;</span> <span class="nt">/&gt;</span>

<span class="c">&lt;!--</span>
<span class="c">  オプションを指定したい場合</span>
<span class="c">--&gt;</span>

<span class="c">&lt;!-- var属性を指定して埋め込み用の文言を取得する。--&gt;</span>
<span class="nt">&lt;n:message</span> <span class="na">var=</span><span class="s">&quot;title&quot;</span> <span class="na">messageId=</span><span class="s">&quot;title.user.register&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;n:message</span> <span class="na">var=</span><span class="s">&quot;appName&quot;</span> <span class="na">messageId=</span><span class="s">&quot;title.app&quot;</span> <span class="nt">/&gt;</span>

<span class="c">&lt;!-- 埋め込み用の文言をoption属性に設定する。--&gt;</span>
<span class="nt">&lt;n:message</span> <span class="na">messageId=</span><span class="s">&quot;title.template&quot;</span> <span class="na">option0=</span><span class="s">&quot;${title}&quot;</span> <span class="na">option1=</span><span class="s">&quot;${appName}&quot;</span> <span class="nt">/&gt;</span>

<span class="c">&lt;!--</span>
<span class="c">  画面内で一部のメッセージのみ言語を切り替えたい場合</span>
<span class="c">--&gt;</span>

<span class="c">&lt;!-- language属性に言語を指定する。 --&gt;</span>
<span class="nt">&lt;n:message</span> <span class="na">messageId=</span><span class="s">&quot;page.not.found&quot;</span> <span class="na">language=</span><span class="s">&quot;ja&quot;</span> <span class="nt">/&gt;</span>

<span class="c">&lt;!--</span>
<span class="c">  HTMLエスケープしたくない場合</span>
<span class="c">--&gt;</span>

<span class="c">&lt;!-- htmlEscape属性にfalseを指定する。 --&gt;</span>
<span class="nt">&lt;n:message</span> <span class="na">messageId=</span><span class="s">&quot;page.not.found&quot;</span> <span class="na">htmlEscape=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="tag-change-resource-path-of-lang">
<span id="id29"></span><h3><a class="toc-backref" href="#id74">7.19.4.26. 言語毎にリソースパスを切り替える</a><a class="headerlink" href="#tag-change-resource-path-of-lang" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>リソースパスを扱うカスタムタグは、言語設定をもとにリソースパスを動的に切り替える機能をもつ。
以下のカスタムタグが言語毎のリソースパスの切り替えに対応している。</p>
<ul class="simple">
<li><a class="reference internal" href="tag/tag_reference.html#tag-a-tag"><span>aタグ</span></a></li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-img-tag"><span>imgタグ</span></a></li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-link-tag"><span>linkタグ</span></a></li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-script-tag"><span>scriptタグ</span></a></li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-confirmation-page-tag"><span>confirmationPageタグ</span></a> (入力画面と確認画面を共通化)</li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-include-tag"><span>includeタグ</span></a> (インクルード)</li>
</ul>
<p>これらのカスタムタグでは、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/fw/web/i18n/ResourcePathRule.html" title="nablarch.fw.web.i18n.ResourcePathRule">ResourcePathRule</a>
のサブクラスを使用して言語毎のリソースパスを取得することで切り替えを行う。
デフォルトで提供するサブクラスについては、 <a class="reference internal" href="../handlers/web/http_response_handler.html#http-response-handler-change-content-path"><span>言語毎のコンテンツパスの切り替え</span></a> を参照。</p>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p><a class="reference internal" href="tag/tag_reference.html#tag-include-tag"><span>includeタグ</span></a> は動的なJSPインクルードを言語毎のリソースパスの切り替えに対応させるために提供している。
<a class="reference internal" href="tag/tag_reference.html#tag-include-param-tag"><span>includeParamタグ</span></a> を使用してインクルード時に追加するパラメータを指定する。</p>
<div class="last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- path属性にインクルードするリソースのパスを指定する。 --&gt;</span>
<span class="nt">&lt;n:include</span> <span class="na">path=</span><span class="s">&quot;/app_header.jsp&quot;</span><span class="nt">&gt;</span>
    <span class="c">&lt;!--</span>
<span class="c">      paramName属性にパラメータ名、value属性に値を指定する。</span>
<span class="c">      スコープ上に設定された値を使用する場合はname属性を指定する。</span>
<span class="c">      name属性とvalue属性のどちらか一方を指定する。</span>
<span class="c">    --&gt;</span>
    <span class="nt">&lt;n:includeParam</span> <span class="na">paramName=</span><span class="s">&quot;title&quot;</span> <span class="na">value=</span><span class="s">&quot;ユーザ情報詳細&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/n:include&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="id30">
<h3><a class="toc-backref" href="#id75">7.19.4.27. ブラウザのキャッシュを防止する</a><a class="headerlink" href="#id30" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>ブラウザのキャッシュを防止することで、ブラウザの戻るボタンが押された場合に、
前画面を表示できないようにすることができる。
これにより、複数ユーザで同じ端末を使用するような環境において、
ブラウザ操作により個人情報や機密情報が漏洩するのを防ぐ。</p>
<p>ブラウザのキャッシュ防止は、 <a class="reference internal" href="tag/tag_reference.html#tag-no-cache-tag"><span>noCacheタグ</span></a> を使用する。
ブラウザの戻るボタンは、画面表示時にキャッシュしておいた画面を再表示するので、
キャッシュを防止したい画面のJSPで <a class="reference internal" href="tag/tag_reference.html#tag-no-cache-tag"><span>noCacheタグ</span></a> を使用する。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- headタグ内にnoCacheタグを指定する。 --&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;n:noCache/&gt;</span>
  <span class="c">&lt;!-- 以下省略。 --&gt;</span>
<span class="nt">&lt;/head&gt;</span>
</pre></div>
</div>
</dd>
</dl>
<p><a class="reference internal" href="tag/tag_reference.html#tag-no-cache-tag"><span>noCacheタグ</span></a> を指定すると、以下のレスポンスヘッダとHTMLがブラウザに返る。</p>
<dl class="docutils">
<dt>レスポンスヘッダ</dt>
<dd><div class="first last highlight-bash"><div class="highlight"><pre><span></span>Expires Thu, <span class="m">01</span> Jan <span class="m">1970</span> <span class="m">00</span>:00:00 GMT
Cache-Control no-store, no-cache, must-revalidate, post-check<span class="o">=</span><span class="m">0</span>, pre-check<span class="o">=</span><span class="m">0</span>
Pragma no-cache
</pre></div>
</div>
</dd>
<dt>HTML</dt>
<dd><div class="first last highlight-html"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&quot;pragma&quot;</span> <span class="na">content</span><span class="o">=</span><span class="s">&quot;no-cache&quot;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&quot;cache-control&quot;</span> <span class="na">content</span><span class="o">=</span><span class="s">&quot;no-cache&quot;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&quot;expires&quot;</span> <span class="na">content</span><span class="o">=</span><span class="s">&quot;0&quot;</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</pre></div>
</div>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last"><a class="reference internal" href="tag/tag_reference.html#tag-no-cache-tag"><span>noCacheタグ</span></a> は、 <a class="reference internal" href="tag/tag_reference.html#tag-include-tag"><span>includeタグ</span></a> (&lt;jsp:include&gt;)でincludeされるJSPでは指定できないため、
必ずforwardされるJSPで指定すること。
ただし、システム全体でブラウザのキャッシュ防止を使用する場合は、
各JSPで実装漏れが発生しないように、
プロジェクトで <a class="reference internal" href="../nablarch/architecture.html#nablarch-architecture-handler-queue"><span>ハンドラ</span></a> を作成し一律設定すること。
<a class="reference internal" href="../nablarch/architecture.html#nablarch-architecture-handler-queue"><span>ハンドラ</span></a> では、上記のレスポンスヘッダ例の内容をレスポンスヘッダに設定する。</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">HTTPの仕様上は、レスポンスヘッダのみを指定すればよいはずであるが、
この仕様に準拠していない古いブラウザのためにmetaタグも指定している。</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p>ブラウザのキャッシュ防止は、以下のブラウザでHTTP/1.0かつSSL(https)が適用されない通信において有効にならない。
このため、ブラウザのキャッシュ防止を使用する画面は、必ずSSL通信を適用するように設計すること。</p>
<p class="last">問題が発生するブラウザ： IE6, IE7, IE8</p>
</div>
</div>
<div class="section" id="id31">
<h3><a class="toc-backref" href="#id76">7.19.4.28. 静的コンテンツの変更時にクライアント側のキャッシュを参照しないようにする</a><a class="headerlink" href="#id31" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>クライアント側(ブラウザ)でキャッシュを有効化している場合、
サーバ上に配置した静的コンテンツを置き換えても、
クライアント側では最新のコンテンツではなくキャッシュされた古いコンテンツが表示される可能性がある。</p>
<p>この問題を回避するため、以下のカスタムタグの <code class="docutils literal"><span class="pre">href</span></code> 属性、および <code class="docutils literal"><span class="pre">src</span></code> 属性で指定された静的コンテンツのURIにパラメータでバージョンを付加する機能を提供する。</p>
<ul class="simple">
<li><a class="reference internal" href="tag/tag_reference.html#tag-link-tag"><span>linkタグ</span></a></li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-img-tag"><span>imgタグ</span></a></li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-script-tag"><span>scriptタグ</span></a></li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-submit-tag"><span>submitタグ</span></a></li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-popup-submit-tag"><span>popupSubmitタグ</span></a></li>
<li><a class="reference internal" href="tag/tag_reference.html#tag-download-submit-tag"><span>downloadSubmitタグ</span></a></li>
</ul>
<p>これにより、静的コンテンツ置き換え時にクライアント側のキャッシュではなく最新の静的コンテンツを参照することができる。</p>
<p>パラメータに付加する静的コンテンツのバージョンは、 <a class="reference internal" href="repository.html#repository-environment-configuration"><span>設定ファイル(propertiesファイル)</span></a> に設定する。
設定ファイルに静的コンテンツのバージョンが設定されていない場合は、この機能は無効化される。</p>
<p>静的コンテンツのバージョンは、 <code class="docutils literal"><span class="pre">static_content_version</span></code> というキー名で指定する。</p>
<dl class="docutils">
<dt>設定例</dt>
<dd><div class="first last highlight-properties"><div class="highlight"><pre><span></span><span class="c"># 静的コンテンツのバージョン</span>
<span class="na">static_content_version</span><span class="o">=</span><span class="s">1.0</span>
</pre></div>
</div>
</dd>
</dl>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p>この機能は、以下の理由により非推奨とする。</p>
<ul class="simple">
<li><code class="docutils literal"><span class="pre">static_content_version</span></code> による静的コンテンツのバージョンはアプリケーション内で1つしか定義できないため、
<code class="docutils literal"><span class="pre">static_content_version</span></code> の値を変更してしまうと、アプリケーション内の全ての静的コンテンツ
(変更していない静的コンテンツ含む)がキャッシュではなく最新の静的コンテンツを参照してしまう。</li>
</ul>
<p class="last">静的コンテンツの変更時にキャッシュを参照しないようにするには、この機能を使用するのではなく、
静的コンテンツのファイル名を変更する等で対応すること。</p>
</div>
</div>
<div class="section" id="dynamic-attribute">
<span id="id32"></span><h3><a class="toc-backref" href="#id77">7.19.4.29. 任意の属性を指定する</a><a class="headerlink" href="#dynamic-attribute" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>カスタムタグでは <code class="docutils literal"><span class="pre">javax.servlet.jsp.tagext.DynamicAttributes</span></code> インタフェースを使用して動的属性を扱っている。
これにより、HTML5で追加された属性を含む任意の属性をカスタムタグで出力することができる。
HTMLを出力するタグについては動的属性を使用可能としている。</p>
<div class="section" id="id33">
<h4><a class="toc-backref" href="#id78">7.19.4.29.1. 論理属性の扱い</a><a class="headerlink" href="#id33" title="このヘッドラインへのパーマリンク">¶</a></h4>
<p>動的属性の論理属性についても、既存のカスタムタグ同様、値に <cite>true</cite> / <cite>false</cite> を指定して出力有無を制御することができる。
デフォルトでは以下の属性を論理属性として扱う。</p>
<ul class="simple">
<li>async</li>
<li>autofocus</li>
<li>checked</li>
<li>disabled</li>
<li>formnovalidate</li>
<li>hidden</li>
<li>ismap</li>
<li>itemscope</li>
<li>multiple</li>
<li>nomodule</li>
<li>novalidate</li>
<li>readonly</li>
<li>required</li>
<li>reversed</li>
<li>selected</li>
</ul>
<p>asyncを例に実装例を以下に示す。</p>
<blockquote>
<div><dl class="docutils">
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- 論理属性にtrueを指定 --&gt;</span>
<span class="nt">&lt;n:script</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;/javascripts/lib/jquery-ui.min.js&quot;</span> <span class="na">async=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
<dt>出力されるHTML</dt>
<dd><div class="first last highlight-html"><div class="highlight"><pre><span></span><span class="c">&lt;!-- 論理属性が出力される --&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src</span><span class="o">=</span><span class="s">&quot;/javascripts/lib/jquery-ui.min.js&quot;</span> <span class="na">async</span><span class="o">=</span><span class="s">&quot;async&quot;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</pre></div>
</div>
</dd>
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- 論理属性にfalseを指定 --&gt;</span>
<span class="nt">&lt;n:script</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;/javascripts/lib/jquery-ui.min.js&quot;</span> <span class="na">async=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
<dt>出力されるHTML</dt>
<dd><div class="first last highlight-html"><div class="highlight"><pre><span></span><span class="c">&lt;!-- 論理属性が出力されない --&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src</span><span class="o">=</span><span class="s">&quot;/javascripts/lib/jquery-ui.min.js&quot;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</div></blockquote>
<p>論理属性として扱う属性は変更することができる。
変更する場合は論理属性のリストを <code class="docutils literal"><span class="pre">CustomTagConfig</span></code> の <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html#setDynamicBooleanAttributes-java.util.List-" title="nablarch.common.web.tag.CustomTagConfig.setDynamicBooleanAttributes(java.util.List)">dynamicBooleanAttributesプロパティ</a> に設定する。</p>
</div>
</div>
</div>
<div class="section" id="id34">
<h2><a class="toc-backref" href="#id79">7.19.5. 拡張例</a><a class="headerlink" href="#id34" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="section" id="id35">
<h3><a class="toc-backref" href="#id80">7.19.5.1. フォーマッタを追加する</a><a class="headerlink" href="#id35" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p><a class="reference internal" href="format.html#format"><span>フォーマッタ</span></a> を使用する場合
フォーマッタの追加方法は、 <a class="reference internal" href="format.html#format"><span>フォーマッタ</span></a> のフォーマッタを追加するの項を参照。</p>
<p>valueFormat属性を使用する場合
フォーマットは、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/ValueFormatter.html" title="nablarch.common.web.tag.ValueFormatter">ValueFormatter</a>
インタフェースを実装したクラスが行う。
実装したクラスをコンポーネント定義に追加することでフォーマットを変更することができる。</p>
<p>コンポーネント定義への追加は、Map型でデータタイプ名をキーに、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/ValueFormatter.html" title="nablarch.common.web.tag.ValueFormatter">ValueFormatter</a>
を実装したクラスを値に指定する。</p>
<p>フレームワークがデフォルトでサポートしているフォーマットに対する設定例を以下に示す。</p>
<p>フォーマッタのマップは、 <code class="docutils literal"><span class="pre">valueFormatters</span></code> という名前でコンポーネント定義に追加する。</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;map</span> <span class="na">name=</span><span class="s">&quot;valueFormatters&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;yyyymmdd&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;value-component</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.web.tag.YYYYMMDDFormatter&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/entry&gt;</span>
  <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;yyyymm&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;value-component</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.web.tag.YYYYMMFormatter&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/entry&gt;</span>
  <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;dateTime&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;value-component</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.web.tag.DateTimeFormatter&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/entry&gt;</span>
  <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&quot;decimal&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;value-component</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.web.tag.DecimalFormatter&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/entry&gt;</span>
<span class="nt">&lt;/map&gt;</span>
</pre></div>
</div>
</div>
<div class="section" id="tag-submit-display-control-change">
<span id="id36"></span><h3><a class="toc-backref" href="#id81">7.19.5.2. ボタン/リンクの表示制御に使う判定処理を変更する</a><a class="headerlink" href="#tag-submit-display-control-change" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p><a class="reference internal" href="#tag-submit-display-control"><span>認可チェック/サービス提供可否に応じてボタン/リンクの表示/非表示を切り替える</span></a> に使用する判定処理を変更したい場合は、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/DisplayControlChecker.html" title="nablarch.common.web.tag.DisplayControlChecker">DisplayControlChecker</a>
インタフェースを実装することで変更できる。
実装したクラスを <a class="reference internal" href="#tag-setting"><span>カスタムタグの設定を行う</span></a> で
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html#setDisplayControlCheckers-java.util.List-" title="nablarch.common.web.tag.CustomTagConfig.setDisplayControlCheckers(java.util.List)">displayControlCheckersプロパティ</a>
に指定する。</p>
<dl class="docutils">
<dt>設定例</dt>
<dd><div class="first last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;list</span> <span class="na">name=</span><span class="s">&quot;displayControlCheckers&quot;</span> <span class="nt">&gt;</span>
  <span class="c">&lt;!-- サービス提供可否についてはデフォルトのDisplayControlCheckerを指定する --&gt;</span>
  <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.web.tag.ServiceAvailabilityDisplayControlChecker&quot;</span> <span class="nt">/&gt;</span>
  <span class="c">&lt;!-- 認可チェックについてはプロジェクトでカスタマイズしたDisplayControlCheckerを指定する --&gt;</span>
  <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;com.sample.app.CustomPermissionDisplayControlChecker&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/list&gt;</span>

<span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;customTagConfig&quot;</span>
           <span class="na">class=</span><span class="s">&quot;nablarch.common.web.tag.CustomTagConfig&quot;</span><span class="nt">&gt;</span>
   <span class="c">&lt;!-- 判定条件を設定する。 --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;displayControlCheckers&quot;</span> <span class="na">ref=</span><span class="s">&quot;displayControlCheckers&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="tag-double-submission-client-side-change">
<span id="id37"></span><h3><a class="toc-backref" href="#id82">7.19.5.3. クライアント側の二重サブミット防止で、二重サブミット発生時の振る舞いを追加する</a><a class="headerlink" href="#tag-double-submission-client-side-change" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p><a class="reference internal" href="#tag-double-submission-client-side"><span>クライアント側の二重サブミット防止</span></a> を使用していて、
アプリケーションで二重サブミット発生時の振る舞いを追加する場合は、JavaScriptでコールバック関数を実装する。</p>
<p>フレームワークのJavaScript関数は、2回目以降のサブミット要求が発生した場合、
コールバック関数が存在していれば、コールバック関数を呼び出す。
コールバック関数のシグネチャを以下に示す。</p>
<div class="highlight-js"><div class="highlight"><pre><span></span><span class="cm">/**</span>
<span class="cm"> * @param element 二重サブミットが行われた対象要素(ボタン又はリンク)</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">nablarch_handleDoubleSubmission</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ここに処理を記述する。</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="tag-double-submission-server-side-change">
<span id="id38"></span><h3><a class="toc-backref" href="#id83">7.19.5.4. サーバ側の二重サブミット防止で、トークンの発行処理を変更する</a><a class="headerlink" href="#tag-double-submission-server-side-change" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p><a class="reference internal" href="#tag-double-submission-server-side"><span>サーバ側の二重サブミット防止</span></a> を使用していて、
トークンの発行処理を変更したい場合は、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/token/TokenGenerator.html" title="nablarch.common.web.token.TokenGenerator">TokenGenerator</a>
インタフェースを実装することで変更できる。
実装したクラスをコンポーネント定義に <code class="docutils literal"><span class="pre">tokenGenerator</span></code> という名前で追加する。</p>
</div>
</div>
<div class="section" id="id39">
<h2><a class="toc-backref" href="#id84">7.19.6. カスタムタグのルール</a><a class="headerlink" href="#id39" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="section" id="tag-naming-rule">
<span id="id40"></span><h3><a class="toc-backref" href="#id85">7.19.6.1. 命名ルール</a><a class="headerlink" href="#tag-naming-rule" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>カスタムタグでは、CSSのクラス名やJavaScriptの関数名など、カスタムタグが規定する名前については、
個別アプリケーションと重複しないようにプレフィックス <code class="docutils literal"><span class="pre">nablarch_</span></code> を使用する。
そのため、個別アプリケーションでは、 <code class="docutils literal"><span class="pre">nablarch_</span></code> から始まる名前を使用しないこと。</p>
<p>この命名ルールの対象を以下に示す。</p>
<ul class="simple">
<li>HTMLの属性値</li>
<li>CSSのクラス名</li>
<li>JavaScriptの関数名とグローバル変数名</li>
<li>ページスコープ、リクエストスコープ、セッションスコープの変数名</li>
</ul>
</div>
<div class="section" id="tag-access-rule">
<span id="id41"></span><h3><a class="toc-backref" href="#id86">7.19.6.2. 入力/出力データへのアクセスルール</a><a class="headerlink" href="#tag-access-rule" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>入力項目や出力項目を出力するカスタムタグ( <a class="reference internal" href="tag/tag_reference.html#tag-text-tag"><span>textタグ</span></a> や <a class="reference internal" href="tag/tag_reference.html#tag-write-tag"><span>writeタグ</span></a> など)では、
name属性の値に基づき、出力対象となるデータにアクセスする。</p>
<p>オブジェクトの種類に合わせて、name属性には以下の指定を行う。</p>
<ul class="simple">
<li>オブジェクト/Mapのプロパティにアクセスする場合は、ドット区切りを指定する。</li>
<li>List/配列の要素にアクセスする場合は、角括弧(括弧内にインデックス)を指定する。</li>
</ul>
<p>検索順序は次の通りで、最初に見つかった値を使用する。値が取得できない場合は、空文字列を出力する。</p>
<ol class="arabic simple">
<li>Pageスコープ</li>
<li>リクエストスコープ</li>
<li>リクエストパラメータ</li>
<li>セッションスコープ</li>
</ol>
<dl class="docutils">
<dt>オブジェクトの実装例</dt>
<dd><p class="first"></p>
<dl class="last docutils">
<dt>アクション</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="c1">// オブジェクトをリクエストスコープに設定する。</span>
<span class="n">PersonForm</span> <span class="n">form</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PersonForm</span><span class="o">();</span>
<span class="n">form</span><span class="o">.</span><span class="na">setPersonName</span><span class="o">(</span><span class="s">&quot;名前&quot;</span><span class="o">);</span>
<span class="n">context</span><span class="o">.</span><span class="na">setRequestScopedVar</span><span class="o">(</span><span class="s">&quot;form&quot;</span><span class="o">,</span> <span class="n">form</span><span class="o">);</span>
<span class="k">return</span> <span class="k">new</span> <span class="n">HttpResponse</span><span class="o">(</span><span class="s">&quot;/WEB-INF/view/sample/accessRuleObject.jsp&quot;</span><span class="o">);</span>
</pre></div>
</div>
</dd>
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- ドット区切りを使う。 --&gt;</span>
<span class="nt">&lt;n:text</span> <span class="na">name=</span><span class="s">&quot;form.personName&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>Listの実装例</dt>
<dd><p class="first"></p>
<dl class="last docutils">
<dt>アクション</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="c1">// Listを持つオブジェクトをリクエストスコープに設定する。</span>
<span class="n">PersonsForm</span> <span class="n">form</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PersonsForm</span><span class="o">();</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">persons</span> <span class="o">=</span> <span class="n">UniversalDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span><span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="n">form</span><span class="o">.</span><span class="na">setPersons</span><span class="o">(</span><span class="n">persons</span><span class="o">);</span>
<span class="n">context</span><span class="o">.</span><span class="na">setRequestScopedVar</span><span class="o">(</span><span class="s">&quot;form&quot;</span><span class="o">,</span> <span class="n">form</span><span class="o">);</span>
</pre></div>
</div>
</dd>
<dt>JSP</dt>
<dd><div class="first last highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- インデックスを取得するためループをまわす。 --&gt;</span>
<span class="nt">&lt;c:forEach</span> <span class="na">items=</span><span class="s">&quot;${form.persons}&quot;</span> <span class="na">varStatus=</span><span class="s">&quot;status&quot;</span><span class="nt">&gt;</span>
  <span class="c">&lt;!--</span>
<span class="c">    角括弧を使って要素にアクセスする。</span>
<span class="c">    要素の値はドットを使ってアクセスする。</span>
<span class="c">  --&gt;</span>
  <span class="nt">&lt;n:text</span> <span class="na">name=</span><span class="s">&quot;form.persons[${status.index}].personName&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/c:forEach&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p>検索対象にリクエストパラメータが含まれているのは、
入力項目のカスタムタグで、入力フォームを再表示した場合に入力値を復元するためである。</p>
<p class="last">この動きは、NablarchのカスタムタグとJSTL(c:forEachやc:outなど)で異なるので、実装時に注意すること。
JSTLのタグはリクエストパラメータの値にアクセスできないので、
JSTLのタグを使用する場合は、アクション側で明示的にリクエストスコープに値を設定するなどの実装が必要になる。</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p>リクエストパラメータより先にリクエストスコープを検索するのは、
入力フォームを再表示した場合に入力値を変更できるようにするためである。</p>
<p>よくある例としては、ユーザが明示的に選択したことをシステム的に保証したいため、
入力フォームを再表示する際に、ラジオボタンを未選択の状態に戻したい場合がある。</p>
<p class="last">このような場合は、アクション側でリクエストスコープに空文字を設定すると、
ラジオボタンを未選択の状態に戻すことができる。</p>
</div>
</div>
<div class="section" id="uri">
<span id="tag-specify-uri"></span><h3><a class="toc-backref" href="#id87">7.19.6.3. URIの指定方法</a><a class="headerlink" href="#uri" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>カスタムタグにおいてURIを指定する属性には、次のいずれかの方法で指定する。</p>
<blockquote>
<div><dl class="docutils">
<dt>絶対URL</dt>
<dd><p class="first">http/httpsから始まるパス</p>
<div class="highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;n:a</span> <span class="na">href=</span><span class="s">&quot;https://github.com/coastland&quot;</span><span class="nt">&gt;</span>coastland<span class="nt">&lt;/n:a&gt;</span>
</pre></div>
</div>
<p class="last">他システム連携などでアプリケーションとホストが異なるURIを指定する場合に使用する。
カスタムタグは、指定されたパスをそのまま使用する。</p>
</dd>
<dt>コンテキストからの相対パス</dt>
<dd><p class="first">/(スラッシュ)から始まるパス</p>
<div class="highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">uri=</span><span class="s">&quot;/action/person/register&quot;</span> <span class="na">value=</span><span class="s">&quot;登録&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<p class="last">アプリケーション内のパスを指定する場合に使用する。
カスタムタグは、指定されたパスの先頭にコンテキストパスを付加して使用する。</p>
</dd>
<dt>現在のパスからの相対パス</dt>
<dd><p class="first">/(スラッシュ)から始まらないパス(絶対URLを除く)</p>
<div class="highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">uri=</span><span class="s">&quot;login&quot;</span> <span class="na">value=</span><span class="s">&quot;ログイン&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<p class="last">アプリケーション内のパスを指定する場合に使用する。
カスタムタグは、指定されたパスをそのまま使用する。</p>
</dd>
</dl>
</div></blockquote>
<p></p>
<dl class="docutils">
<dt>httpsとhttpの切り替え</dt>
<dd><p class="first">コンテキストからの相対パスを指定している場合は、カスタムタグのsecure属性を指定することで、
URIのhttpsとhttpを切り替えることができる。</p>
<p>secure属性が指定された場合は、カスタムタグの設定値(http用のポート番号、https用のポート番号、ホスト)と
コンテキストパスを使用してURIを組み立てる。
そのため、secure属性を使用するアプリケーションでは、
<a class="reference internal" href="#tag-setting"><span>カスタムタグの設定を行う</span></a> で
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html#setPort-int-" title="nablarch.common.web.tag.CustomTagConfig.setPort(int)">portプロパティ</a> /
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html#setSecurePort-int-" title="nablarch.common.web.tag.CustomTagConfig.setSecurePort(int)">securePortプロパティ</a> /
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/tag/CustomTagConfig.html#setHost-java.lang.String-" title="nablarch.common.web.tag.CustomTagConfig.setHost(java.lang.String)">hostプロパティ</a>
を指定する。</p>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">secure属性は、遷移先のプロトコルを切り替えるボタンやリンクのみで使用する。
遷移先のプロトコルが同じ場合(http→http、https→https)は、secure属性を指定しない。</p>
</div>
<dl class="last docutils">
<dt>実装例</dt>
<dd><p class="first">secure属性の使用例を示す。</p>
<dl class="last docutils">
<dt>カスタムタグの設定値</dt>
<dd><table class="first last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">http用のポート番号:</th><td class="field-body">8080</td>
</tr>
<tr class="field-even field"><th class="field-name">https用のポート番号:</th><td class="field-body">443</td>
</tr>
<tr class="field-odd field"><th class="field-name">ホスト:</th><td class="field-body">sample.co.jp</td>
</tr>
</tbody>
</table>
</dd>
<dt>http→httpsに切り替える場合</dt>
<dd><p class="first"></p>
<div class="highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- secure属性にtrueを指定する。 --&gt;</span>
<span class="nt">&lt;n:submit</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">name=</span><span class="s">&quot;login&quot;</span> <span class="na">value=</span><span class="s">&quot;ログイン&quot;</span> <span class="na">uri=</span><span class="s">&quot;/action/login&quot;</span> <span class="na">secure=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<div class="last highlight-bash"><div class="highlight"><pre><span></span><span class="c1"># 組み立てられるURI</span>
https://sample.co.jp:443/&lt;コンテキストパス&gt;/action/login
</pre></div>
</div>
</dd>
<dt>https→httpに切り替える場合</dt>
<dd><p class="first"></p>
<div class="highlight-jsp"><div class="highlight"><pre><span></span><span class="c">&lt;!-- secure属性にfalseを指定する。 --&gt;</span>
<span class="nt">&lt;n:submitLink</span> <span class="na">name=</span><span class="s">&quot;logout&quot;</span> <span class="na">uri=</span><span class="s">&quot;/action/logout&quot;</span> <span class="na">secure=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>ログアウト<span class="nt">&lt;/n:submitLink&gt;</span>
</pre></div>
</div>
<div class="last highlight-bash"><div class="highlight"><pre><span></span><span class="c1"># 組み立てられるURI</span>
https://sample.co.jp:8080/&lt;コンテキストパス&gt;/action/logout

<span class="c1"># カスタムタグの設定でhttp用のポート番号を指定しなかった場合</span>
<span class="c1"># ポート番号が出力されない。</span>
https://sample.co.jp/&lt;コンテキストパス&gt;/action/logout
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
</div>
<div class="section" id="tag-html-escape">
<span id="id42"></span><h3><a class="toc-backref" href="#id88">7.19.6.4. HTMLエスケープと改行、半角スペース変換</a><a class="headerlink" href="#tag-html-escape" title="このヘッドラインへのパーマリンク">¶</a></h3>
<dl class="docutils">
<dt>HTMLエスケープ</dt>
<dd><p class="first">カスタムタグでは、原則として出力する際に全てのHTMLの属性についてHTMLエスケープを行う。
以下に変換内容を示す。</p>
<dl class="docutils">
<dt>HTMLエスケープの変換内容</dt>
<dd><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">&amp;</span></code> → <code class="docutils literal"><span class="pre">&amp;amp;</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">&lt;</span></code> → <code class="docutils literal"><span class="pre">&amp;lt;</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">&gt;</span></code> → <code class="docutils literal"><span class="pre">&amp;gt;</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">“</span></code> → <code class="docutils literal"><span class="pre">&amp;#034;</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">‘</span></code> → <code class="docutils literal"><span class="pre">&amp;#039;</span></code></div>
</div>
</dd>
</dl>
<div class="last admonition important">
<p class="first admonition-title">重要</p>
<p>EL式はHTMLエスケープ処理を実施しないため、EL式を使用して値を出力しないこと。
値を出力する場合は、 <a class="reference internal" href="tag/tag_reference.html#tag-write-tag"><span>writeタグ</span></a> などのカスタムタグを使用する。</p>
<p class="last">ただし、JSTLのforEachタグやカスタムタグの属性にオブジェクトを設定する場合など、
直接出力しない箇所ではEL式を使用しても問題ない。</p>
</div>
</dd>
<dt>改行、半角スペース変換</dt>
<dd><p class="first">確認画面などに入力データを出力する際には、HTMLエスケープに加えて、改行と半角スペースの変換を行う。
以下に変換内容を示す。</p>
<dl class="last docutils">
<dt>改行、半角スペースの変換内容</dt>
<dd><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">改行コード(\n、\r、\r\n)</span></code> → <code class="docutils literal"><span class="pre">&lt;br</span> <span class="pre">/&gt;</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">半角スペース</span></code> → <code class="docutils literal"><span class="pre">&amp;nbsp;</span></code></div>
</div>
</dd>
</dl>
</dd>
</dl>
</div>
</div>
<div class="section" id="tag-reference">
<h2><a class="toc-backref" href="#id89">7.19.7. <a class="reference internal" href="tag/tag_reference.html#tag-reference"><span>タグリファレンス</span></a></a><a class="headerlink" href="#tag-reference" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p><a class="reference internal" href="tag/tag_reference.html#tag-reference"><span>タグリファレンス</span></a> を参照。</p>
</div>
</div>


           </div>
           <div class="articleComments">
            
           </div>
          </div>
          <footer>

    <hr/>

    <div role="contentinfo">
        <p>
            &copy; Copyright 2010-2021, TIS Inc.
        </p>
    </div>
    Built with <a href="http://sphinx-doc.org/">Sphinx</a> using a <a href="https://github.com/snide/sphinx_rtd_theme">theme</a> provided by <a href="https://readthedocs.org">Read the Docs</a>.

</footer>

        </div>
      </div>

    </section>

  </div>
  


  

    <script type="text/javascript">
        var DOCUMENTATION_OPTIONS = {
            URL_ROOT:'../../../',
            VERSION:'5u19',
            COLLAPSE_INDEX:false,
            FILE_SUFFIX:'.html',
            HAS_SOURCE:  true,
            SOURCELINK_SUFFIX: ''
        };
    </script>
      <script type="text/javascript" src="../../../_static/jquery.js"></script>
      <script type="text/javascript" src="../../../_static/underscore.js"></script>
      <script type="text/javascript" src="../../../_static/doctools.js"></script>
      <script type="text/javascript" src="../../../_static/custom.js"></script>
      <script type="text/javascript" src="../../../_static/translations.js"></script>

  

  
  
    <script type="text/javascript" src="../../../_static/js/theme.js"></script>
  

  
  
  <script type="text/javascript">
      jQuery(function () {
          SphinxRtdTheme.StickyNav.enable();
      });
  </script>
   

</body>
</html>