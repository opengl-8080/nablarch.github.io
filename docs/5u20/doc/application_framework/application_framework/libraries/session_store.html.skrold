


<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en" > <!--<![endif]-->
<head>
  <meta charset="utf-8">
  <meta http-equiv='content-language' content='ja'>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <title>7.17. セッションストア &mdash; ∇Nablarch  5u19 ドキュメント</title>
  

  
  
  
  

  

  
  
    

  

  
  
    <link rel="stylesheet" href="../../../_static/custom.css" type="text/css" />
  

  

  
  <link rel="canonical" href="https://nablarch.github.io/docs/LATEST/doc/application_framework/application_framework/libraries/session_store.html" />
  
    <link rel="top" title="∇Nablarch  5u19 ドキュメント" href="../../../index.html"/>
        <link rel="up" title="7. Nablarchが提供するライブラリ" href="index.html"/>
        <link rel="next" title="7.17.4.2.1. 登録機能での実装例" href="session_store/create_example.html"/>
        <link rel="prev" title="7.16. サービス提供可否チェック" href="service_availability.html"/>
 

  
  <script src="../../../_static/js/modernizr.min.js"></script>

</head>

<body class="wy-body-for-nav" role="document">

   
  <div class="wy-grid-for-nav">

    
    <nav data-toggle="wy-nav-shift" class="wy-nav-side">
      <div class="wy-side-scroll">
        <div class="wy-side-nav-search">
          
  
  <a href="../../../index.html" id="sidebar-title" class="icon"> ∇Nablarch 
  

  
    <div id="sidebar-version">Version: 5u19</div>
  </a>

  <div role="search">
    <form id="google-search-form" class="wy-form" method="get" action="https://www.google.co.jp/search">
      <input type="text" name="text" placeholder="Search docs on google" id="text"/>
      <input type="hidden" name="q" id="q"/>
    </form>
  </div>
    
    

        </div>

        <div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
          
  
  
    <ul class="current">
<li class="toctree-l1"><a class="reference internal" href="../../../about_nablarch/index.html">Nablarchについて</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../about_nablarch/concept.html">Nablarchのコンセプト</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../about_nablarch/concept.html#robustness">Robustness</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../about_nablarch/concept.html#testability">Testability</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../about_nablarch/concept.html#ready-to-use">Ready-to-Use</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../about_nablarch/mvn_module.html">Nablarch のモジュール一覧</a></li>
<li class="toctree-l2"><a class="reference internal" href="../../../about_nablarch/license.html">Nablarchのライセンスについて</a></li>
</ul>
</li>
<li class="toctree-l1 current"><a class="reference internal" href="../../index.html">Nablarchアプリケーションフレームワーク</a><ul class="current">
<li class="toctree-l2 current"><a class="reference internal" href="../index.html">アプリケーションフレームワーク</a><ul class="current">
<li class="toctree-l3"><a class="reference internal" href="../nablarch/index.html">1. Nablarchアプリケーションフレームワークとは</a></li>
<li class="toctree-l3"><a class="reference internal" href="../web/index.html">2. ウェブアプリケーション編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../web_service/index.html">3. ウェブサービス編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../batch/index.html">4. バッチアプリケーション編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../messaging/index.html">5. メッセージング編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../handlers/index.html">6. Nablarchの提供する標準ハンドラ</a></li>
<li class="toctree-l3 current"><a class="reference internal" href="index.html">7. Nablarchが提供するライブラリ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../blank_project/index.html">8. ブランクプロジェクト</a></li>
<li class="toctree-l3"><a class="reference internal" href="../setting_guide/index.html">9. Nablarchアプリケーションフレームワーク設定ガイド</a></li>
<li class="toctree-l3"><a class="reference internal" href="../configuration/index.html">10. デフォルト設定一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../cloud_native/index.html">11. Nablarchクラウドネイティブ対応</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../adaptors/index.html">アダプタ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/log_adaptor.html">logアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/router_adaptor.html">ルーティングアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/webspheremq_adaptor.html">IBM WebSphere MQアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/jaxrs_adaptor.html">JAX-RSアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/doma_adaptor.html">Domaアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/jsr310_adaptor.html">JSR310(Date and Time API)アダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/mail_sender_freemarker_adaptor.html">E-mail FreeMarkerアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/mail_sender_thymeleaf_adaptor.html">E-mail Thymeleafアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/mail_sender_velocity_adaptor.html">E-mail Velocityアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/web_thymeleaf_adaptor.html">ウェブアプリケーション Thymeleafアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/lettuce_adaptor.html">Lettuceアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/slf4j_adaptor.html">SLF4Jアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../adaptors/micrometer_adaptor.html">Micrometerアダプタ</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../example/index.html">Example</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../example/index.html#id1">環境構築手順について</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../example/index.html#id2">アプリケーションの実行手順について</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../extension_components/index.html">Nablarch拡張コンポーネント</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/report/index.html">1. 帳票ライブラリ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#id2">1.1. 概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#id3">1.2. 要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#id7">1.3. 構造</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/report/index.html#report-template">1.4. 実装例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html">2. ワークフローライブラリ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#id3">2.1. 機能概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#id6">2.2. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#id7">2.3. 使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#xor">2.4. XORゲートウェイの進行先ノードの判定方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/doc/index.html#workflow-multi-completion">2.5. マルチインスタンスの完了条件の判定方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/workflow/tool/index.html">3. ワークフロー定義データ生成ツール</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/tool/index.html#id3">3.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/workflow/tool/index.html#id4">3.2. 使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/etl/index.html">4. ETL</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id3">4.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#etl-phase">4.2. ETLの各フェーズの仕様</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id5">4.3. ETLを使用するバッチの設計ポイント</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id9">4.4. 使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/index.html#id18">4.5. 拡張例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../extension_components/etl/etl_maven_plugin.html">5. ETL Mavenプラグイン</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/etl_maven_plugin.html#id2">5.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../extension_components/etl/etl_maven_plugin.html#id3">5.2. 使用方法</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../development_tools/index.html">Nablarch開発ツール</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html">1. 効率的なJava静的チェック</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html#code-analysis">1.1. 構文チェックを行う</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html#code-format">1.2. フォーマットを統一する</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/java_static_analysis/index.html#api">1.3. 許可していないAPIが使用されていないかチェックする</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/ui_dev/index.html">2. フロントエンド上級者向けのUI開発基盤</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/ui_dev/doc/index.html">2.1. Nablarch UI開発基盤 解説書</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/ui_dev/guide/index.html">2.2. JSP/HTML作成ガイド</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/ui_dev/guide/widget_usage/widget_list.html">2.3. UI部品の実装サンプルで提供しているウィジェットの一覧</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/testing_framework/index.html">3. テスティングフレームワーク</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/testing_framework/guide/development_guide/05_UnitTestGuide/index.html">3.1. 単体テスト実施方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/testing_framework/guide/development_guide/06_TestFWGuide/index.html">3.2. 自動テストフレームワークの使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/testing_framework/guide/development_guide/08_TestTools/index.html">3.3. プログラミング工程で使用するツール</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../development_tools/toolbox/index.html">4. アプリケーション開発時に使える便利なツール</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/toolbox/JspStaticAnalysis/index.html">4.1. JSP静的解析ツール</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/toolbox/SqlExecutor/SqlExecutor.html">4.2. Nablarch SQL Executor</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../development_tools/toolbox/JspVerifier/JspVerifier.html">4.3. 業務画面JSP検証ツール</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../examples/index.html">Nablarch実装例集</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/01/index.html">データベースを用いたパスワード認証機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/0101_PBKDF2PasswordEncryptor.html">PBKDF2を用いたパスワード暗号化機能サンプル</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/01/index.html#id12">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/02/index.html">バリデーション機能の拡張</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#extendedvalidation-mailaddressvalidator">メールアドレスバリデーション</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#extendedvalidation-japanesetelnumbervalidator">日本電話番号バリデーション</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/02/index.html#id12">コード値精査</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/03/index.html">検索結果の一覧表示</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id5">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#id8">使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchinfo">ListSearchInfoクラス</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult">listSearchResultタグ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-sort">検索結果の並び替え</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-nopaging">1画面にすべての検索結果を一覧表示する場合の実装方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-defaultcondition">デフォルトの検索条件で検索した結果を初期表示する場合の実装方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-setting">検索結果の一覧表示機能のデフォルト値設定</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-customize">業務アプリケーションへのサンプル実装(タグファイル)の取り込み方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/03/index.html#listsearchresult-tagreference">タグリファレンス</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/04/index.html">フォーマッタ機能の拡張</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/04/0401_ExtendedDataFormatter.html">データフォーマッタの拡張</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/04/0402_ExtendedFieldType.html">データフォーマッタ機能におけるフィールドタイプの拡張</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/05/index.html">データベースを用いたファイル管理機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id2">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id6">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id7">機能</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id10">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/05/index.html#id15">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/06/index.html">CAPTCHA機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/06_Captcha_guide.html">CAPTCHA機能の組み込み手順</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/06/index.html#id21">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/07/index.html">UserAgent情報取得機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id1">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id3">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id8">設定の記述</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/07/index.html#id11">使用例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/08/index.html">HTMLメール送信機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id1">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id3">要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/08/index.html#id14">実装例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/09/index.html">bouncycastleを使用した電子署名つきメールの送信サンプルの使用方法</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id3">環境準備</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id4">電子署名付きメール送信機能の構造</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id5">設定ファイルの準備</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/09/index.html#id7">実行方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/10/index.html">ログ集計サンプルの使用方法</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/10/index.html#id3">提供サンプル一覧</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../examples/11/index.html">メッセージング基盤テストシミュレータサンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id4">用途</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id8">特徴</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id12">要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id15">使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../examples/11/index.html#id18">拡張例</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../nablarch_api/index.html">Nablarch API</a></li>
</ul>

  

        </div>
      </div>
    </nav>

    <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap">

      
      <nav class="wy-nav-top" role="navigation" aria-label="top navigation">
        
          <i data-toggle="wy-nav-top" class="fa fa-bars"></i>
          <a href="../../../index.html">∇Nablarch </a>
        
      </nav>


      
      <div class="wy-nav-content">
        <div class="rst-content">
          

 



<div role="navigation" aria-label="breadcrumbs navigation">
  <ul class="wy-breadcrumbs">
    <li><a href="../../../index.html">Docs</a> &raquo;</li>
      
          <li><a href="../../index.html">Nablarchアプリケーションフレームワーク</a> &raquo;</li>
      
          <li><a href="../index.html">アプリケーションフレームワーク</a> &raquo;</li>
      
          <li><a href="index.html">7. Nablarchが提供するライブラリ</a> &raquo;</li>
      
    <li>7.17. セッションストア</li>
    <li class="wy-breadcrumbs-aside">
      <a href="https://github.com/nablarch" class="fa fa-github">GitHub</a>
    </li>
    <li class="wy-breadcrumbs-aside">
        <a href="https://nablarch.github.io/docs/LATEST/doc/en/index.html" class="en">English</a>
    </li>
  </ul>
  <hr/>
</div>
          <div role="main" class="document" itemscope="itemscope" itemtype="http://schema.org/Article">
           <div itemprop="articleBody">
            
  <div class="section" id="session-store">
<span id="id1"></span><h1>7.17. セッションストア<a class="headerlink" href="#session-store" title="このヘッドラインへのパーマリンク">¶</a></h1>
<div class="contents local topic" id="id2">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#id3" id="id24">機能概要</a><ul>
<li><a class="reference internal" href="#id4" id="id25">セッション変数の保存先を選択できる</a></li>
<li><a class="reference internal" href="#session-store-serialize" id="id26">セッション変数の直列化の仕組みを選択できる</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id6" id="id27">モジュール一覧</a></li>
<li><a class="reference internal" href="#session-store-constraint" id="id28">制約</a><ul>
<li><a class="reference internal" href="#java-beans" id="id29">保存対象はシリアライズ可能なJava Beansオブジェクトであること</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id8" id="id30">使用方法</a><ul>
<li><a class="reference internal" href="#session-store-use-config" id="id31">セッションストアを使用するための設定を行う</a></li>
<li><a class="reference internal" href="#session-store-input-data" id="id32">入力～確認～完了画面間で入力情報を保持する</a></li>
<li><a class="reference internal" href="#session-store-authentication-data" id="id33">認証情報を保持する</a></li>
<li><a class="reference internal" href="#jsp" id="id34">JSPからセッション変数の値を参照する</a></li>
<li><a class="reference internal" href="#hidden" id="id35">HIDDENストアの暗号化設定をカスタマイズする</a></li>
<li><a class="reference internal" href="#id12" id="id36">セッション変数に値が存在しない場合の遷移先画面を指定する</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id13" id="id37">拡張例</a><ul>
<li><a class="reference internal" href="#id14" id="id38">セッション変数の保存先を追加する</a></li>
</ul>
</li>
<li><a class="reference internal" href="#session-store-future-of-store" id="id39">セッションストアの特長と選択基準</a></li>
<li><a class="reference internal" href="#session-store-expiration" id="id40">有効期間の管理方法</a></li>
</ul>
</div>
<p>HTTPセッションを抽象化した機能を提供する。</p>
<p>本機能では、セッションを識別するためにセッションIDを発行し、
クッキー( <code class="docutils literal"><span class="pre">NABLARCH_SID</span></code> (変更可))を使用して、セッションの追跡を行う。
そして、セッションIDごとにセッションストアと呼ばれる保存先への読み書きを行う機能を提供する。</p>
<p>本機能では、セッションIDごとにセッションストアに読み書きされる値をセッション変数と呼ぶ。</p>
<p>簡単な処理の流れを以下の図に示す。</p>
<img alt="../../../_images/session_store.png" src="../../../_images/session_store.png" />
<ol class="arabic simple">
<li><a class="reference internal" href="../handlers/web/SessionStoreHandler.html#session-store-handler"><span>セッション変数保存ハンドラ</span></a> の往路処理で、クッキーから取得したセッションIDをもとに、セッションストアからセッション変数をロードする。</li>
<li>業務アクションから <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/session/SessionUtil.html" title="nablarch.common.web.session.SessionUtil">SessionUtil</a> を通して、セッション変数に対する読み書きを行う。</li>
<li><a class="reference internal" href="../handlers/web/SessionStoreHandler.html#session-store-handler"><span>セッション変数保存ハンドラ</span></a> の復路処理で、セッション変数をセッションストアに保存する。</li>
<li>JSPで参照できるように、セッション変数をリクエストスコープに設定する。(既にリクエストスコープに同名の値が存在する場合は設定しない。)</li>
</ol>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p>本機能を使用する場合、以下の機能は用途が重複するため非推奨となる。</p>
<ul class="last simple">
<li><a class="reference internal" href="tag.html#tag-hidden-encryption"><span>hidden暗号化</span></a></li>
<li><a class="reference internal" href="../handlers/web/session_concurrent_access_handler.html#session-concurrent-access-handler"><span>セッション並行アクセスハンドラ</span></a></li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/fw/ExecutionContext.html" title="nablarch.fw.ExecutionContext">ExecutionContext</a> のセッションスコープにアクセスするAPI</li>
</ul>
</div>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">本機能で使用するクッキー( <code class="docutils literal"><span class="pre">NABLARCH_SID</span></code> )は、HTTPセッションの追跡に使用されるJSESSIONIDとは全く別物である。</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">Nablarch 5u16より、セッションストアの有効期間保存先にHTTPセッション以外も選べるようになった。</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">クッキー( <code class="docutils literal"><span class="pre">NABLARCH_SID</span></code> )で使用するセッションIDには、<a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/java/util/UUID.html" title="java.util.UUID">UUID</a> を使用している。</p>
</div>
<div class="section" id="id3">
<h2><a class="toc-backref" href="#id24">7.17.1. 機能概要</a><a class="headerlink" href="#id3" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="section" id="id4">
<h3><a class="toc-backref" href="#id25">7.17.1.1. セッション変数の保存先を選択できる</a><a class="headerlink" href="#id4" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>セッション変数の保存先を、用途に応じて選択できる。</p>
<p>標準では以下の3種類のストアを提供している。</p>
<ul class="simple">
<li><a class="reference internal" href="#session-store-db-store"><span>DBストア</span></a></li>
<li><a class="reference internal" href="#session-store-hidden-store"><span>HIDDENストア</span></a></li>
<li><a class="reference internal" href="#session-store-http-session-store"><span>HTTPセッションストア</span></a></li>
</ul>
<p>セッションストアの特長や選択基準については、 <a class="reference internal" href="#session-store-future-of-store"><span>セッションストアの特長と選択基準</span></a> を参照。</p>
<p>また、 <a class="reference internal" href="../../adaptors/lettuce_adaptor/redisstore_lettuce_adaptor.html#redisstore-lettuce-adaptor"><span>Redisストア(Lettuce)アダプタ</span></a> を使用することで、Redisを保存先として使用することもできる。</p>
</div>
<div class="section" id="session-store-serialize">
<span id="id5"></span><h3><a class="toc-backref" href="#id26">7.17.1.2. セッション変数の直列化の仕組みを選択できる</a><a class="headerlink" href="#session-store-serialize" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>セッション変数をセッションストアに保存する際の直列化の仕組みを以下から選択できる。
各機能の詳細はリンク先のJavadocを参照。</p>
<ul class="simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/session/encoder/JavaSerializeStateEncoder.html" title="nablarch.common.web.session.encoder.JavaSerializeStateEncoder">Java標準のシリアライズによる直列化(デフォルト)</a></li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/session/encoder/JavaSerializeEncryptStateEncoder.html" title="nablarch.common.web.session.encoder.JavaSerializeEncryptStateEncoder">Java標準のシリアライズによる直列化、および暗号化</a></li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/session/encoder/JaxbStateEncoder.html" title="nablarch.common.web.session.encoder.JaxbStateEncoder">JAXBによるXMLベースの直列化</a></li>
</ul>
</div>
</div>
<div class="section" id="id6">
<h2><a class="toc-backref" href="#id27">7.17.2. モジュール一覧</a><a class="headerlink" href="#id6" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.nablarch.framework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>nablarch-fw-web<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>

<span class="c">&lt;!-- DBストアを使用する場合のみ --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.nablarch.framework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>nablarch-fw-web-dbstore<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</pre></div>
</div>
</div>
<div class="section" id="session-store-constraint">
<span id="id7"></span><h2><a class="toc-backref" href="#id28">7.17.3. 制約</a><a class="headerlink" href="#session-store-constraint" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="section" id="java-beans">
<h3><a class="toc-backref" href="#id29">7.17.3.1. 保存対象はシリアライズ可能なJava Beansオブジェクトであること</a><a class="headerlink" href="#java-beans" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>セッションストアに保存するオブジェクトはシリアライズ可能なJava Beansオブジェクトである必要がある。</p>
<p>オブジェクトが持つプロパティの型は、Javaの基本型もしくはシリアライズ可能なJava Beansオブジェクトである必要がある。
また、プロパティには配列やコレクションを使用することができる。</p>
</div>
</div>
<div class="section" id="id8">
<h2><a class="toc-backref" href="#id30">7.17.4. 使用方法</a><a class="headerlink" href="#id8" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="section" id="session-store-use-config">
<span id="id9"></span><h3><a class="toc-backref" href="#id31">7.17.4.1. セッションストアを使用するための設定を行う</a><a class="headerlink" href="#session-store-use-config" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>セッションストアを使用するためには、 <a class="reference internal" href="../handlers/web/SessionStoreHandler.html#session-store-handler"><span>セッション変数保存ハンドラ</span></a> の設定に加えて、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/session/SessionManager.html" title="nablarch.common.web.session.SessionManager">SessionManager</a> をコンポーネント定義に設定する。</p>
<p>以下に、標準で提供している全ての保存先を使用する場合の設定例を示す。</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="c">&lt;!-- &quot;sessionManager&quot;というコンポーネント名で設定する --&gt;</span>
<span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;sessionManager&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.web.session.SessionManager&quot;</span><span class="nt">&gt;</span>

  <span class="c">&lt;!--</span>
<span class="c">    保存先を明示的に指定しなかった場合にデフォルトで使用されるストア名</span>
<span class="c">  --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;defaultStoreName&quot;</span> <span class="na">value=</span><span class="s">&quot;db&quot;</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- アプリケーションで使用する保存先に合わせてコンポーネントを追加する --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;availableStores&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="c">&lt;!-- HIDDENストア --&gt;</span>
      <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.web.session.store.HiddenStore&quot;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- 設定値の詳細はJavadocを参照 --&gt;</span>
      <span class="nt">&lt;/component&gt;</span>

      <span class="c">&lt;!-- DBストア --&gt;</span>
      <span class="nt">&lt;component-ref</span> <span class="na">name=</span><span class="s">&quot;dbStore&quot;</span> <span class="nt">/&gt;</span>

      <span class="c">&lt;!-- HTTPセッションストア --&gt;</span>
      <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.web.session.store.HttpSessionStore&quot;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- 設定値の詳細はJavadocを参照 --&gt;</span>
      <span class="nt">&lt;/component&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/component&gt;</span>

<span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;dbStore&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.web.session.store.DbStore&quot;</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- 設定値の詳細はJavadocを参照 --&gt;</span>
<span class="nt">&lt;/component&gt;</span>

<span class="c">&lt;!-- DBストアの初期化設定 --&gt;</span>
<span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;initializer&quot;</span>
    <span class="na">class=</span><span class="s">&quot;nablarch.core.repository.initialization.BasicApplicationInitializer&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;initializeList&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="c">&lt;!-- 他のコンポーネントは省略 --&gt;</span>
      <span class="nt">&lt;component-ref</span> <span class="na">name=</span><span class="s">&quot;dbStore&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<p>なお、DBストアを使用する場合、データベース上にセッション変数を保存するためのテーブルを作成する必要がある。</p>
<p>作成するテーブルの定義を以下に示す。</p>
<dl class="docutils">
<dt><cite>USER_SESSION</cite> テーブル</dt>
<dd><table border="1" class="first last docutils">
<colgroup>
<col width="50%" />
<col width="50%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">カラム名</th>
<th class="head">データ型</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>SESSION_ID(PK)</td>
<td><cite>java.lang.String</cite></td>
</tr>
<tr class="row-odd"><td>SESSION_OBJECT</td>
<td><cite>byte[]</cite></td>
</tr>
<tr class="row-even"><td>EXPIRATION_DATETIME</td>
<td><cite>java.sql.Timestamp</cite></td>
</tr>
</tbody>
</table>
</dd>
</dl>
<p>Oracleで正常に動作しないケースがあるため、 <cite>SESSION_ID</cite> はCHARではなくVARCHARで定義すること。</p>
<p>テーブル名およびカラム名は変更可能である。
変更する場合は、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/session/store/DbStore.html#setUserSessionSchema-nablarch.common.web.session.store.UserSessionSchema-" title="nablarch.common.web.session.store.DbStore.setUserSessionSchema(nablarch.common.web.session.store.UserSessionSchema)">DbStore.userSessionSchema</a> に
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/session/store/UserSessionSchema.html" title="nablarch.common.web.session.store.UserSessionSchema">UserSessionSchema</a> のコンポーネントを定義する。</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;userSessionSchema&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.web.session.store.UserSessionSchema&quot;</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 設定値の詳細はJavadocを参照 --&gt;</span>
  <span class="nt">&lt;/component&gt;</span>
<span class="nt">&lt;/property&gt;</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">DBストアを使用した場合、ブラウザが閉じられた場合などにテーブル上にセッション情報が残ってしまうことがある。
そのため、期限切れのセッション情報は定期的に削除する必要がある。</p>
</div>
</div>
<div class="section" id="session-store-input-data">
<span id="id10"></span><h3><a class="toc-backref" href="#id32">7.17.4.2. 入力～確認～完了画面間で入力情報を保持する</a><a class="headerlink" href="#session-store-input-data" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>入力～確認～完了画面間で入力情報を保持する場合、
複数タブでの画面操作を許容するか否かでセッションストアを使い分ける。</p>
<dl class="docutils">
<dt>複数タブでの画面操作を許容しない場合</dt>
<dd>DBストアを使用してデータベース上のテーブルにセッション変数を保持する。</dd>
<dt>複数タブでの画面操作を許容する場合</dt>
<dd><p class="first">HIDDENストアを使用してクライアントサイドにセッション変数を保持する。</p>
<p>HIDDENストアを使用する場合、以下の様に入力・確認画面のJSPに <a class="reference internal" href="tag/tag_reference.html#tag-hidden-store-tag"><span>hiddenStoreタグ</span></a> を使用する。</p>
<div class="last highlight-jsp"><div class="highlight"><pre><span></span><span class="nt">&lt;n:form&gt;</span>
  <span class="c">&lt;!--</span>
<span class="c">    name属性にはコンポーネント設定ファイルに定義した、</span>
<span class="c">    HiddenStoreのparameterNameプロパティの値を設定</span>
<span class="c">  --&gt;</span>
  <span class="nt">&lt;n:hiddenStore</span> <span class="na">name=</span><span class="s">&quot;nablarch_hiddenStore&quot;</span> <span class="nt">/&gt;</span>
  <span class="c">&lt;!-- その他のタグは省略 --&gt;</span>
<span class="nt">&lt;/n:form&gt;</span>
</pre></div>
</div>
</dd>
</dl>
<p>入力～確認～完了画面間でのセッションストアの実装例を以下に示す。</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="session_store/create_example.html">7.17.4.2.1. 登録機能での実装例</a><ul>
<li class="toctree-l2"><a class="reference internal" href="session_store/create_example.html#id2">7.17.4.2.1.1. 入力画面の初期表示</a></li>
<li class="toctree-l2"><a class="reference internal" href="session_store/create_example.html#id3">7.17.4.2.1.2. 入力画面から確認画面へ遷移</a></li>
<li class="toctree-l2"><a class="reference internal" href="session_store/create_example.html#id4">7.17.4.2.1.3. 確認画面から入力画面へ戻る</a></li>
<li class="toctree-l2"><a class="reference internal" href="session_store/create_example.html#id5">7.17.4.2.1.4. 登録処理を実行</a></li>
</ul>
</li>
</ul>
</div>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="session_store/update_example.html">7.17.4.2.2. 更新機能での実装例</a><ul>
<li class="toctree-l2"><a class="reference internal" href="session_store/update_example.html#id2">7.17.4.2.2.1. 入力画面の初期表示</a></li>
<li class="toctree-l2"><a class="reference internal" href="session_store/update_example.html#id3">7.17.4.2.2.2. 入力画面から確認画面へ遷移</a></li>
<li class="toctree-l2"><a class="reference internal" href="session_store/update_example.html#id4">7.17.4.2.2.3. 確認画面から入力画面へ戻る</a></li>
<li class="toctree-l2"><a class="reference internal" href="session_store/update_example.html#id5">7.17.4.2.2.4. 更新処理を実行</a></li>
</ul>
</li>
</ul>
</div>
<div class="admonition tip" id="session-store-form">
<p class="first admonition-title">補足</p>
<p>セッションストアには、Formではなく、業務ロジックを実行するためのオブジェクト(Entity)を格納すること。</p>
<p>Entityを格納することで、セッションストアから取り出したオブジェクトを使って、すぐに業務ロジックを実行できる。
これにより、余計な処理が業務ロジックに混入することを防ぎ、ソースの凝集性が高まることが期待できる。</p>
<p>反対に、Formを格納すると、Formによるデータの受け渡しを誘発し、業務ロジックに不要なデータの変換処理等が入り込み、
密結合なソースが生まれる可能性が高まる。</p>
<p class="last">また、Formは外部の入力値を受け付けるため、バリデーション済みであればよいが、バリデーション前であれば信頼できない値を保持した状態となる。
そのため、セキュリティの観点から、セッションストアに保持するデータは生存期間が長くなるので、
できるだけ安全なデータを保持しておき、脆弱性を埋め込むリスクを減らすという狙いもある。</p>
</div>
</div>
<div class="section" id="session-store-authentication-data">
<span id="id11"></span><h3><a class="toc-backref" href="#id33">7.17.4.3. 認証情報を保持する</a><a class="headerlink" href="#session-store-authentication-data" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>認証情報を保持する場合は、DBストアを使用する。</p>
<p>ログイン、ログアウト時のセッションストアの実装例を以下に示す。</p>
<dl class="docutils">
<dt>アプリケーションにログインする</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="c1">// ログイン前に既存のセッションストアを破棄</span>
<span class="n">SessionUtil</span><span class="o">.</span><span class="na">invalidate</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>

<span class="c1">// ログインユーザの情報をセッションストアに保存</span>
<span class="n">SessionUtil</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ctx</span><span class="o">,</span> <span class="s">&quot;user&quot;</span><span class="o">,</span> <span class="n">user</span><span class="o">,</span> <span class="s">&quot;db&quot;</span><span class="o">);</span>
</pre></div>
</div>
</dd>
<dt>アプリケーションからログアウトする</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="c1">// セッションストア全体を破棄</span>
<span class="n">SessionUtil</span><span class="o">.</span><span class="na">invalidate</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="jsp">
<h3><a class="toc-backref" href="#id34">7.17.4.4. JSPからセッション変数の値を参照する</a><a class="headerlink" href="#jsp" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>通常のリクエストスコープやセッションスコープと同様の手順で、
JSPからセッションストアで保持しているセッション変数の値を参照することができる。</p>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">ただし、既にリクエストスコープ上に同名の値が存在する場合は、JSPからセッション変数の値を参照することはできないため、
セッション変数にはリクエストスコープと重複しない名前を設定すること。</p>
</div>
</div>
<div class="section" id="hidden">
<h3><a class="toc-backref" href="#id35">7.17.4.5. HIDDENストアの暗号化設定をカスタマイズする</a><a class="headerlink" href="#hidden" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p><a class="reference internal" href="#session-store-hidden-store"><span>HIDDENストア</span></a> の暗号化/復号設定のデフォルトは、以下の通りである。</p>
<table border="1" class="docutils">
<colgroup>
<col width="28%" />
<col width="72%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">設定項目</th>
<th class="head">設定内容</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>暗号化アルゴリズム</td>
<td><cite>AES</cite></td>
</tr>
<tr class="row-odd"><td>暗号化キー</td>
<td>アプリケーションサーバ内で共通の自動生成されたキーを使用</td>
</tr>
</tbody>
</table>
<p>アプリケーションサーバが冗長化されている場合、アプリケーションサーバごとに異なるキーを生成するため、復号に失敗してしまうケースがある。
このケースでは、明示的に暗号化/復号のキーを設定する。</p>
<p>暗号化アルゴリズムに <cite>AES</cite> を使用し、暗号化/復号のキーを明示的に設定する設定例を以下に示す。</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.web.session.store.HiddenStore&quot;</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- 他の設定値は省略 --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;encryptor&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.encryption.AesEncryptor&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;base64Key&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;component</span> <span class="na">class=</span><span class="s">&quot;nablarch.common.encryption.Base64Key&quot;</span><span class="nt">&gt;</span>
          <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;key&quot;</span> <span class="na">value=</span><span class="s">&quot;OwYMOWbnLyYy93P8oIayeg==&quot;</span> <span class="nt">/&gt;</span>
          <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;iv&quot;</span> <span class="na">value=</span><span class="s">&quot;NOj5OUN+GlyGYTc6FM0+nw==&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/component&gt;</span>
      <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/component&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
<dl class="docutils">
<dt>ポイント</dt>
<dd><p class="first">暗号化の鍵及びIVは、base64でエンコードした値を設定する。
鍵の強度を高めるためには、以下の機能を使用して鍵及びIVを生成すると良い。</p>
<ul class="simple">
<li><a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/javax/crypto/KeyGenerator.html" title="javax.crypto.KeyGenerator">KeyGenerator</a> を使用して鍵を生成する。</li>
<li><a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/java/security/SecureRandom.html" title="java.security.SecureRandom">SecureRandom</a> を使用してIVを生成する。</li>
</ul>
<p class="last">なお、base64エンコードは <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/util/Base64Util.html" title="nablarch.core.util.Base64Util">Base64Util</a> や、
Java8で追加された <code class="docutils literal"><span class="pre">java.util.Base64.Encoder</span></code> を使用して行うと良い。</p>
</dd>
</dl>
</div>
<div class="section" id="id12">
<h3><a class="toc-backref" href="#id36">7.17.4.6. セッション変数に値が存在しない場合の遷移先画面を指定する</a><a class="headerlink" href="#id12" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>正常な画面遷移では必ずセッション変数が存在しているが、ブラウザの戻るボタンを使用され不正な画面遷移が行われることで、
本来存在しているはずのセッション変数にアクセスできない場合がある。
この場合、セッション変数が存在しないことを示す例外( <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/session/SessionKeyNotFoundException.html" title="nablarch.common.web.session.SessionKeyNotFoundException">SessionKeyNotFoundException</a> )が送出されるので、
この例外を補足することで任意のエラーページに遷移させることが出来る。</p>
<p>以下に実現方法を示す。</p>
<dl class="docutils">
<dt>システムで共通のエラーページに遷移させる</dt>
<dd><p class="first">システムで共通のエラーページに遷移させる場合は、ハンドラで例外を捕捉し遷移先を指定する。</p>
<dl class="last docutils">
<dt>実装例</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleErrorHandler</span> <span class="kd">implements</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="o">{</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Object</span> <span class="n">data</span><span class="o">,</span> <span class="n">ExecutionContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>

    <span class="k">try</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">handleNext</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SessionKeyNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="c1">// セッション変数が存在しないことを示す例外を捕捉し、</span>
      <span class="c1">// 不正な画面遷移を表すエラーページを返す</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="n">HttpErrorResponse</span><span class="o">(</span><span class="n">HttpResponse</span><span class="o">.</span><span class="na">Status</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">.</span><span class="na">getStatusCode</span><span class="o">(),</span>
              <span class="s">&quot;/WEB-INF/view/errors/BadTransition.jsp&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>リクエスト毎に遷移先を指定する</dt>
<dd><p class="first">リクエスト毎に遷移先を切り替える場合には、 <a class="reference internal" href="../handlers/web_interceptor/on_error.html#on-error-interceptor"><span>OnErrorインターセプター</span></a> を使用して遷移先を指定する。
なお、上記のシステムで共通のエラーページに遷移させると併用することで、一部のリクエストのみ遷移先を変更することも出来る。</p>
<dl class="last docutils">
<dt>実装例</dt>
<dd><div class="first last highlight-java"><div class="highlight"><pre><span></span><span class="c1">// 対象例外にセッション変数が存在しないことを示す例外を指定して、リクエスト毎の遷移先を指定する</span>
<span class="nd">@OnError</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="n">SessionKeyNotFoundException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">path</span> <span class="o">=</span> <span class="s">&quot;redirect://error&quot;</span><span class="o">)</span>
<span class="kd">public</span> <span class="n">HttpResponse</span> <span class="nf">backToNew</span><span class="o">(</span><span class="n">HttpRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">ExecutionContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">Project</span> <span class="n">project</span> <span class="o">=</span> <span class="n">SessionUtil</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="s">&quot;project&quot;</span><span class="o">);</span>
  <span class="c1">// 処理は省略</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
</dl>
</div>
</div>
<div class="section" id="id13">
<h2><a class="toc-backref" href="#id37">7.17.5. 拡張例</a><a class="headerlink" href="#id13" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="section" id="id14">
<h3><a class="toc-backref" href="#id38">7.17.5.1. セッション変数の保存先を追加する</a><a class="headerlink" href="#id14" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>セッション変数の保存先を追加するには以下の手順が必要となる。</p>
<ol class="arabic simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/session/SessionStore.html" title="nablarch.common.web.session.SessionStore">SessionStore</a> を継承し、追加したい保存先に対応したクラスを作成する。</li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/session/SessionManager.html#setAvailableStores-java.util.List-" title="nablarch.common.web.session.SessionManager.setAvailableStores(java.util.List)">SessionManager.availableStores</a> に、作成したクラスのコンポーネント定義を追加する。</li>
</ol>
</div>
</div>
<div class="section" id="session-store-future-of-store">
<span id="id15"></span><h2><a class="toc-backref" href="#id39">7.17.6. セッションストアの特長と選択基準</a><a class="headerlink" href="#session-store-future-of-store" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p>デフォルトで使用できるセッション変数の保存先は以下の通り。</p>
<dl class="docutils" id="session-store-db-store">
<dt>DBストア</dt>
<dd><table class="first last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">保存先:</th><td class="field-body"><div class="first line-block">
<div class="line">データベース上のテーブル</div>
</div>
</td>
</tr>
<tr class="field-even field"><th class="field-name">特徴:</th><td class="field-body"><ul class="first last simple">
<li>ローリングメンテナンス等でアプリケーションサーバが停止した場合でもセッション変数の復元が可能。</li>
<li>アプリケーションサーバのヒープ領域を圧迫しない。</li>
<li>同一セッションの処理が複数スレッドで実行された場合後勝ちとなる。(先に保存されたセッションのデータは消失する)</li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl class="docutils" id="session-store-hidden-store">
<dt>HIDDENストア</dt>
<dd><table class="first last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">保存先:</th><td class="field-body"><div class="first line-block">
<div class="line">クライアントサイド</div>
<div class="line">( <cite>hidden</cite> タグを使用して画面間でセッション変数を引き回して実現)</div>
</div>
</td>
</tr>
<tr class="field-even field"><th class="field-name">特徴:</th><td class="field-body"><ul class="first last simple">
<li>複数タブでの画面操作を許容することができる。</li>
<li>アプリケーションサーバのヒープ領域を圧迫しない。</li>
<li>同一セッションの処理が複数スレッドで実行された場合、セッションのデータはそれぞれのスレッドに紐付けて保存される。</li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl class="docutils" id="session-store-http-session-store">
<dt>HTTPセッションストア</dt>
<dd><table class="first last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">保存先:</th><td class="field-body"><div class="first line-block">
<div class="line">アプリケーションサーバのヒープ領域</div>
<div class="line">(アプリケーションサーバの設定によっては、データベースやファイル等に保存される場合がある。)</div>
</div>
</td>
</tr>
<tr class="field-even field"><th class="field-name">特徴:</th><td class="field-body"><ul class="first last simple">
<li>認証情報の様なアプリケーション全体で頻繁に使用する情報の保持に適している。</li>
<li>APサーバ毎に情報を保持するため、スケールアウトを行う際に工夫が必要となる。</li>
<li>画面の入力内容の様な大量データを保存すると、ヒープ領域を圧迫する恐れがある。</li>
<li>同一セッションの処理が複数スレッドで実行された場合後勝ちとなる。(先に保存されたセッションのデータは消失する)</li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<p>上記を踏まえ、各セッションストアの選択基準を以下に示す。</p>
<table border="1" class="docutils">
<colgroup>
<col width="40%" />
<col width="60%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">用途</th>
<th class="head">セッションストア</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>入力～確認～完了画面間で入力情報の保持(複数タブでの画面操作を許容しない)</td>
<td><a class="reference internal" href="#session-store-db-store"><span>DBストア</span></a></td>
</tr>
<tr class="row-odd"><td>入力～確認～完了画面間で入力情報の保持(複数タブでの画面操作を許容する)</td>
<td><a class="reference internal" href="#session-store-hidden-store"><span>HIDDENストア</span></a></td>
</tr>
<tr class="row-even"><td>認証情報の保持</td>
<td><a class="reference internal" href="#session-store-db-store"><span>DBストア</span></a> または <a class="reference internal" href="#session-store-http-session-store"><span>HTTPセッションストア</span></a></td>
</tr>
<tr class="row-odd"><td>検索条件の保持</td>
<td>使用しない <a class="footnote-reference" href="#id20" id="id16">[1]</a></td>
</tr>
<tr class="row-even"><td>検索結果一覧の保持</td>
<td>使用しない <a class="footnote-reference" href="#id21" id="id17">[2]</a></td>
</tr>
<tr class="row-odd"><td>セレクトボックス等の画面表示項目の保持</td>
<td>使用しない <a class="footnote-reference" href="#id22" id="id18">[3]</a></td>
</tr>
<tr class="row-even"><td>エラーメッセージの保持</td>
<td>使用しない <a class="footnote-reference" href="#id22" id="id19">[3]</a></td>
</tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id20" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id16">[1]</a></td><td>認証情報を除き、セッションストアでは複数機能に跨るデータの保持は想定していない。
ブラウザのローカルストレージに検索時のURLを保持するなど、アプリケーションの要件に合わせて設計・実装すること。</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id21" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id17">[2]</a></td><td>一覧情報のような大量データは保存領域を圧迫する可能性があるのでセッションストアには保存しない。</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id22" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label">[3]</td><td><em>(<a class="fn-backref" href="#id18">1</a>, <a class="fn-backref" href="#id19">2</a>)</em> 画面表示に使用する値はリクエストスコープを使用して受け渡しを行えばよい。</td></tr>
</tbody>
</table>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last"><a class="reference internal" href="../../adaptors/lettuce_adaptor/redisstore_lettuce_adaptor.html#redisstore-lettuce-adaptor"><span>Redisストア(Lettuce)アダプタ</span></a> については、保存先が異なるだけで特徴はDBストアと同じになる。</p>
</div>
</div>
<div class="section" id="session-store-expiration">
<span id="id23"></span><h2><a class="toc-backref" href="#id40">7.17.7. 有効期間の管理方法</a><a class="headerlink" href="#session-store-expiration" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p>セッションの有効期間はデフォルトではHTTPセッションに保存されている。
設定を変更することで有効期間の保存先をデータベースにすることができる。</p>
<p>詳細は <a class="reference internal" href="../handlers/web/SessionStoreHandler.html#db-managed-expiration"><span>有効期間をデータベースに保存する</span></a> を参照。</p>
<p>また、 <a class="reference internal" href="../../adaptors/lettuce_adaptor/redisstore_lettuce_adaptor.html#redisstore-lettuce-adaptor"><span>Redisストア(Lettuce)アダプタ</span></a> を使用した場合は有効期限をRedisに保存できる。</p>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">有効期間をデータベースに保存する意義については <a class="reference internal" href="stateless_web_app.html#stateless-web-app"><span>Webアプリケーションをステートレスにする</span></a> 参照。</p>
</div>
</div>
</div>


           </div>
           <div class="articleComments">
            
           </div>
          </div>
          <footer>

    <hr/>

    <div role="contentinfo">
        <p>
            &copy; Copyright 2010-2021, TIS Inc.
        </p>
    </div>
    Built with <a href="http://sphinx-doc.org/">Sphinx</a> using a <a href="https://github.com/snide/sphinx_rtd_theme">theme</a> provided by <a href="https://readthedocs.org">Read the Docs</a>.

</footer>

        </div>
      </div>

    </section>

  </div>
  


  

    <script type="text/javascript">
        var DOCUMENTATION_OPTIONS = {
            URL_ROOT:'../../../',
            VERSION:'5u19',
            COLLAPSE_INDEX:false,
            FILE_SUFFIX:'.html',
            HAS_SOURCE:  true,
            SOURCELINK_SUFFIX: ''
        };
    </script>
      <script type="text/javascript" src="../../../_static/jquery.js"></script>
      <script type="text/javascript" src="../../../_static/underscore.js"></script>
      <script type="text/javascript" src="../../../_static/doctools.js"></script>
      <script type="text/javascript" src="../../../_static/custom.js"></script>
      <script type="text/javascript" src="../../../_static/translations.js"></script>

  

  
  
    <script type="text/javascript" src="../../../_static/js/theme.js"></script>
  

  
  
  <script type="text/javascript">
      jQuery(function () {
          SphinxRtdTheme.StickyNav.enable();
      });
  </script>
   

</body>
</html>