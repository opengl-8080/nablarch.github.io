


<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en" > <!--<![endif]-->
<head>
  <meta charset="utf-8">
  <meta http-equiv='content-language' content='ja'>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <title>7.10.2. Nablarch Validation &mdash; ∇Nablarch  5u19 ドキュメント</title>
  

  
  
  
  

  

  
  
    

  

  
  
    <link rel="stylesheet" href="../../../../_static/custom.css" type="text/css" />
  

  

  
  <link rel="canonical" href="https://nablarch.github.io/docs/LATEST/doc/application_framework/application_framework/libraries/validation/nablarch_validation.html" />
  
    <link rel="top" title="∇Nablarch  5u19 ドキュメント" href="../../../../index.html"/>
        <link rel="up" title="7.10. 入力値のチェック" href="../validation.html"/>
        <link rel="next" title="7.10.3. Bean ValidationとNablarch Validationの機能比較" href="functional_comparison.html"/>
        <link rel="prev" title="7.10.1. Bean Validation" href="bean_validation.html"/>
 

  
  <script src="../../../../_static/js/modernizr.min.js"></script>

</head>

<body class="wy-body-for-nav" role="document">

   
  <div class="wy-grid-for-nav">

    
    <nav data-toggle="wy-nav-shift" class="wy-nav-side">
      <div class="wy-side-scroll">
        <div class="wy-side-nav-search">
          
  
  <a href="../../../../index.html" id="sidebar-title" class="icon"> ∇Nablarch 
  

  
    <div id="sidebar-version">Version: 5u19</div>
  </a>

  <div role="search">
    <form id="google-search-form" class="wy-form" method="get" action="https://www.google.co.jp/search">
      <input type="text" name="text" placeholder="Search docs on google" id="text"/>
      <input type="hidden" name="q" id="q"/>
    </form>
  </div>
    
    

        </div>

        <div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
          
  
  
    <ul class="current">
<li class="toctree-l1"><a class="reference internal" href="../../../../about_nablarch/index.html">Nablarchについて</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../../about_nablarch/concept.html">Nablarchのコンセプト</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../about_nablarch/concept.html#robustness">Robustness</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../about_nablarch/concept.html#testability">Testability</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../about_nablarch/concept.html#ready-to-use">Ready-to-Use</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../about_nablarch/mvn_module.html">Nablarch のモジュール一覧</a></li>
<li class="toctree-l2"><a class="reference internal" href="../../../../about_nablarch/license.html">Nablarchのライセンスについて</a></li>
</ul>
</li>
<li class="toctree-l1 current"><a class="reference internal" href="../../../index.html">Nablarchアプリケーションフレームワーク</a><ul class="current">
<li class="toctree-l2 current"><a class="reference internal" href="../../index.html">アプリケーションフレームワーク</a><ul class="current">
<li class="toctree-l3"><a class="reference internal" href="../../nablarch/index.html">1. Nablarchアプリケーションフレームワークとは</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../web/index.html">2. ウェブアプリケーション編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../web_service/index.html">3. ウェブサービス編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../batch/index.html">4. バッチアプリケーション編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../messaging/index.html">5. メッセージング編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../handlers/index.html">6. Nablarchの提供する標準ハンドラ</a></li>
<li class="toctree-l3 current"><a class="reference internal" href="../index.html">7. Nablarchが提供するライブラリ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../blank_project/index.html">8. ブランクプロジェクト</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../setting_guide/index.html">9. Nablarchアプリケーションフレームワーク設定ガイド</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../configuration/index.html">10. デフォルト設定一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../cloud_native/index.html">11. Nablarchクラウドネイティブ対応</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../adaptors/index.html">アダプタ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/log_adaptor.html">logアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/router_adaptor.html">ルーティングアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/webspheremq_adaptor.html">IBM WebSphere MQアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/jaxrs_adaptor.html">JAX-RSアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/doma_adaptor.html">Domaアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/jsr310_adaptor.html">JSR310(Date and Time API)アダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/mail_sender_freemarker_adaptor.html">E-mail FreeMarkerアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/mail_sender_thymeleaf_adaptor.html">E-mail Thymeleafアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/mail_sender_velocity_adaptor.html">E-mail Velocityアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/web_thymeleaf_adaptor.html">ウェブアプリケーション Thymeleafアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/lettuce_adaptor.html">Lettuceアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/slf4j_adaptor.html">SLF4Jアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../adaptors/micrometer_adaptor.html">Micrometerアダプタ</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../example/index.html">Example</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../example/index.html#id1">環境構築手順について</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../example/index.html#id2">アプリケーションの実行手順について</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../../extension_components/index.html">Nablarch拡張コンポーネント</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../../extension_components/report/index.html">1. 帳票ライブラリ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/report/index.html#id2">1.1. 概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/report/index.html#id3">1.2. 要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/report/index.html#id7">1.3. 構造</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/report/index.html#report-template">1.4. 実装例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../extension_components/workflow/doc/index.html">2. ワークフローライブラリ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/workflow/doc/index.html#id3">2.1. 機能概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/workflow/doc/index.html#id6">2.2. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/workflow/doc/index.html#id7">2.3. 使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/workflow/doc/index.html#xor">2.4. XORゲートウェイの進行先ノードの判定方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/workflow/doc/index.html#workflow-multi-completion">2.5. マルチインスタンスの完了条件の判定方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../extension_components/workflow/tool/index.html">3. ワークフロー定義データ生成ツール</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/workflow/tool/index.html#id3">3.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/workflow/tool/index.html#id4">3.2. 使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../extension_components/etl/index.html">4. ETL</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/etl/index.html#id3">4.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/etl/index.html#etl-phase">4.2. ETLの各フェーズの仕様</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/etl/index.html#id5">4.3. ETLを使用するバッチの設計ポイント</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/etl/index.html#id9">4.4. 使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/etl/index.html#id18">4.5. 拡張例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../extension_components/etl/etl_maven_plugin.html">5. ETL Mavenプラグイン</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/etl/etl_maven_plugin.html#id2">5.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../extension_components/etl/etl_maven_plugin.html#id3">5.2. 使用方法</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../../development_tools/index.html">Nablarch開発ツール</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../../development_tools/java_static_analysis/index.html">1. 効率的なJava静的チェック</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/java_static_analysis/index.html#code-analysis">1.1. 構文チェックを行う</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/java_static_analysis/index.html#code-format">1.2. フォーマットを統一する</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/java_static_analysis/index.html#api">1.3. 許可していないAPIが使用されていないかチェックする</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../development_tools/ui_dev/index.html">2. フロントエンド上級者向けのUI開発基盤</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/ui_dev/doc/index.html">2.1. Nablarch UI開発基盤 解説書</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/ui_dev/guide/index.html">2.2. JSP/HTML作成ガイド</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/ui_dev/guide/widget_usage/widget_list.html">2.3. UI部品の実装サンプルで提供しているウィジェットの一覧</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../development_tools/testing_framework/index.html">3. テスティングフレームワーク</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/testing_framework/guide/development_guide/05_UnitTestGuide/index.html">3.1. 単体テスト実施方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/testing_framework/guide/development_guide/06_TestFWGuide/index.html">3.2. 自動テストフレームワークの使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/testing_framework/guide/development_guide/08_TestTools/index.html">3.3. プログラミング工程で使用するツール</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../development_tools/toolbox/index.html">4. アプリケーション開発時に使える便利なツール</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/toolbox/JspStaticAnalysis/index.html">4.1. JSP静的解析ツール</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/toolbox/SqlExecutor/SqlExecutor.html">4.2. Nablarch SQL Executor</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../development_tools/toolbox/JspVerifier/JspVerifier.html">4.3. 業務画面JSP検証ツール</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../../examples/index.html">Nablarch実装例集</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/01/index.html">データベースを用いたパスワード認証機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/01/0101_PBKDF2PasswordEncryptor.html">PBKDF2を用いたパスワード暗号化機能サンプル</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/01/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/01/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/01/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/01/index.html#id12">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/02/index.html">バリデーション機能の拡張</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/02/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/02/index.html#extendedvalidation-mailaddressvalidator">メールアドレスバリデーション</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/02/index.html#extendedvalidation-japanesetelnumbervalidator">日本電話番号バリデーション</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/02/index.html#id12">コード値精査</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/03/index.html">検索結果の一覧表示</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#id5">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#id8">使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchinfo">ListSearchInfoクラス</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchresult">listSearchResultタグ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchresult-sort">検索結果の並び替え</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchresult-nopaging">1画面にすべての検索結果を一覧表示する場合の実装方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchresult-defaultcondition">デフォルトの検索条件で検索した結果を初期表示する場合の実装方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchresult-setting">検索結果の一覧表示機能のデフォルト値設定</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchresult-customize">業務アプリケーションへのサンプル実装(タグファイル)の取り込み方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/03/index.html#listsearchresult-tagreference">タグリファレンス</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/04/index.html">フォーマッタ機能の拡張</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/04/0401_ExtendedDataFormatter.html">データフォーマッタの拡張</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/04/0402_ExtendedFieldType.html">データフォーマッタ機能におけるフィールドタイプの拡張</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/05/index.html">データベースを用いたファイル管理機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/05/index.html#id2">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/05/index.html#id6">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/05/index.html#id7">機能</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/05/index.html#id10">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/05/index.html#id15">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/06/index.html">CAPTCHA機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/06/06_Captcha_guide.html">CAPTCHA機能の組み込み手順</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/06/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/06/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/06/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/06/index.html#id21">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/07/index.html">UserAgent情報取得機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/07/index.html#id1">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/07/index.html#id3">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/07/index.html#id8">設定の記述</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/07/index.html#id11">使用例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/08/index.html">HTMLメール送信機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/08/index.html#id1">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/08/index.html#id3">要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/08/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/08/index.html#id14">実装例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/09/index.html">bouncycastleを使用した電子署名つきメールの送信サンプルの使用方法</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/09/index.html#id3">環境準備</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/09/index.html#id4">電子署名付きメール送信機能の構造</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/09/index.html#id5">設定ファイルの準備</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/09/index.html#id7">実行方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/10/index.html">ログ集計サンプルの使用方法</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/10/index.html#id3">提供サンプル一覧</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../examples/11/index.html">メッセージング基盤テストシミュレータサンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/11/index.html#id4">用途</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/11/index.html#id8">特徴</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/11/index.html#id12">要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/11/index.html#id15">使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../examples/11/index.html#id18">拡張例</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../../nablarch_api/index.html">Nablarch API</a></li>
</ul>

  

        </div>
      </div>
    </nav>

    <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap">

      
      <nav class="wy-nav-top" role="navigation" aria-label="top navigation">
        
          <i data-toggle="wy-nav-top" class="fa fa-bars"></i>
          <a href="../../../../index.html">∇Nablarch </a>
        
      </nav>


      
      <div class="wy-nav-content">
        <div class="rst-content">
          

 



<div role="navigation" aria-label="breadcrumbs navigation">
  <ul class="wy-breadcrumbs">
    <li><a href="../../../../index.html">Docs</a> &raquo;</li>
      
          <li><a href="../../../index.html">Nablarchアプリケーションフレームワーク</a> &raquo;</li>
      
          <li><a href="../../index.html">アプリケーションフレームワーク</a> &raquo;</li>
      
          <li><a href="../index.html">7. Nablarchが提供するライブラリ</a> &raquo;</li>
      
          <li><a href="../validation.html">7.10. 入力値のチェック</a> &raquo;</li>
      
    <li>7.10.2. Nablarch Validation</li>
    <li class="wy-breadcrumbs-aside">
      <a href="https://github.com/nablarch" class="fa fa-github">GitHub</a>
    </li>
    <li class="wy-breadcrumbs-aside">
        <a href="https://nablarch.github.io/docs/LATEST/doc/en/index.html" class="en">English</a>
    </li>
  </ul>
  <hr/>
</div>
          <div role="main" class="document" itemscope="itemscope" itemtype="http://schema.org/Article">
           <div itemprop="articleBody">
            
  <div class="section" id="nablarch-validation">
<span id="id1"></span><h1>7.10.2. Nablarch Validation<a class="headerlink" href="#nablarch-validation" title="このヘッドラインへのパーマリンク">¶</a></h1>
<div class="contents local topic" id="id2">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#id3" id="id27">機能概要</a><ul>
<li><a class="reference internal" href="#id4" id="id28">バリデーションと型変換及び値の正規化ができる</a></li>
<li><a class="reference internal" href="#id5" id="id29">ドメインバリデーションができる</a></li>
<li><a class="reference internal" href="#nablarch-validation-validator-convertor" id="id30">よく使われるバリデータ及びコンバータが提供されている</a></li>
</ul>
</li>
<li><a class="reference internal" href="#nablarch-validation-module-list" id="id31">モジュール一覧</a></li>
<li><a class="reference internal" href="#id8" id="id32">使用方法</a><ul>
<li><a class="reference internal" href="#nablarch-validation-definition-validator-convertor" id="id33">使用するバリデータとコンバータを設定する</a></li>
<li><a class="reference internal" href="#id10" id="id34">バリデーションルールを設定する</a></li>
<li><a class="reference internal" href="#nablarch-validation-domain-validation" id="id35">ドメインバリデーションを使う</a></li>
<li><a class="reference internal" href="#bean" id="id36">バリデーション対象のBeanを継承する</a></li>
<li><a class="reference internal" href="#nablarch-validation-execute" id="id37">バリデーションを実行する</a></li>
<li><a class="reference internal" href="#nablarch-validation-execute-explicitly" id="id38">バリデーションの明示的な実行を行う</a></li>
<li><a class="reference internal" href="#nablarch-validation-system-char-validator" id="id39">文字種バリデーションを行う</a></li>
<li><a class="reference internal" href="#nablarch-validation-correlation-validation" id="id40">相関バリデーションを行う</a></li>
<li><a class="reference internal" href="#nablarch-validation-nest-bean" id="id41">一括登録のようなBeanの配列を入力とする機能でバリデーションを行う</a></li>
<li><a class="reference internal" href="#nablarch-validation-conditional" id="id42">ラジオボタンやリストボックスの選択値に応じてバリデーション項目を変更する</a></li>
<li><a class="reference internal" href="#id18" id="id43">特定の項目に紐づくバリデーションエラーのメッセージを作りたい</a></li>
<li><a class="reference internal" href="#nablarch-validation-property-name" id="id44">バリデーションエラー時のメッセージに項目名を埋め込みたい</a></li>
<li><a class="reference internal" href="#id20" id="id45">数値型への型変換を行う</a></li>
<li><a class="reference internal" href="#nablarch-validation-database" id="id46">データベースとの相関バリデーションを行う</a></li>
<li><a class="reference internal" href="#id22" id="id47">ウェブアプリケーションのユーザ入力値のチェックを行う</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id23" id="id48">拡張例</a><ul>
<li><a class="reference internal" href="#id24" id="id49">プロジェクト固有のバリデータを追加したい</a></li>
<li><a class="reference internal" href="#id25" id="id50">プロジェクト固有のコンバータを追加したい</a></li>
<li><a class="reference internal" href="#id26" id="id51">バリデーション対象のBeanオブジェクトの生成方法を変更したい</a></li>
</ul>
</li>
</ul>
</div>
<p>この章では、Nablarchで独自に実装したバリデーション機能の解説を行う。</p>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last"><a class="reference internal" href="../validation.html#validation"><span>入力値のチェック</span></a> で説明したように、 <a class="reference internal" href="bean_validation.html"><em>Bean Validation</em></a> を使用することを推奨する。</p>
</div>
<div class="section" id="id3">
<h2><a class="toc-backref" href="#id27">7.10.2.1. 機能概要</a><a class="headerlink" href="#id3" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="section" id="id4">
<h3><a class="toc-backref" href="#id28">7.10.2.1.1. バリデーションと型変換及び値の正規化ができる</a><a class="headerlink" href="#id4" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>Nablarchのバリデーションでは、バリデーションと入力値の型変換、正規化を行うことが出来る。</p>
<p>型変換が行えるため、入力値をBeanクラスの数値型(IntegerやLong)などに直接マッピングすることが出来る。
また、編集された値の編集解除(正規化)なども型変換時に行うことが出来る。</p>
<p>詳細は、 <a class="reference internal" href="#nablarch-validation-definition-validator-convertor"><span>使用するバリデータとコンバータを設定する</span></a> を参照。</p>
</div>
<div class="section" id="id5">
<h3><a class="toc-backref" href="#id29">7.10.2.1.2. ドメインバリデーションができる</a><a class="headerlink" href="#id5" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>ドメインごとにバリデーションルールを定義できる。</p>
<p>ドメインバリデーションを使うと、Beanクラスのsetterにはドメイン名の指定だけを行えばよく、バリデーションルールの変更が容易になる。</p>
<p>詳細は、 <a class="reference internal" href="#id11">ドメインバリデーションを使う</a> を参照。</p>
</div>
<div class="section" id="nablarch-validation-validator-convertor">
<span id="id6"></span><h3><a class="toc-backref" href="#id30">7.10.2.1.3. よく使われるバリデータ及びコンバータが提供されている</a><a class="headerlink" href="#nablarch-validation-validator-convertor" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>Nablarchでは、よく使われるバリデータやコンバータを標準で提供している。
このため、プロジェクト側では <a class="reference internal" href="#nablarch-validation-definition-validator-convertor"><span>使用するバリデータとコンバータを設定する</span></a> だけで、バリデーションが実行できる。</p>
<p>Nablarchで提供しているバリデータ及びコンバータについては以下のリンク先を参照。</p>
<ul class="simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/validator/package-summary.html" title="nablarch.core.validation.validator.package-summary">nablarch.core.validation.validator</a></li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/convertor/package-summary.html" title="nablarch.core.validation.convertor.package-summary">nablarch.core.validation.convertor</a></li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/date/package-summary.html" title="nablarch.common.date.package-summary">nablarch.common.date</a></li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/code/validator/package-summary.html" title="nablarch.common.code.validator.package-summary">nablarch.common.code.validator</a></li>
</ul>
</div>
</div>
<div class="section" id="nablarch-validation-module-list">
<span id="id7"></span><h2><a class="toc-backref" href="#id31">7.10.2.2. モジュール一覧</a><a class="headerlink" href="#nablarch-validation-module-list" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.nablarch.framework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>nablarch-core-validation<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>

<span class="c">&lt;!-- 日付のバリデータ、コンバータを使用する場合のみ --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.nablarch.framework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>nablarch-common-date<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>

<span class="c">&lt;!-- コード値のバリデータ、コンバータを使用する場合のみ --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.nablarch.framework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>nablarch-common-code<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</pre></div>
</div>
</div>
<div class="section" id="id8">
<h2><a class="toc-backref" href="#id32">7.10.2.3. 使用方法</a><a class="headerlink" href="#id8" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="section" id="nablarch-validation-definition-validator-convertor">
<span id="id9"></span><h3><a class="toc-backref" href="#id33">7.10.2.3.1. 使用するバリデータとコンバータを設定する</a><a class="headerlink" href="#nablarch-validation-definition-validator-convertor" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>バリデーションを有効にするには、コンポーネント設定ファイルに使用するバリデータとコンバータの登録が必要となる。</p>
<p>Nablarchが提供しているバリデータ及びコンバータについては、 <a class="reference internal" href="#nablarch-validation-validator-convertor"><span>よく使われるバリデータ及びコンバータが提供されている</span></a> を参照。</p>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">バリデータやコンバータの設定がない場合、バリデーション機能は利用できないので必ず設定を行うこと。</p>
</div>
<dl class="docutils">
<dt>設定例</dt>
<dd><ul class="first simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationManager.html" title="nablarch.core.validation.ValidationManager">ValidationManager</a> を <strong>validationManager</strong> という名前でコンポーネント定義する。</li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationManager.html#setConvertors-java.util.List-" title="nablarch.core.validation.ValidationManager.setConvertors(java.util.List)">ValidationManager#convertors</a> に使用するコンバータを列挙する。</li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationManager.html#setValidators-java.util.List-" title="nablarch.core.validation.ValidationManager.setValidators(java.util.List)">ValidationManager#validators</a> に使用するバリデータを列挙する。</li>
</ul>
<div class="last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;validationManager&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.core.validation.ValidationManager&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;convertors&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="c">&lt;!-- ここに使用するコンバータを列挙する --&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;validators&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="c">&lt;!-- ここに使用するバリデータを列挙する --&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>

  <span class="c">&lt;!--</span>
<span class="c">  他の属性は省略</span>
<span class="c">  詳細は、ValidationManagerのJavadocを参照</span>
<span class="c">   --&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="id10">
<h3><a class="toc-backref" href="#id34">7.10.2.3.2. バリデーションルールを設定する</a><a class="headerlink" href="#id10" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>バリデーションルールのアノテーションは、バリデーション対象のBeanクラスのプロパティ(setter)に設定する。
なお、getterにはアノテーションを指定できないので注意すること。(指定しても意味が無い)</p>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">個別にアノテーションを設定した場合、実装時のミスが増えたりメンテナンスコストが大きくなるため、
後述する <a class="reference internal" href="#nablarch-validation-domain-validation"><span>ドメインバリデーション</span></a> を使うことを推奨する。</p>
</div>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first"><a class="reference internal" href="#nablarch-validation-validator-convertor"><span>Nablarchで提供しているバリデータとコンバータ</span></a> を参照しアノテーションを設定する。</p>
<p>この例では、 <cite>userName</cite> は入力が必須で、全角文字の最大10文字が許容される。
<cite>birthday</cite> は、半角数字の8桁が許容される。
<cite>age</cite> は、整数で3桁まで許容される。</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleForm</span> <span class="o">{</span>

  <span class="nd">@Length</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">10</span><span class="o">)</span>
  <span class="nd">@SystemChar</span><span class="o">(</span><span class="n">charsetDef</span> <span class="o">=</span> <span class="s">&quot;全角文字&quot;</span><span class="o">)</span>
  <span class="nd">@Required</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserName</span><span class="o">(</span><span class="n">String</span> <span class="n">userName</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">userName</span> <span class="o">=</span> <span class="n">userName</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@Length</span><span class="o">(</span><span class="n">min</span> <span class="o">=</span> <span class="mi">8</span><span class="o">,</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">8</span><span class="o">)</span>
  <span class="nd">@SystemChar</span><span class="o">(</span><span class="n">charsetDef</span> <span class="o">=</span> <span class="s">&quot;半角数字&quot;</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBirthday</span><span class="o">(</span><span class="n">String</span> <span class="n">birthday</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">birthday</span> <span class="o">=</span> <span class="n">birthday</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@Digits</span><span class="o">(</span><span class="n">integer</span> <span class="o">=</span> <span class="mi">3</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="n">Integer</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="nablarch-validation-domain-validation">
<span id="id11"></span><h3><a class="toc-backref" href="#id35">7.10.2.3.3. ドメインバリデーションを使う</a><a class="headerlink" href="#nablarch-validation-domain-validation" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>ドメインバリデーションを使うための設定や実装例を示す。</p>
<dl class="docutils">
<dt>ドメインごとのバリデーションルールを定義したEnumの作成</dt>
<dd><p class="first">ドメインバリデーションを利用するには、まずドメインごとのバリデーションルールを持つEnum(ドメインEnum)を作成する。
このEnumは、必ず <cite>DomainDefinition</cite> インタフェースを実装すること。</p>
<p>Enumの各列挙子がドメイン名となる。以下の例では <code class="docutils literal"><span class="pre">NAME</span></code> と <code class="docutils literal"><span class="pre">DATE</span></code> の２つのドメインが定義されている。</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">enum</span> <span class="n">SampleDomain</span> <span class="kd">implements</span> <span class="n">DomainDefinition</span> <span class="o">{</span>

    <span class="nd">@Length</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">10</span><span class="o">)</span>
    <span class="nd">@SystemChar</span><span class="o">(</span><span class="n">charsetDef</span> <span class="o">=</span> <span class="s">&quot;全角文字&quot;</span><span class="o">)</span>
    <span class="n">NAME</span><span class="o">,</span>

    <span class="nd">@Length</span><span class="o">(</span><span class="n">min</span> <span class="o">=</span> <span class="mi">8</span><span class="o">,</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">8</span><span class="o">)</span>
    <span class="nd">@SystemChar</span><span class="o">(</span><span class="n">charsetDef</span> <span class="o">=</span> <span class="s">&quot;半角数字&quot;</span><span class="o">)</span>
    <span class="n">DATE</span><span class="o">;</span>

    <span class="c1">// インタフェースで定義されているメソッドの実装</span>
    <span class="c1">// 実装する内容は、この例と全く同じとすること</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Annotation</span> <span class="nf">getConvertorAnnotation</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">DomainValidationHelper</span><span class="o">.</span><span class="na">getConvertorAnnotation</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Annotation</span><span class="o">&gt;</span> <span class="nf">getValidatorAnnotations</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">DomainValidationHelper</span><span class="o">.</span><span class="na">getValidatorAnnotations</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
<dt>ドメインを表すアノテーションの作成</dt>
<dd><p class="first">ドメインを表すアノテーションを作成する。
<cite>value</cite> 属性には、上記で作成したドメインEnumを指定できるようにする。</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="nd">@ConversionFormat</span>
<span class="nd">@Validation</span>
<span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">Domain</span> <span class="o">{</span>
    <span class="n">SampleDomain</span> <span class="nf">value</span><span class="o">();</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
<dt>バリデーション対象のBeanにドメインを設定</dt>
<dd><p class="first">上記で作成したドメインを表すアノテーションを設定することで、ドメインバリデーションが行われる。</p>
<p>この例では、 <cite>userName</cite> に対して <cite>SampleDomain.NAME</cite> に設定したバリデーションが実行される。
※コンバータが設定されている場合は、コンバータによる値の変換も行われる。</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="nd">@Domain</span><span class="o">(</span><span class="n">SampleDomain</span><span class="o">.</span><span class="na">NAME</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserName</span><span class="o">(</span><span class="n">String</span> <span class="n">userName</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">userName</span> <span class="o">=</span> <span class="n">userName</span><span class="o">;</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
<dt>ドメインバリデーションを有効にするための設定</dt>
<dd><p class="first">ドメインバリデーションを有効にするためには、以下の設定が必要となる。</p>
<ul class="simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/domain/DomainValidationHelper.html" title="nablarch.core.validation.domain.DomainValidationHelper">DomainValidationHelper</a> の設定</li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/domain/DomainValidator.html" title="nablarch.core.validation.domain.DomainValidator">DomainValidator</a> の設定</li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationManager.html" title="nablarch.core.validation.ValidationManager">ValidationManager</a> の設定</li>
<li>初期化コンポーネントの設定</li>
</ul>
<p>以下に例を示す。</p>
<dl class="last docutils">
<dt><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/domain/DomainValidationHelper.html" title="nablarch.core.validation.domain.DomainValidationHelper">DomainValidationHelper</a> の設定</dt>
<dd><ul class="first simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/domain/DomainValidationHelper.html#setDomainAnnotation-java.lang.String-" title="nablarch.core.validation.domain.DomainValidationHelper.setDomainAnnotation(java.lang.String)">domainAnnotationプロパティ</a>
にドメインを表すアノテーションの完全修飾名(FQCN)を設定する。</li>
</ul>
<div class="last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;domainValidationHelper&quot;</span>
    <span class="na">class=</span><span class="s">&quot;nablarch.core.validation.domain.DomainValidationHelper&quot;</span><span class="nt">&gt;</span>

  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;domainAnnotation&quot;</span> <span class="na">value=</span><span class="s">&quot;sample.Domain&quot;</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
</dd>
<dt><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/domain/DomainValidator.html" title="nablarch.core.validation.domain.DomainValidator">DomainValidator</a> の設定</dt>
<dd><ul class="first simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/domain/DomainValidator.html#setDomainValidationHelper-nablarch.core.validation.domain.DomainValidationHelper-" title="nablarch.core.validation.domain.DomainValidator.setDomainValidationHelper(nablarch.core.validation.domain.DomainValidationHelper)">domainValidationHelperプロパティ</a>
に、上記で設定した <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/domain/DomainValidationHelper.html" title="nablarch.core.validation.domain.DomainValidationHelper">DomainValidationHelper</a> を設定する。</li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/domain/DomainValidator.html#setValidators-java.util.List-" title="nablarch.core.validation.domain.DomainValidator.setValidators(java.util.List)">validatorsプロパティ</a>
にバリデータのリストを設定する。</li>
</ul>
<div class="last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;domainValidator&quot;</span>
    <span class="na">class=</span><span class="s">&quot;nablarch.core.validation.domain.DomainValidator&quot;</span><span class="nt">&gt;</span>

  <span class="c">&lt;!--</span>
<span class="c">    DomainValidatorはここには設定しないこと。設定すると循環参照となり、</span>
<span class="c">    システムリポジトリ初期化時にエラーとなる。</span>
<span class="c">  --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;validators&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;component-ref</span> <span class="na">name=</span><span class="s">&quot;requiredValidator&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;domainValidationHelper&quot;</span> <span class="na">ref=</span><span class="s">&quot;domainValidationHelper&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
</dd>
<dt><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationManager.html" title="nablarch.core.validation.ValidationManager">ValidationManager</a> の設定</dt>
<dd><ul class="first simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationManager.html#setDomainValidationHelper-nablarch.core.validation.domain.DomainValidationHelper-" title="nablarch.core.validation.ValidationManager.setDomainValidationHelper(nablarch.core.validation.domain.DomainValidationHelper)">domainValidationHelperプロパティ</a>
に、上記で設定した <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/domain/DomainValidationHelper.html" title="nablarch.core.validation.domain.DomainValidationHelper">DomainValidationHelper</a> を設定する。</li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationManager.html#setValidators-java.util.List-" title="nablarch.core.validation.ValidationManager.setValidators(java.util.List)">validatorsプロパティ</a>
にバリデータのリスト(上記で設定した <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/domain/DomainValidator.html" title="nablarch.core.validation.domain.DomainValidator">DomainValidator</a> を忘れずに) を設定する。</li>
</ul>
<div class="last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;validationManager&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.core.validation.ValidationManager&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;validators&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;component-ref</span> <span class="na">name=</span><span class="s">&quot;domainValidator&quot;</span> <span class="nt">/&gt;</span>
      <span class="c">&lt;!-- 他のバリデータの記述は省略 --&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;domainValidationHelper&quot;</span> <span class="na">ref=</span><span class="s">&quot;domainValidationHelper&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
</dd>
<dt>初期化コンポーネントの設定</dt>
<dd><p class="first">上記で設定した、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/domain/DomainValidator.html" title="nablarch.core.validation.domain.DomainValidator">DomainValidator</a> と
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationManager.html" title="nablarch.core.validation.ValidationManager">ValidationManager</a> を初期化対象のリストに設定する。</p>
<div class="last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;initializer&quot;</span>
    <span class="na">class=</span><span class="s">&quot;nablarch.core.repository.initialization.BasicApplicationInitializer&quot;</span><span class="nt">&gt;</span>

  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;initializeList&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;component-ref</span> <span class="na">name=</span><span class="s">&quot;validationManager&quot;</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;component-ref</span> <span class="na">name=</span><span class="s">&quot;domainValidator&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</dd>
<dt>ドメインバリデーションに複数のバリデーションルールを設定した場合の挙動</dt>
<dd><p class="first">ドメインバリデーションにて１つの入力項目に複数のエラーが存在する場合、精査を１つ目のエラーで打ち切る。</p>
<div class="highlight-java"><div class="highlight"><pre><span></span> <span class="kd">public</span> <span class="kd">enum</span> <span class="n">SampleDomain</span> <span class="kd">implements</span> <span class="n">DomainDefinition</span> <span class="o">{</span>
   <span class="nd">@Length</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">10</span><span class="o">)</span>
   <span class="nd">@SystemChar</span><span class="o">(</span><span class="n">charsetDef</span> <span class="o">=</span> <span class="s">&quot;全角文字&quot;</span><span class="o">)</span>
   <span class="n">NAME</span><span class="o">;</span>
<span class="o">}</span>
</pre></div>
</div>
<p class="last">上記 <cite>NAME</cite> は <cite>Length</cite> バリデーションエラーになった場合、 <cite>SystemChar</cite> バリデーションは行わない。</p>
</dd>
</dl>
</div>
<div class="section" id="bean">
<h3><a class="toc-backref" href="#id36">7.10.2.3.4. バリデーション対象のBeanを継承する</a><a class="headerlink" href="#bean" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>バリデーション対象のBeanは継承することもできるが、以下の理由により継承は推奨しない。</p>
<p>安易に継承を行った場合、親クラスの変更により予期せぬバリデーションが実行されたり、
複雑なバリデーションの上書きルールを意識したアノテーション設定を行わなければならず、間違い(バグ)の原因となる。</p>
<p>なお、Beanを継承した場合は以下の動作となる。</p>
<ul class="simple">
<li>サブクラス側に <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/PropertyName.html" title="nablarch.core.validation.PropertyName">&#64;PropertyName</a> のみをつけた場合、親クラス側のバリデータとコンバータが使用される。</li>
<li>サブクラス側にバリデータ用のアノテーションを1つでもつけた場合、親クラス側のバリデータアノテーションは無視され
サブクラス側のバリデータが使用される。コンバータは親クラスのものが使用される。</li>
<li>サブクラス側にコンバータ用のアノテーションを1つでもつけた場合は、親クラスのコンバータのアノテーションは無視され
サブクラス側のコンバータが使用される。バリデータは親クラスのものが使用される。</li>
<li>サブクラス側にバリデータもコンバータも設定されている場合は、全てサブクラス側の設定が使われる。</li>
<li>親クラス側のコンバータの設定をサブクラス側で削除することはできない。</li>
</ul>
<p>以下の親子関係のBeanの場合、 <cite>ChildForm</cite> の <cite>value</cite> プロパティに対しては、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/convertor/Digits.html" title="nablarch.core.validation.convertor.Digits">&#64;Digits</a> と <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/validator/NumberRange.html" title="nablarch.core.validation.validator.NumberRange">&#64;NumberRange</a> のバリデーションが実行される。</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="c1">// 親Form</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ParentForm</span> <span class="o">{</span>
  <span class="nd">@Digits</span><span class="o">(</span><span class="n">integer</span><span class="o">=</span><span class="mi">5</span><span class="o">,</span> <span class="n">fraction</span><span class="o">=</span><span class="mi">3</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setValue</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// 子Form</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChildForm</span> <span class="kd">extends</span> <span class="n">ParentForm</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="nd">@NumberRange</span><span class="o">(</span><span class="n">min</span><span class="o">=</span><span class="mf">100.0</span><span class="o">,</span> <span class="n">max</span><span class="o">=</span><span class="mf">20000.0</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setValue</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
      <span class="kd">super</span><span class="o">.</span><span class="na">setBdValue</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</div>
<div class="section" id="nablarch-validation-execute">
<span id="id12"></span><h3><a class="toc-backref" href="#id37">7.10.2.3.5. バリデーションを実行する</a><a class="headerlink" href="#nablarch-validation-execute" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>バリデーションは、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationUtil.html" title="nablarch.core.validation.ValidationUtil">ValidationUtil</a> で提供されるメソッドを呼び出すことで実行できる。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first">まず、入力値からBeanオブジェクトを生成するため、バリデーション対象のBeanにMapを引数に取るコンストラクタを実装する。</p>
<p>次にバリデーション対象のBeanにバリデーションを行うためのstaticメソッドを実装する。
このメソッドには、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidateFor.html" title="nablarch.core.validation.ValidateFor">&#64;ValidateFor</a> アノテーションを設定し、バリデーションを識別するための任意の値を引数で指定する。</p>
<p>このメソッドに必要となる処理は、  <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationUtil.html" title="nablarch.core.validation.ValidationUtil">ValidationUtil</a> を使用してバリデーションを実行すること。</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleForm</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="nf">SampleForm</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">userName</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">params</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;userName&quot;</span><span class="o">);</span>
      <span class="n">birthDay</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">params</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;birthDay&quot;</span><span class="o">);</span>
      <span class="n">age</span> <span class="o">=</span> <span class="o">(</span><span class="n">Integer</span><span class="o">)</span> <span class="n">params</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="nd">@Domain</span><span class="o">(</span><span class="n">SampleDomain</span><span class="o">.</span><span class="na">NAME</span><span class="o">)</span>
  <span class="nd">@Required</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserName</span><span class="o">(</span><span class="n">String</span> <span class="n">userName</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">userName</span> <span class="o">=</span> <span class="n">userName</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@Domain</span><span class="o">(</span><span class="n">SampleDomain</span><span class="o">.</span><span class="na">DATE</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBirthday</span><span class="o">(</span><span class="n">String</span> <span class="n">birthday</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">birthday</span> <span class="o">=</span> <span class="n">birthday</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@Domain</span><span class="o">(</span><span class="n">SampleDomain</span><span class="o">.</span><span class="na">AGE</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="n">Integer</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@ValidateFor</span><span class="o">(</span><span class="s">&quot;validate&quot;</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="n">ValidationContext</span><span class="o">&lt;</span><span class="n">SampleForm</span><span class="o">&gt;</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// userNameとbirthdayとageに対してバリデーションを実行</span>
    <span class="n">ValidationUtil</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;userName&quot;</span><span class="o">,</span> <span class="s">&quot;birthday&quot;</span><span class="o">,</span> <span class="s">&quot;age&quot;</span><span class="o">});</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
<p>上記のBeanを使って入力値の <cite>request</cite> をバリデーションするには、以下のように  <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationUtil.html" title="nablarch.core.validation.ValidationUtil">ValidationUtil</a> を使用する。
なお、ウェブアプリケーションの場合には <a class="reference internal" href="#id22">ウェブアプリケーションのユーザ入力値のチェックを行う</a> でより簡易的にバリデーションが行える。</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="c1">// バリデーションの実行</span>
<span class="c1">// SampleFormを使って入力パラメータのrequestをチェックする。</span>
<span class="c1">//</span>
<span class="c1">// 最後の引数にはSampleFormのどのバリデーションメソッドを使用してバリデーションを行うのかを指定する。</span>
<span class="c1">// この例では、validateを指しているので、SampleFormの@ValidateForアノテーションに</span>
<span class="c1">// validateと指定されているメソッドを使ってバリデーションが実行される。</span>
<span class="n">ValidationContext</span><span class="o">&lt;</span><span class="n">SampleForm</span><span class="o">&gt;</span> <span class="n">validationContext</span> <span class="o">=</span>
        <span class="n">ValidationUtil</span><span class="o">.</span><span class="na">validateAndConvertRequest</span><span class="o">(</span><span class="n">SampleForm</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="s">&quot;validate&quot;</span><span class="o">);</span>

<span class="c1">// バリデーションエラーが発生している場合、abortIfInvalidで例外が送出される</span>
<span class="n">validationContext</span><span class="o">.</span><span class="na">abortIfInvalid</span><span class="o">();</span>

<span class="c1">// Mapを引数に取るコンストラクタを使用してFormを生成する。</span>
<span class="c1">// (入力値のrequestが変換されたFormが取得できる)</span>
<span class="n">SampleForm</span> <span class="n">form</span> <span class="o">=</span> <span class="n">validationContext</span><span class="o">.</span><span class="na">createObject</span><span class="o">();</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="nablarch-validation-execute-explicitly">
<span id="id13"></span><h3><a class="toc-backref" href="#id38">7.10.2.3.6. バリデーションの明示的な実行を行う</a><a class="headerlink" href="#nablarch-validation-execute-explicitly" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p><a class="reference internal" href="#id12">バリデーションを実行する</a> では、Beanのプロパティ(setter)に設定したアノテーションベースでバリデーションが実行されたが、
ここではアノテーションを設定するのではなく直接バリデーションを実行する方法を説明する。</p>
<p>原則、 <a class="reference internal" href="#id12">バリデーションを実行する</a> の方法でバリデーションを行うが、個別にバリデーションを実行する必要がある場合には、
この方法でバリデーションを行うこと。
例えば、 <a class="reference internal" href="../code.html#code-use-pattern"><span>コード管理のパターン</span></a> を使っていて、
特定の画面だけパターンを変えてバリデーションしたい場合に、個別にバリデーションを実行する。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first">明示的なバリデーションの実行は、Beanクラスの  <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidateFor.html" title="nablarch.core.validation.ValidateFor">&#64;ValidateFor</a> アノテーションが設定されたメソッドから行う。
なお、明示的バリデーションの実行時に指定できるアノテーションは、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/DirectCallableValidator.html" title="nablarch.core.validation.DirectCallableValidator">DirectCallableValidator</a> を実装しているものに限定される。
(コンバータは指定することはできない。)</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleForm</span> <span class="o">{</span>
  <span class="c1">// 属性は省略</span>

  <span class="nd">@ValidateFor</span><span class="o">(</span><span class="s">&quot;validate&quot;</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="n">ValidationContext</span><span class="o">&lt;</span><span class="n">SampleForm</span><span class="o">&gt;</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>

      <span class="n">ValidationUtil</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&quot;userName&quot;</span><span class="o">,</span> <span class="s">&quot;prefectureCode&quot;</span><span class="o">});</span>

      <span class="c1">// userNameに対して必須チェックを実施</span>
      <span class="n">ValidationUtil</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="s">&quot;userName&quot;</span><span class="o">,</span> <span class="n">Required</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

      <span class="c1">// アノテーションのパラメータはMapで指定する</span>
      <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">params</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;();</span>
      <span class="n">params</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;codeId&quot;</span><span class="o">,</span> <span class="s">&quot;1052&quot;</span><span class="o">);</span>     <span class="c1">// コードID</span>
      <span class="n">params</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;pattern&quot;</span><span class="o">,</span> <span class="s">&quot;A&quot;</span><span class="o">);</span>       <span class="c1">// 使用するコードパターン名</span>
      <span class="n">params</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;messageId&quot;</span><span class="o">,</span> <span class="s">&quot;M4865&quot;</span><span class="o">);</span> <span class="c1">// エラーメッセージのID</span>
      <span class="n">ValidationUtil</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="s">&quot;prefectureCode&quot;</span><span class="o">,</span> <span class="n">CodeValue</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">params</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
<div class="last admonition important">
<p class="first admonition-title">重要</p>
<p class="last">明示的なバリデーションを行うには、対象の項目に対し予めバリデーションを実施しておく必要がある。
詳細は <a class="reference internal" href="#nablarch-validation-execute"><span>バリデーションを実行する</span></a> を参照</p>
</div>
</dd>
</dl>
</div>
<div class="section" id="nablarch-validation-system-char-validator">
<span id="id14"></span><h3><a class="toc-backref" href="#id39">7.10.2.3.7. 文字種バリデーションを行う</a><a class="headerlink" href="#nablarch-validation-system-char-validator" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>文字種バリデーションの定義方法は、 <a class="reference internal" href="bean_validation.html#bean-validation"><span>Bean Validation</span></a> と同じである。
詳細な設定方法は、 <a class="reference internal" href="bean_validation.html#bean-validation-system-char-validator"><span>Bean Validationの文字種バリデーションを行う</span></a> を参照。
ただし、サロゲートペアを許容する設定は <a class="reference internal" href="bean_validation.html#bean-validation"><span>Bean Validation</span></a> と異なるので下記を参照すること。</p>
<p>なお、使用するアノテーションは、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/validator/unicode/SystemChar.html" title="nablarch.core.validation.validator.unicode.SystemChar">&#64;SystemChar</a> で、
<a class="reference internal" href="bean_validation.html#bean-validation"><span>Bean Validation</span></a> とは完全修飾名が異なる(アノテーション名は同一)ので注意すること。</p>
<dl class="docutils">
<dt>サロゲートペアを許容する</dt>
<dd><p class="first">このバリデーションでは、デフォルトではサロゲートペアを許容しない。
（例え <cite>LiteralCharsetDef</cite> で明示的にサロゲートペアの文字を定義していても許容しない）</p>
<p>サロゲートペアを許容する場合は次のようにコンポーネント設定ファイルに <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/validator/unicode/SystemCharValidator.html#setAllowSurrogatePair-boolean-" title="nablarch.core.validation.validator.unicode.SystemCharValidator.setAllowSurrogatePair(boolean)">SystemCharValidator#allowSurrogatePair</a> を設定する必要がある。</p>
<div class="last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&quot;systemCharValidator&quot;</span> <span class="na">class=</span><span class="s">&quot;nablarch.core.validation.validator.unicode.SystemCharValidator&quot;</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- サロゲートペアを許容する --&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;allowSurrogatePair&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>

  <span class="c">&lt;!-- その他のプロパティは省略 --&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="nablarch-validation-correlation-validation">
<span id="id15"></span><h3><a class="toc-backref" href="#id40">7.10.2.3.8. 相関バリデーションを行う</a><a class="headerlink" href="#nablarch-validation-correlation-validation" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>複数の項目を使用した相関バリデーションは、Beanクラスの <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidateFor.html" title="nablarch.core.validation.ValidateFor">&#64;ValidateFor</a> アノテーションを設定したメソッドで実装する。
このメソッドでまずは項目ごとのバリデーションを実施し、エラーが発生しなかった場合に複数項目を使用したバリデーションを実行する。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first">この例では、mailAddressとconfirmMailAddressを使用した相関バリデーションを行っている。</p>
<p>相関バリデーションでエラーとなった場合は、ユーザに通知すべきメッセージを示すメッセージIDを明示的に <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationContext.html" title="nablarch.core.validation.ValidationContext">ValidationContext</a> に追加する。</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleForm</span> <span class="o">{</span>

  <span class="nd">@Domain</span><span class="o">(</span><span class="n">SampleDomain</span><span class="o">.</span><span class="na">MAIL</span><span class="o">)</span>
  <span class="nd">@Required</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMailAddress</span><span class="o">(</span><span class="n">String</span> <span class="n">mailAddress</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">mailAddress</span> <span class="o">=</span> <span class="n">mailAddress</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@Domain</span><span class="o">(</span><span class="n">SampleDomain</span><span class="o">.</span><span class="na">MAIL</span><span class="o">)</span>
  <span class="nd">@Required</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setConfirmMailAddress</span><span class="o">(</span><span class="n">String</span> <span class="n">confirmMailAddress</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">confirmMailAddress</span> <span class="o">=</span> <span class="n">confirmMailAddress</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@ValidateFor</span><span class="o">(</span><span class="s">&quot;validate&quot;</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="n">ValidationContext</span><span class="o">&lt;</span><span class="n">SampleForm</span><span class="o">&gt;</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
      <span class="c1">// mailAddressとconfirmMailAddressのバリデーションを実施</span>
      <span class="n">ValidationUtil</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;mailAddress&quot;</span><span class="o">,</span> <span class="s">&quot;confirmMailAddress&quot;</span><span class="o">});</span>

      <span class="c1">// エラーが発生した場合は、相関バリデーションを実施しない</span>
      <span class="k">if</span> <span class="o">(!</span><span class="n">context</span><span class="o">.</span><span class="na">isValid</span><span class="o">())</span> <span class="o">{</span>
          <span class="k">return</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="c1">// formオブジェクトを生成し、相関バリデーションを実施</span>
      <span class="n">SampleForm</span> <span class="n">form</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">createObject</span><span class="o">();</span>
      <span class="k">if</span> <span class="o">(!</span><span class="n">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">form</span><span class="o">.</span><span class="na">mailAddress</span><span class="o">,</span> <span class="n">form</span><span class="o">.</span><span class="na">confirmMailAddress</span><span class="o">))</span> <span class="o">{</span>
          <span class="c1">// mailAddressとconfirmMailAddressが一致していない場合エラー</span>
          <span class="n">context</span><span class="o">.</span><span class="na">addMessage</span><span class="o">(</span><span class="s">&quot;compareMailAddress&quot;</span><span class="o">);</span>
      <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="nablarch-validation-nest-bean">
<span id="id16"></span><h3><a class="toc-backref" href="#id41">7.10.2.3.9. 一括登録のようなBeanの配列を入力とする機能でバリデーションを行う</a><a class="headerlink" href="#nablarch-validation-nest-bean" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>一括登録のように同一の情報を複数入力するケースがある。
このような場合には、バリデーション対象のBeanに対してネストしたBeanを定義することで対応する。</p>
<p>ネストしたBeanのsetterには  <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationTarget.html" title="nablarch.core.validation.ValidationTarget">&#64;ValidationTarget</a> アノテーションを設定し、ネストしたBeanのサイズを指定する。
要素数が固定(コンパイル時に決まっている)の場合には <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationTarget.html#size--" title="nablarch.core.validation.ValidationTarget.size()">size</a> 属性に指定する。可変の場合には、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationTarget.html#sizeKey--" title="nablarch.core.validation.ValidationTarget.sizeKey()">sizeKey</a> 属性にサイズを持つプロパティの名前を設定する。</p>
<p>この例では <cite>AddressForm</cite> の情報を一括で入力できるため、 <cite>SampleForm</cite> は <cite>AddressForm</cite> を配列として保持している。
また、サイズはコンパイル時には決まっていないため、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationTarget.html#sizeKey--" title="nablarch.core.validation.ValidationTarget.sizeKey()">sizeKey</a> を使用している。</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleForm</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">AddressForm</span><span class="o">[]</span> <span class="n">addressForms</span><span class="o">;</span>
    <span class="c1">// addressFormsのサイズ</span>
    <span class="c1">// 画面のhiddenなどから送信すること</span>
    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">addressSize</span><span class="o">;</span>

    <span class="nd">@ValidationTarget</span><span class="o">(</span><span class="n">sizeKey</span> <span class="o">=</span> <span class="s">&quot;addressSize&quot;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAddressForms</span><span class="o">(</span><span class="n">AddressForm</span><span class="o">[]</span> <span class="n">addressForms</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">addressForms</span> <span class="o">=</span> <span class="n">addressForms</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Domain</span><span class="o">(</span><span class="n">SampleDomain</span><span class="o">.</span><span class="na">SIZE</span><span class="o">)</span>
    <span class="nd">@Required</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAddressSize</span><span class="o">(</span><span class="n">Integer</span> <span class="n">addressSize</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">addressSize</span> <span class="o">=</span> <span class="n">addressSize</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@ValidateFor</span><span class="o">(</span><span class="s">&quot;validate&quot;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="n">ValidationContext</span><span class="o">&lt;</span><span class="n">SampleForm</span><span class="o">&gt;</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ValidationUtil</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;addressSize&quot;</span><span class="o">,</span> <span class="s">&quot;addressForms&quot;</span><span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddressForm</span> <span class="o">{</span>
    <span class="c1">// 省略</span>
<span class="o">}</span>
</pre></div>
</div>
</div>
<div class="section" id="nablarch-validation-conditional">
<span id="id17"></span><h3><a class="toc-backref" href="#id42">7.10.2.3.10. ラジオボタンやリストボックスの選択値に応じてバリデーション項目を変更する</a><a class="headerlink" href="#nablarch-validation-conditional" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/WebUtil.html" title="nablarch.common.web.WebUtil">WebUtil</a> クラスを使うことで、ラジオボタンやリストボックスなどの選択値に応じてバリデーション項目を切り替えることが出来る。</p>
<p>この例では、画面から送信された <strong>form.radio</strong> の値が <strong>ptn1</strong> の場合に、 <cite>item1</cite> のみバリデーションを行う。
<strong>ptn1</strong> 以外の場合には、 <cite>item1</cite> と <cite>item2</cite> のバリデーションを行う。</p>
<div class="highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleForm</span> <span class="o">{</span>

    <span class="c1">// プロパティは省略</span>

    <span class="nd">@ValidateFor</span><span class="o">(</span><span class="s">&quot;validate&quot;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="n">ValidationContext</span><span class="o">&lt;</span><span class="n">SampleForm</span><span class="o">&gt;</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">WebUtil</span><span class="o">.</span><span class="na">containsPropertyKeyValue</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="s">&quot;form.radio&quot;</span><span class="o">,</span> <span class="s">&quot;ptn1&quot;</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">ValidationUtil</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;item1&quot;</span><span class="o">});</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">ValidationUtil</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;item1&quot;</span><span class="o">,</span> <span class="s">&quot;item2&quot;</span><span class="o">});</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">この例では、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/WebUtil.html#containsPropertyKeyValue-nablarch.core.validation.ValidationContext-java.lang.String-java.lang.String-" title="nablarch.common.web.WebUtil.containsPropertyKeyValue(nablarch.core.validation.ValidationContext-java.lang.String-java.lang.String)">WebUtil.containsPropertyKeyValue</a> を使って、送信された値までチェックを行っているが、
単純にラジオボタンのチェック有無だけを調べたいのであれば <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/common/web/WebUtil.html#containsPropertyKey-nablarch.core.validation.ValidationContext-java.lang.String-" title="nablarch.common.web.WebUtil.containsPropertyKey(nablarch.core.validation.ValidationContext-java.lang.String)">WebUtil.containsPropertyKey</a> を使う。</p>
</div>
</div>
<div class="section" id="id18">
<h3><a class="toc-backref" href="#id43">7.10.2.3.11. 特定の項目に紐づくバリデーションエラーのメッセージを作りたい</a><a class="headerlink" href="#id18" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p><a class="reference internal" href="bean_validation.html#bean-validation-create-message-for-property"><span>Bean Validationの特定の項目に紐づくバリデーションエラーのメッセージを作りたい</span></a> を参照。</p>
</div>
<div class="section" id="nablarch-validation-property-name">
<span id="id19"></span><h3><a class="toc-backref" href="#id44">7.10.2.3.12. バリデーションエラー時のメッセージに項目名を埋め込みたい</a><a class="headerlink" href="#nablarch-validation-property-name" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>メッセージに項目名を埋め込むには、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/PropertyName.html" title="nablarch.core.validation.PropertyName">&#64;PropertyName</a> アノテーションを使用して、バリデーション対象の項目の項目名を指定する。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first">メッセージには、項目名を埋め込むためのパターン文字を使用する。
項目名は、必ず先頭に指定されるので項目名を埋め込む箇所には、 <strong>{0}</strong> と指定する。</p>
<div class="highlight-properties"><div class="highlight"><pre><span></span><span class="na">required.message</span> <span class="o">=</span> <span class="s">{0}を入力してください。</span>
</pre></div>
</div>
<p>バリデーション対象の項目に、バリデーション用のアノテーションとともに項目名を設定する <cite>&#64;PropertyName</cite> アノテーションを設定する。</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleForm</span> <span class="o">{</span>

    <span class="nd">@Domain</span><span class="o">(</span><span class="n">SampleDomain</span><span class="o">.</span><span class="na">NAME</span><span class="o">)</span>
    <span class="nd">@Required</span>
    <span class="nd">@PropertyName</span><span class="o">(</span><span class="s">&quot;名前&quot;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserName</span><span class="o">(</span><span class="n">String</span> <span class="n">userName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">userName</span> <span class="o">=</span> <span class="n">userName</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Domain</span><span class="o">(</span><span class="n">SampleDomain</span><span class="o">.</span><span class="na">DATE</span><span class="o">)</span>
    <span class="nd">@PropertyName</span><span class="o">(</span><span class="s">&quot;誕生日&quot;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBirthday</span><span class="o">(</span><span class="n">String</span> <span class="n">birthday</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">birthday</span> <span class="o">=</span> <span class="n">birthday</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
<dt>生成されるメッセージ</dt>
<dd>上記実装で、 <cite>username</cite> プロパティで必須エラーが発生すると、生成されるメッセージは <strong>「名前を入力してください。」</strong> となる。</dd>
</dl>
</div>
<div class="section" id="id20">
<h3><a class="toc-backref" href="#id45">7.10.2.3.13. 数値型への型変換を行う</a><a class="headerlink" href="#id20" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>バリデーション後にBeanクラスの数値型に入力値を変換したい場合、その項目には必ず <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/convertor/Digits.html" title="nablarch.core.validation.convertor.Digits">&#64;Digits</a> アノテーションが必要となる。
※ドメインバリデーションの場合、ドメインEnumに対して設定が必要となる。</p>
<p>なお、数値型へ変換するためのコンバータが <a class="reference internal" href="#nablarch-validation-definition-validator-convertor"><span>使用するバリデータとコンバータを設定する</span></a> の手順に従い設定されていることが前提となる。</p>
<dl class="docutils">
<dt>実装例</dt>
<dd><p class="first">この例では、setterに指定しているが、ドメインバリデーションを使用したドメインEnumへの指定を推奨する。</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleForm</span> <span class="o">{</span>

    <span class="nd">@PropertyName</span><span class="o">(</span><span class="s">&quot;年齢&quot;</span><span class="o">)</span>
    <span class="nd">@Digits</span><span class="o">(</span><span class="n">integer</span> <span class="o">=</span> <span class="mi">3</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="n">Integer</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
</dl>
</div>
<div class="section" id="nablarch-validation-database">
<span id="id21"></span><h3><a class="toc-backref" href="#id46">7.10.2.3.14. データベースとの相関バリデーションを行う</a><a class="headerlink" href="#nablarch-validation-database" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>データベースとの相関バリデーションは、業務アクションで行う。</p>
<p>業務アクションで行う理由は、<a class="reference internal" href="bean_validation.html#bean-validation-database-validation"><span>Bean Validationのデータベースとの相関バリデーション</span></a> を参照。</p>
</div>
<div class="section" id="id22">
<h3><a class="toc-backref" href="#id47">7.10.2.3.15. ウェブアプリケーションのユーザ入力値のチェックを行う</a><a class="headerlink" href="#id22" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>ウェブアプリケーションのユーザ入力値のチェックは <a class="reference internal" href="../../handlers/web_interceptor/InjectForm.html#inject-form-interceptor"><span>InjectForm インターセプター</span></a> を使用して行う。
詳細は、 <a class="reference internal" href="../../handlers/web_interceptor/InjectForm.html#inject-form-interceptor"><span>InjectForm インターセプター</span></a> を参照</p>
</div>
</div>
<div class="section" id="id23">
<h2><a class="toc-backref" href="#id48">7.10.2.4. 拡張例</a><a class="headerlink" href="#id23" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="section" id="id24">
<h3><a class="toc-backref" href="#id49">7.10.2.4.1. プロジェクト固有のバリデータを追加したい</a><a class="headerlink" href="#id24" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>バリデータを追加するには、以下の手順が必要となる。</p>
<ol class="arabic simple">
<li>アノテーションの作成</li>
<li>バリデータの作成</li>
<li>設定ファイルにバリデータの登録</li>
</ol>
<p>以下に手順を示す。</p>
<dl class="docutils">
<dt>アノテーションの作成</dt>
<dd><p class="first">アノテーションは以下の条件を満たすこと。</p>
<ul class="simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/Validation.html" title="nablarch.core.validation.Validation">&#64;Validation</a> アノテーションを設定すること。</li>
<li><a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Target.html" title="java.lang.annotation.Target">&#64;Target</a> アノテーションで <cite>ElementType.METHOD</cite> を設定すること。</li>
<li><a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Retention.html" title="java.lang.annotation.Retention">&#64;Retention</a> アノテーションで <cite>RetentionPolicy.RUNTIME</cite> を設定すること。</li>
</ul>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="nd">@Validation</span>
<span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">Sample</span> <span class="o">{</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
<dt>バリデータの作成</dt>
<dd><p class="first">バリデータは、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/Validator.html" title="nablarch.core.validation.Validator">Validator</a> インタフェースを実装し、バリデーションロジックを実装する。</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleValidator</span> <span class="kd">implements</span> <span class="n">Validator</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Annotation</span><span class="o">&gt;</span> <span class="nf">getAnnotationClass</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">Sample</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">boolean</span> <span class="nf">validate</span><span class="o">(</span><span class="n">ValidationContext</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">context</span><span class="o">,</span>
      <span class="c1">// 省略</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
<dt>設定ファイルにバリデータの登録</dt>
<dd><a class="reference internal" href="#nablarch-validation-definition-validator-convertor"><span>使用するバリデータとコンバータを設定する</span></a> を参照。</dd>
</dl>
</div>
<div class="section" id="id25">
<h3><a class="toc-backref" href="#id50">7.10.2.4.2. プロジェクト固有のコンバータを追加したい</a><a class="headerlink" href="#id25" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>コンバータを追加するには、以下の手順が必要となる。</p>
<ol class="arabic simple">
<li>コンバータの作成</li>
<li>設定ファイルにコンバータの登録</li>
</ol>
<p>以下に手順を示す。</p>
<dl class="docutils">
<dt>コンバータの作成</dt>
<dd><p class="first">コンバータは、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/Convertor.html" title="nablarch.core.validation.Convertor">Convertor</a> インタフェースを実装し、型変換ロジックなどを実装する。</p>
<div class="last highlight-java"><div class="highlight"><pre><span></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleConvertor</span> <span class="kd">implements</span> <span class="n">Convertor</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">getTargetClass</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">Short</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">boolean</span> <span class="nf">isConvertible</span><span class="o">(</span><span class="n">ValidationContext</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">context</span><span class="o">,</span> <span class="n">String</span> <span class="n">propertyName</span><span class="o">,</span> <span class="n">Object</span> <span class="n">propertyDisplayName</span><span class="o">,</span>
            <span class="n">Object</span> <span class="n">value</span><span class="o">,</span> <span class="n">Annotation</span> <span class="n">format</span><span class="o">)</span> <span class="o">{</span>

        <span class="kt">boolean</span> <span class="n">convertible</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">Short</span><span class="o">.</span><span class="na">valueOf</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">value</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NumberFormatException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">convertible</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">convertible</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(!</span><span class="n">convertible</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">context</span><span class="o">.</span><span class="na">addResultMessage</span><span class="o">(</span><span class="n">propertyName</span><span class="o">,</span> <span class="s">&quot;sampleconvertor.message&quot;</span><span class="o">,</span> <span class="n">propertyDisplayName</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">convertible</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Object</span> <span class="nf">convert</span><span class="o">(</span><span class="n">ValidationContext</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">context</span><span class="o">,</span> <span class="n">String</span> <span class="n">propertyName</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">,</span> <span class="n">Annotation</span> <span class="n">format</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">Short</span><span class="o">.</span><span class="na">valueOf</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
</dd>
<dt>設定ファイルにコンバータの登録</dt>
<dd><a class="reference internal" href="#nablarch-validation-definition-validator-convertor"><span>使用するバリデータとコンバータを設定する</span></a> を参照。</dd>
</dl>
</div>
<div class="section" id="id26">
<h3><a class="toc-backref" href="#id51">7.10.2.4.3. バリデーション対象のBeanオブジェクトの生成方法を変更したい</a><a class="headerlink" href="#id26" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>バリデーション対象のBeanオブジェクトの生成方法を変更するには、以下の手順が必要となる。</p>
<ol class="arabic simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/FormCreator.html" title="nablarch.core.validation.FormCreator">FormCreator</a> の実装クラスの作成</li>
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/validation/ValidationManager.html#setFormCreator-nablarch.core.validation.FormCreator-" title="nablarch.core.validation.ValidationManager.setFormCreator(nablarch.core.validation.FormCreator)">ValidationManager.formCreator</a> に、作成したクラスのコンポーネント定義を追加</li>
</ol>
</div>
</div>
</div>


           </div>
           <div class="articleComments">
            
           </div>
          </div>
          <footer>

    <hr/>

    <div role="contentinfo">
        <p>
            &copy; Copyright 2010-2021, TIS Inc.
        </p>
    </div>
    Built with <a href="http://sphinx-doc.org/">Sphinx</a> using a <a href="https://github.com/snide/sphinx_rtd_theme">theme</a> provided by <a href="https://readthedocs.org">Read the Docs</a>.

</footer>

        </div>
      </div>

    </section>

  </div>
  


  

    <script type="text/javascript">
        var DOCUMENTATION_OPTIONS = {
            URL_ROOT:'../../../../',
            VERSION:'5u19',
            COLLAPSE_INDEX:false,
            FILE_SUFFIX:'.html',
            HAS_SOURCE:  true,
            SOURCELINK_SUFFIX: ''
        };
    </script>
      <script type="text/javascript" src="../../../../_static/jquery.js"></script>
      <script type="text/javascript" src="../../../../_static/underscore.js"></script>
      <script type="text/javascript" src="../../../../_static/doctools.js"></script>
      <script type="text/javascript" src="../../../../_static/custom.js"></script>
      <script type="text/javascript" src="../../../../_static/translations.js"></script>

  

  
  
    <script type="text/javascript" src="../../../../_static/js/theme.js"></script>
  

  
  
  <script type="text/javascript">
      jQuery(function () {
          SphinxRtdTheme.StickyNav.enable();
      });
  </script>
   

</body>
</html>