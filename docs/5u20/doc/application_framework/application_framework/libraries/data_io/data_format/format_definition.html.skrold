


<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en" > <!--<![endif]-->
<head>
  <meta charset="utf-8">
  <meta http-equiv='content-language' content='ja'>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <title>7.4.2.3.1.1. フォーマット定義ファイルの記述ルール &mdash; ∇Nablarch  5u19 ドキュメント</title>
  

  
  
  
  

  

  
  
    

  

  
  
    <link rel="stylesheet" href="../../../../../_static/custom.css" type="text/css" />
  

  

  
  <link rel="canonical" href="https://nablarch.github.io/docs/LATEST/doc/application_framework/application_framework/libraries/data_io/data_format/format_definition.html" />
  
    <link rel="top" title="∇Nablarch  5u19 ドキュメント" href="../../../../../index.html"/>
        <link rel="up" title="7.4.2. 汎用データフォーマット" href="../data_format.html"/>
        <link rel="next" title="7.4.2.3.1.1.4.2.1. Fixed(固定長)のマルチフォーマット定義のサンプル集" href="multi_format_example.html"/>
        <link rel="prev" title="7.4.2. 汎用データフォーマット" href="../data_format.html"/>
 

  
  <script src="../../../../../_static/js/modernizr.min.js"></script>

</head>

<body class="wy-body-for-nav" role="document">

   
  <div class="wy-grid-for-nav">

    
    <nav data-toggle="wy-nav-shift" class="wy-nav-side">
      <div class="wy-side-scroll">
        <div class="wy-side-nav-search">
          
  
  <a href="../../../../../index.html" id="sidebar-title" class="icon"> ∇Nablarch 
  

  
    <div id="sidebar-version">Version: 5u19</div>
  </a>

  <div role="search">
    <form id="google-search-form" class="wy-form" method="get" action="https://www.google.co.jp/search">
      <input type="text" name="text" placeholder="Search docs on google" id="text"/>
      <input type="hidden" name="q" id="q"/>
    </form>
  </div>
    
    

        </div>

        <div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
          
  
  
    <ul class="current">
<li class="toctree-l1"><a class="reference internal" href="../../../../../about_nablarch/index.html">Nablarchについて</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../../../about_nablarch/concept.html">Nablarchのコンセプト</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../about_nablarch/concept.html#robustness">Robustness</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../about_nablarch/concept.html#testability">Testability</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../about_nablarch/concept.html#ready-to-use">Ready-to-Use</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../about_nablarch/mvn_module.html">Nablarch のモジュール一覧</a></li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../about_nablarch/license.html">Nablarchのライセンスについて</a></li>
</ul>
</li>
<li class="toctree-l1 current"><a class="reference internal" href="../../../../index.html">Nablarchアプリケーションフレームワーク</a><ul class="current">
<li class="toctree-l2 current"><a class="reference internal" href="../../../index.html">アプリケーションフレームワーク</a><ul class="current">
<li class="toctree-l3"><a class="reference internal" href="../../../nablarch/index.html">1. Nablarchアプリケーションフレームワークとは</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../web/index.html">2. ウェブアプリケーション編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../web_service/index.html">3. ウェブサービス編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../batch/index.html">4. バッチアプリケーション編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../messaging/index.html">5. メッセージング編</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../handlers/index.html">6. Nablarchの提供する標準ハンドラ</a></li>
<li class="toctree-l3 current"><a class="reference internal" href="../../index.html">7. Nablarchが提供するライブラリ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../blank_project/index.html">8. ブランクプロジェクト</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../setting_guide/index.html">9. Nablarchアプリケーションフレームワーク設定ガイド</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../configuration/index.html">10. デフォルト設定一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../cloud_native/index.html">11. Nablarchクラウドネイティブ対応</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../adaptors/index.html">アダプタ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../adaptors/log_adaptor.html">logアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../adaptors/router_adaptor.html">ルーティングアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../adaptors/webspheremq_adaptor.html">IBM WebSphere MQアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../adaptors/jaxrs_adaptor.html">JAX-RSアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../adaptors/doma_adaptor.html">Domaアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../adaptors/jsr310_adaptor.html">JSR310(Date and Time API)アダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../adaptors/mail_sender_freemarker_adaptor.html">E-mail FreeMarkerアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../adaptors/mail_sender_thymeleaf_adaptor.html">E-mail Thymeleafアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../adaptors/mail_sender_velocity_adaptor.html">E-mail Velocityアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../adaptors/web_thymeleaf_adaptor.html">ウェブアプリケーション Thymeleafアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../adaptors/lettuce_adaptor.html">Lettuceアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../adaptors/slf4j_adaptor.html">SLF4Jアダプタ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../adaptors/micrometer_adaptor.html">Micrometerアダプタ</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../example/index.html">Example</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../example/index.html#id1">環境構築手順について</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../example/index.html#id2">アプリケーションの実行手順について</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../../../extension_components/index.html">Nablarch拡張コンポーネント</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../../../extension_components/report/index.html">1. 帳票ライブラリ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/report/index.html#id2">1.1. 概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/report/index.html#id3">1.2. 要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/report/index.html#id7">1.3. 構造</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/report/index.html#report-template">1.4. 実装例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../extension_components/workflow/doc/index.html">2. ワークフローライブラリ</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/workflow/doc/index.html#id3">2.1. 機能概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/workflow/doc/index.html#id6">2.2. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/workflow/doc/index.html#id7">2.3. 使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/workflow/doc/index.html#xor">2.4. XORゲートウェイの進行先ノードの判定方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/workflow/doc/index.html#workflow-multi-completion">2.5. マルチインスタンスの完了条件の判定方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../extension_components/workflow/tool/index.html">3. ワークフロー定義データ生成ツール</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/workflow/tool/index.html#id3">3.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/workflow/tool/index.html#id4">3.2. 使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../extension_components/etl/index.html">4. ETL</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/etl/index.html#id3">4.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/etl/index.html#etl-phase">4.2. ETLの各フェーズの仕様</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/etl/index.html#id5">4.3. ETLを使用するバッチの設計ポイント</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/etl/index.html#id9">4.4. 使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/etl/index.html#id18">4.5. 拡張例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../extension_components/etl/etl_maven_plugin.html">5. ETL Mavenプラグイン</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/etl/etl_maven_plugin.html#id2">5.1. モジュール一覧</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../extension_components/etl/etl_maven_plugin.html#id3">5.2. 使用方法</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../../../development_tools/index.html">Nablarch開発ツール</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../../../development_tools/java_static_analysis/index.html">1. 効率的なJava静的チェック</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../development_tools/java_static_analysis/index.html#code-analysis">1.1. 構文チェックを行う</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../development_tools/java_static_analysis/index.html#code-format">1.2. フォーマットを統一する</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../development_tools/java_static_analysis/index.html#api">1.3. 許可していないAPIが使用されていないかチェックする</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../development_tools/ui_dev/index.html">2. フロントエンド上級者向けのUI開発基盤</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../development_tools/ui_dev/doc/index.html">2.1. Nablarch UI開発基盤 解説書</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../development_tools/ui_dev/guide/index.html">2.2. JSP/HTML作成ガイド</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../development_tools/ui_dev/guide/widget_usage/widget_list.html">2.3. UI部品の実装サンプルで提供しているウィジェットの一覧</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../development_tools/testing_framework/index.html">3. テスティングフレームワーク</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../development_tools/testing_framework/guide/development_guide/05_UnitTestGuide/index.html">3.1. 単体テスト実施方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../development_tools/testing_framework/guide/development_guide/06_TestFWGuide/index.html">3.2. 自動テストフレームワークの使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../development_tools/testing_framework/guide/development_guide/08_TestTools/index.html">3.3. プログラミング工程で使用するツール</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../development_tools/toolbox/index.html">4. アプリケーション開発時に使える便利なツール</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../development_tools/toolbox/JspStaticAnalysis/index.html">4.1. JSP静的解析ツール</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../development_tools/toolbox/SqlExecutor/SqlExecutor.html">4.2. Nablarch SQL Executor</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../development_tools/toolbox/JspVerifier/JspVerifier.html">4.3. 業務画面JSP検証ツール</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../../../examples/index.html">Nablarch実装例集</a><ul>
<li class="toctree-l2"><a class="reference internal" href="../../../../../examples/01/index.html">データベースを用いたパスワード認証機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/01/0101_PBKDF2PasswordEncryptor.html">PBKDF2を用いたパスワード暗号化機能サンプル</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/01/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/01/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/01/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/01/index.html#id12">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../examples/02/index.html">バリデーション機能の拡張</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/02/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/02/index.html#extendedvalidation-mailaddressvalidator">メールアドレスバリデーション</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/02/index.html#extendedvalidation-japanesetelnumbervalidator">日本電話番号バリデーション</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/02/index.html#id12">コード値精査</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../examples/03/index.html">検索結果の一覧表示</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/03/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/03/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/03/index.html#id5">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/03/index.html#id8">使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/03/index.html#listsearchinfo">ListSearchInfoクラス</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/03/index.html#listsearchresult">listSearchResultタグ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/03/index.html#listsearchresult-sort">検索結果の並び替え</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/03/index.html#listsearchresult-nopaging">1画面にすべての検索結果を一覧表示する場合の実装方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/03/index.html#listsearchresult-defaultcondition">デフォルトの検索条件で検索した結果を初期表示する場合の実装方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/03/index.html#listsearchresult-setting">検索結果の一覧表示機能のデフォルト値設定</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/03/index.html#listsearchresult-customize">業務アプリケーションへのサンプル実装(タグファイル)の取り込み方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/03/index.html#listsearchresult-tagreference">タグリファレンス</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../examples/04/index.html">フォーマッタ機能の拡張</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/04/0401_ExtendedDataFormatter.html">データフォーマッタの拡張</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/04/0402_ExtendedFieldType.html">データフォーマッタ機能におけるフィールドタイプの拡張</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../examples/05/index.html">データベースを用いたファイル管理機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/05/index.html#id2">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/05/index.html#id6">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/05/index.html#id7">機能</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/05/index.html#id10">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/05/index.html#id15">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../examples/06/index.html">CAPTCHA機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/06/06_Captcha_guide.html">CAPTCHA機能の組み込み手順</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/06/index.html#id3">提供パッケージ</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/06/index.html#id4">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/06/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/06/index.html#id21">使用方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../examples/07/index.html">UserAgent情報取得機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/07/index.html#id1">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/07/index.html#id3">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/07/index.html#id8">設定の記述</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/07/index.html#id11">使用例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../examples/08/index.html">HTMLメール送信機能サンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/08/index.html#id1">概要</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/08/index.html#id3">要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/08/index.html#id6">構成</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/08/index.html#id14">実装例</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../examples/09/index.html">bouncycastleを使用した電子署名つきメールの送信サンプルの使用方法</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/09/index.html#id3">環境準備</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/09/index.html#id4">電子署名付きメール送信機能の構造</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/09/index.html#id5">設定ファイルの準備</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/09/index.html#id7">実行方法</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../examples/10/index.html">ログ集計サンプルの使用方法</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/10/index.html#id3">提供サンプル一覧</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="../../../../../examples/11/index.html">メッセージング基盤テストシミュレータサンプル</a><ul>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/11/index.html#id4">用途</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/11/index.html#id8">特徴</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/11/index.html#id12">要求</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/11/index.html#id15">使用方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="../../../../../examples/11/index.html#id18">拡張例</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="../../../../../nablarch_api/index.html">Nablarch API</a></li>
</ul>

  

        </div>
      </div>
    </nav>

    <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap">

      
      <nav class="wy-nav-top" role="navigation" aria-label="top navigation">
        
          <i data-toggle="wy-nav-top" class="fa fa-bars"></i>
          <a href="../../../../../index.html">∇Nablarch </a>
        
      </nav>


      
      <div class="wy-nav-content">
        <div class="rst-content">
          

 



<div role="navigation" aria-label="breadcrumbs navigation">
  <ul class="wy-breadcrumbs">
    <li><a href="../../../../../index.html">Docs</a> &raquo;</li>
      
          <li><a href="../../../../index.html">Nablarchアプリケーションフレームワーク</a> &raquo;</li>
      
          <li><a href="../../../index.html">アプリケーションフレームワーク</a> &raquo;</li>
      
          <li><a href="../../index.html">7. Nablarchが提供するライブラリ</a> &raquo;</li>
      
          <li><a href="../../data_converter.html">7.4. 様々なフォーマットのデータへのアクセス</a> &raquo;</li>
      
          <li><a href="../data_format.html">7.4.2. 汎用データフォーマット</a> &raquo;</li>
      
    <li>7.4.2.3.1.1. フォーマット定義ファイルの記述ルール</li>
    <li class="wy-breadcrumbs-aside">
      <a href="https://github.com/nablarch" class="fa fa-github">GitHub</a>
    </li>
    <li class="wy-breadcrumbs-aside">
        <a href="https://nablarch.github.io/docs/LATEST/doc/en/index.html" class="en">English</a>
    </li>
  </ul>
  <hr/>
</div>
          <div role="main" class="document" itemscope="itemscope" itemtype="http://schema.org/Article">
           <div itemprop="articleBody">
            
  <div class="section" id="data-format-definition">
<span id="id1"></span><h1>7.4.2.3.1.1. フォーマット定義ファイルの記述ルール<a class="headerlink" href="#data-format-definition" title="このヘッドラインへのパーマリンク">¶</a></h1>
<div class="contents local topic" id="id2">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#id3" id="id16">フォーマット定義ファイルの共通の記法</a><ul>
<li><a class="reference internal" href="#id4" id="id17">文字コード</a></li>
<li><a class="reference internal" href="#id5" id="id18">リテラル表記</a></li>
<li><a class="reference internal" href="#id6" id="id19">コメント</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id7" id="id20">フォーマット定義ファイルの構造</a></li>
<li><a class="reference internal" href="#data-format-definition-directive" id="id21">ディレクティブ宣言部の定義</a><ul>
<li><a class="reference internal" href="#id9" id="id22">共通で使用可能なディレクティブ一覧</a></li>
<li><a class="reference internal" href="#fixed" id="id23">Fixed(固定長)形式で指定可能なディレクティブ一覧</a></li>
<li><a class="reference internal" href="#variable" id="id24">Variable(可変長)形式で指定可能なディレクティブ一覧</a></li>
<li><a class="reference internal" href="#json" id="id25">JSON形式で指定可能なディレクティブ一覧</a></li>
<li><a class="reference internal" href="#xml" id="id26">XML形式で指定可能なディレクティブ一覧</a></li>
</ul>
</li>
<li><a class="reference internal" href="#data-format-definition-record" id="id27">レコードフォーマット定義部</a><ul>
<li><a class="reference internal" href="#data-format-field-definition" id="id28">フィールド定義</a></li>
<li><a class="reference internal" href="#data-format-multi-layout-data" id="id29">マルチフォーマット形式のレコードを定義する</a></li>
<li><a class="reference internal" href="#data-format-field-type-list" id="id30">フィールドタイプ一覧</a></li>
<li><a class="reference internal" href="#data-format-field-convertor-list" id="id31">フィールドコンバータ一覧</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id15" id="id32">項目定義の省略について</a></li>
</ul>
</div>
<div class="section" id="id3">
<h2><a class="toc-backref" href="#id16">7.4.2.3.1.1.1. フォーマット定義ファイルの共通の記法</a><a class="headerlink" href="#id3" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p>フォーマット定義ファイルの共通的な記述ルールについて説明する。</p>
<div class="section" id="id4">
<h3><a class="toc-backref" href="#id17">7.4.2.3.1.1.1.1. 文字コード</a><a class="headerlink" href="#id4" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>フォーマット定義ファイルの文字コードは <code class="docutils literal"><span class="pre">UTF-8</span></code> となる。</p>
</div>
<div class="section" id="id5">
<h3><a class="toc-backref" href="#id18">7.4.2.3.1.1.1.2. リテラル表記</a><a class="headerlink" href="#id5" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>設定値にリテラルを記述する場合は、以下のルールに準拠すること。</p>
<table border="1" class="colwidths-given white-space-normal docutils">
<colgroup>
<col width="30%" />
<col width="70%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">リテラル型</th>
<th class="head">説明</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>文字列</td>
<td><p class="first">Javaの文字リテラルと同じように <code class="docutils literal"><span class="pre">&quot;</span></code> で値を囲んで記述する。</p>
<p>なお、Unicodeエスケープや8進数エスケープには対応していない。</p>
<dl class="last docutils">
<dt>記述例</dt>
<dd><div class="first last line-block">
<div class="line">&#8220;Nablarch&#8221;</div>
<div class="line">&#8220;\r\n&#8221;</div>
</div>
</dd>
</dl>
</td>
</tr>
<tr class="row-odd"><td>10進整数</td>
<td><p class="first">Javaの数値リテラルと同じように記述する。</p>
<p>なお、小数には対応していない。</p>
<dl class="last docutils">
<dt>記述例</dt>
<dd><div class="first last line-block">
<div class="line">123</div>
<div class="line">-123</div>
</div>
</dd>
</dl>
</td>
</tr>
<tr class="row-even"><td>真偽値</td>
<td><code class="docutils literal"><span class="pre">true</span></code> または、 <code class="docutils literal"><span class="pre">false</span></code> で設定する。(大文字でも可)</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="id6">
<h3><a class="toc-backref" href="#id19">7.4.2.3.1.1.1.3. コメント</a><a class="headerlink" href="#id6" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>行中の <code class="docutils literal"><span class="pre">#</span></code> 以降をコメントとして扱う。</p>
<p>以下に例を示す。</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span><span class="c1">#</span>
<span class="c1"># サンプルファイル</span>
<span class="c1">#</span>
file-type:     <span class="s2">&quot;Fixed&quot;</span>  <span class="c1"># 固定長</span>
text-encoding: <span class="s2">&quot;ms932&quot;</span>  <span class="c1"># 文字コードはms932</span>
record-length:  <span class="m">120</span>     <span class="c1"># 各業の長さは120バイト</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="id7">
<h2><a class="toc-backref" href="#id20">7.4.2.3.1.1.2. フォーマット定義ファイルの構造</a><a class="headerlink" href="#id7" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p>フォーマット定義ファイルは大きく以下の2つの要素で構成される。</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">ディレクティブ宣言部:</th><td class="field-body"><p class="first">使用するデータ形式(固定長やJSONなど)やエンコーディングなどの共通設定を定義する。</p>
<p>詳細は、 <a class="reference internal" href="#data-format-definition-directive"><span>ディレクティブ宣言部の定義</span></a> を参照。</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">レコードフォーマット定義部:</th><td class="field-body"><p class="first">レコードの内容を定義する。</p>
<p>具体的には、レコード内のフィールド定義やフィールド毎のデータ型やデータ変換ルールの定義を行う。</p>
<p class="last">詳細は、 <a class="reference internal" href="#data-format-definition-record"><span>レコードフォーマット定義部</span></a> を参照</p>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="data-format-definition-directive">
<span id="id8"></span><h2><a class="toc-backref" href="#id21">7.4.2.3.1.1.3. ディレクティブ宣言部の定義</a><a class="headerlink" href="#data-format-definition-directive" title="このヘッドラインへのパーマリンク">¶</a></h2>
<div class="section" id="id9">
<h3><a class="toc-backref" href="#id22">7.4.2.3.1.1.3.1. 共通で使用可能なディレクティブ一覧</a><a class="headerlink" href="#id9" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>全てのデータ形式で利用するディレクティブ定義は以下のとおり。</p>
<table border="1" class="colwidths-given white-space-normal docutils">
<colgroup>
<col width="30%" />
<col width="70%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">ディレクティブ</th>
<th class="head">説明</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>file-type <code class="docutils literal"><span class="pre">必須</span></code></td>
<td><p class="first">データ形式を指定する。</p>
<p>標準では以下のデータ形式を指定できる。</p>
<ul class="last simple">
<li>Fixed(固定長)</li>
<li>Variable(CSVやTSVなどの可変長)</li>
<li>JSON</li>
<li>XML</li>
</ul>
</td>
</tr>
<tr class="row-odd"><td>text-encoding <code class="docutils literal"><span class="pre">必須</span></code></td>
<td><p class="first" id="data-format-directive-text-encoding">文字列フィールドの読み書き時に使用するエンコーディングを指定する。</p>
<p>使用するJVMで利用できる文字エンコーディングのみ指定可能。例えば、 <code class="docutils literal"><span class="pre">UTF-8</span></code> や <code class="docutils literal"><span class="pre">SJIS</span></code> などを指定する。</p>
<p><cite>file-type</cite> にJSONを指定した場合は、以下のエンコーディングのみ指定可能</p>
<ul class="simple">
<li>UTF-8</li>
<li>UTF-16(BE or LE)</li>
<li>UTF-32(BE or LE)</li>
</ul>
<p class="last"><cite>file-type</cite> にXMLを指定した場合には、本設定値よりもXML宣言部
に指定されたエンコーディングが優先される。</p>
</td>
</tr>
<tr class="row-even"><td>record-separator <code class="docutils literal"><span class="pre">任意</span></code></td>
<td><p class="first">レコード終端文字(改行文字)を指定する。</p>
<p><cite>file-type</cite> にVariable(可変長)を指定した場合は、 <code class="docutils literal"><span class="pre">必須</span></code> となる。</p>
<p class="last"><cite>file-type</cite> がJSONまたはXMLの場合には、本設定値は使用しない。</p>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="fixed">
<h3><a class="toc-backref" href="#id23">7.4.2.3.1.1.3.2. Fixed(固定長)形式で指定可能なディレクティブ一覧</a><a class="headerlink" href="#fixed" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>Fixed(固定長)形式のデータで利用するディレクティブは以下のとおり。</p>
<table border="1" class="colwidths-given white-space-normal docutils">
<colgroup>
<col width="30%" />
<col width="70%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">ディレクティブ</th>
<th class="head">説明</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>record-length <code class="docutils literal"><span class="pre">必須</span></code></td>
<td>1レコードのバイト長を指定する。</td>
</tr>
<tr class="row-odd"><td>positive-zone-sign-nibble <code class="docutils literal"><span class="pre">任意</span></code></td>
<td><p class="first" id="data-format-positive-zone-sign-nibble">符号付きゾーン数値のゾーン部に設定する正符号を16進数表記の文字列で指定する。</p>
<p>デフォルトでは、 <a class="reference internal" href="#data-format-directive-text-encoding"><span>text-encoding</span></a> の値に応じて以下の値が使用される。</p>
<table class="last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">ASCII互換の場合:</th><td class="field-body">0x3</td>
</tr>
<tr class="field-even field"><th class="field-name">EBCDIC互換の場合:</th><td class="field-body">0xC</td>
</tr>
</tbody>
</table>
</td>
</tr>
<tr class="row-even"><td>negative-zone-sign-nibble <code class="docutils literal"><span class="pre">任意</span></code></td>
<td><p class="first" id="data-format-negative-zone-sign-nibble">符号付きゾーン数値のゾーン部に設定する負符号を16進数表記の文字列で指定する。</p>
<p>デフォルトでは、 <a class="reference internal" href="#data-format-directive-text-encoding"><span>text-encoding</span></a> の値に応じて以下の値が使用される。</p>
<table class="last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">ASCII互換の場合:</th><td class="field-body">0x7</td>
</tr>
<tr class="field-even field"><th class="field-name">EBCDIC互換の場合:</th><td class="field-body">0xD</td>
</tr>
</tbody>
</table>
</td>
</tr>
<tr class="row-odd"><td>positive-pack-sign-nibble <code class="docutils literal"><span class="pre">任意</span></code></td>
<td><p class="first" id="data-format-positive-pack-sign-nibble">符号付きパック数値の符号ビットに設定する正符号を16進数表記の文字列で指定する。</p>
<p>デフォルトでは、 <a class="reference internal" href="#data-format-directive-text-encoding"><span>text-encoding</span></a> の値に応じて以下の値が使用される。</p>
<table class="last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">ASCII互換の場合:</th><td class="field-body">0x3</td>
</tr>
<tr class="field-even field"><th class="field-name">EBCDIC互換の場合:</th><td class="field-body">0xC</td>
</tr>
</tbody>
</table>
</td>
</tr>
<tr class="row-even"><td>negative-pack-sign-nibble <code class="docutils literal"><span class="pre">任意</span></code></td>
<td><p class="first" id="data-format-negative-pack-sign-nibble">符号付きパック数値の符号ビットに設定する負符号を16進数表記の文字列で指定する。</p>
<p>デフォルトでは、 <a class="reference internal" href="#data-format-directive-text-encoding"><span>text-encoding</span></a> の値に応じて以下の値が使用される。</p>
<table class="last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">ASCII互換の場合:</th><td class="field-body">0x7</td>
</tr>
<tr class="field-even field"><th class="field-name">EBCDIC互換の場合:</th><td class="field-body">0xD</td>
</tr>
</tbody>
</table>
</td>
</tr>
<tr class="row-odd"><td>required-decimal-point <code class="docutils literal"><span class="pre">任意</span></code></td>
<td><p class="first">符号無し数値及び符号付き数値の小数点の要否を指定する。</p>
<p><code class="docutils literal"><span class="pre">true</span></code> を指定すると書き込むデータに小数点が付与される。</p>
<p><code class="docutils literal"><span class="pre">false</span></code> を指定すると、書き込むデータに小数点が付与されない。(固定小数点となる)</p>
<p class="last">デフォルト動作は 小数点付与( <code class="docutils literal"><span class="pre">true</span></code> )となる。</p>
</td>
</tr>
<tr class="row-even"><td>fixed-sign-position <code class="docutils literal"><span class="pre">任意</span></code></td>
<td><p class="first">符号付き数値の符号位置を固定するかの要否を指定する。</p>
<p>符号位置を固定( <code class="docutils literal"><span class="pre">true</span></code> )とした場合、符号位置は項目の先頭に固定される。
符号位置を非固定( <code class="docutils literal"><span class="pre">false</span></code> )とした場合、符号位置はパディング前の数値の先頭に付加される。</p>
<p>デフォルト動作は固定( <code class="docutils literal"><span class="pre">true</span></code> )となる。</p>
<dl class="last docutils">
<dt>例</dt>
<dd><table class="first last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">符号位置を固定:</th><td class="field-body">-000123456</td>
</tr>
<tr class="field-even field"><th class="field-name">符号位置を非固定:</th><td class="field-body">000-123456</td>
</tr>
</tbody>
</table>
</dd>
</dl>
</td>
</tr>
<tr class="row-odd"><td>required-plus-sign <code class="docutils literal"><span class="pre">任意</span></code></td>
<td><p class="first">符号付き数値の正の符号の要否を指定する。</p>
<p><code class="docutils literal"><span class="pre">true</span></code> を指定した場合、読み込むデータには正の符号( <code class="docutils literal"><span class="pre">+</span></code> )が必要で、
書き込むデータには正の符号( <code class="docutils literal"><span class="pre">+</span></code> )が付加される。</p>
<p class="last">デフォルトの動作は付加しない( <code class="docutils literal"><span class="pre">false</span></code> )となる。</p>
</td>
</tr>
</tbody>
</table>
<p>以下に例を示す。</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span><span class="c1">#</span>
<span class="c1"># ディレクティブ定義部</span>
<span class="c1">#</span>
file-type:                      <span class="s2">&quot;Fixed&quot;</span>  <span class="c1"># 固定長ファイル</span>
text-encoding:                  <span class="s2">&quot;ms932&quot;</span>  <span class="c1"># 文字列型フィールドの文字エンコーディング</span>
record-length:                  <span class="m">120</span>      <span class="c1"># 各レコードbyte長</span>
positive-zone-sign-nibble:      <span class="s2">&quot;C&quot;</span>      <span class="c1"># ゾーン数値の正符号</span>
negative-zone-sign-nibble:      <span class="s2">&quot;D&quot;</span>      <span class="c1"># ゾーン数値の負符号</span>
positive-pack-sign-nibble:      <span class="s2">&quot;C&quot;</span>      <span class="c1"># パック数値の正符号</span>
negative-pack-sign-nibbleL      <span class="s2">&quot;D&quot;</span>      <span class="c1"># パック数値の負符号</span>
required-decimal-point:         <span class="nb">true</span>     <span class="c1"># 小数点あり</span>
fixed-sign-position:            <span class="nb">true</span>     <span class="c1"># 符号は先頭に</span>
required-plus-sign:             <span class="nb">false</span>    <span class="c1"># 正符号は付加しない</span>
</pre></div>
</div>
</div>
<div class="section" id="variable">
<span id="data-format-variable-data-directive"></span><h3><a class="toc-backref" href="#id24">7.4.2.3.1.1.3.3. Variable(可変長)形式で指定可能なディレクティブ一覧</a><a class="headerlink" href="#variable" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>Variable(可変長)形式のデータで利用するディレクティブは以下のとおり。</p>
<table border="1" class="colwidths-given white-space-normal docutils">
<colgroup>
<col width="30%" />
<col width="70%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">ディレクティブ</th>
<th class="head">説明</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>field-separator <code class="docutils literal"><span class="pre">必須</span></code></td>
<td><p class="first">フィールド(項目)の区切り文字を指定する。</p>
<p class="last">例えば、CSVであれば <code class="docutils literal"><span class="pre">,</span></code> を、TSVであれば <code class="docutils literal"><span class="pre">\t</span></code> を指定する。</p>
</td>
</tr>
<tr class="row-odd"><td>quoting-delimiter <code class="docutils literal"><span class="pre">任意</span></code></td>
<td><p class="first">フィールド(項目)の値をクォートする際に使用する文字を指定する。</p>
<p>例えば、ダブルクォートを設定する場合には、 <code class="docutils literal"><span class="pre">&quot;</span></code> を、
シングルクォートを設定する場合には、 <code class="docutils literal"><span class="pre">'</span></code> を設定する。</p>
<p>出力時は、値を設定した場合、全てのフィールド(項目)がクォートされる。
デフォルトでは、クォートされない。</p>
<p class="last">入力時は、値を設定した場合、フィールドの前後のクォート文字が除去される。
改行やフィールド内のクォート文字の扱いなどは、RFC4180を参照。</p>
</td>
</tr>
<tr class="row-even"><td>ignore-blank-lines <code class="docutils literal"><span class="pre">任意</span></code></td>
<td><p class="first">データ読み込み時に空行を無視するか否かを設定する。</p>
<p><code class="docutils literal"><span class="pre">true</span></code> を設定した場合、空行(改行のみ)のレコードは無視される。</p>
<p class="last">デフォルトでは、空行は無視される。</p>
</td>
</tr>
<tr class="row-odd"><td>requires-title <code class="docutils literal"><span class="pre">任意</span></code></td>
<td><p class="first" id="data-format-requires-title">最初のレコードをタイトルとして読み書きするかどうかを設定する。</p>
<p><code class="docutils literal"><span class="pre">true</span></code> を設定した場合、最初のレコードをタイトルとして扱う。</p>
<p>デフォルトでは、最初のレコードをタイトルとして扱わない。</p>
<p class="last">タイトルレコードのレイアウト定義は、 <a class="reference internal" href="#data-format-title-type-name"><span>title-record-type-nameディレクティブ</span></a> を参照。</p>
</td>
</tr>
<tr class="row-even"><td>title-record-type-name <code class="docutils literal"><span class="pre">任意</span></code></td>
<td><p class="first" id="data-format-title-type-name">タイトルのレコードタイプ名を設定する。</p>
<p>指定しなかった場合、タイトルのレコードタイプ名は <code class="docutils literal"><span class="pre">Title</span></code> となる。</p>
<p>このディレクティブで指定したレコードタイプ名に紐づくレコードフォーマット定義に従い、タイトルレコードが編集される。</p>
<p>タイトルのレコードタイプを使ったフォーマット定義ファイルのサンプルは、
<a class="reference internal" href="multi_format_example.html#data-format-variable-title-sample"><span>タイトルレコードのフォーマット定義例</span></a> を参照。</p>
<p class="last">レコードタイプやレコード定義の詳細は、 <a class="reference internal" href="#data-format-definition-record"><span>レコードフォーマット定義部</span></a> を参照。</p>
</td>
</tr>
<tr class="row-odd"><td>max-record-length <code class="docutils literal"><span class="pre">任意</span></code></td>
<td><p class="first">読み込みを許容する1レコードの文字数を指定する。</p>
<p>レコードの区切り文字が存在しないデータ(壊れているデータ)を読み込んだ場合、
レコードを全てヒープ上に展開するとヒープ不足によりプロセスが異常終了する可能性がある。</p>
<p>このため、このディレクティブに設定した値の文字数を読み込んでもレコードの区切り文字が存在しなかった場合には、
不正なデータとして読み込み処理を中止し例外を送出する。</p>
<p class="last">デフォルトでは、1,000,000文字となる。</p>
</td>
</tr>
</tbody>
</table>
<p>以下に例を示す。</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span><span class="c1">#</span>
<span class="c1"># ディレクティブ定義部</span>
<span class="c1">#</span>
file-type:                  <span class="s2">&quot;Variable&quot;</span>  <span class="c1"># 可変長ファイル</span>
text-encoding:              <span class="s2">&quot;utf-8&quot;</span>     <span class="c1"># 文字列型フィールドの文字エンコーディング</span>
record-separator:           <span class="s2">&quot;\\r\\n&quot;</span>    <span class="c1"># 改行</span>

field-separator:            <span class="s2">&quot;,&quot;</span>         <span class="c1"># CSV</span>
quoting-delimiter:          <span class="s2">&quot;\&quot;&quot;</span>        <span class="c1"># ダブルクォートで項目を囲む</span>
ignore-blank-lines:         <span class="nb">true</span>        <span class="c1"># 空行は無視</span>
requires-title:             <span class="nb">false</span>       <span class="c1"># タイトルレコードは無し</span>
max-record-length:          <span class="m">1000</span>        <span class="c1"># このcsvのレコードには最大でも1000文字まで</span>
</pre></div>
</div>
</div>
<div class="section" id="json">
<h3><a class="toc-backref" href="#id25">7.4.2.3.1.1.3.4. JSON形式で指定可能なディレクティブ一覧</a><a class="headerlink" href="#json" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>JSONデータ形式固有のディレクティブは存在しない。</p>
<p>以下に例を示す。</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span>file-type:      <span class="s2">&quot;JSON&quot;</span>      <span class="c1"># jsonフォーマット</span>
text-encoding:  <span class="s2">&quot;utf-8&quot;</span>     <span class="c1"># 文字列型フィールドの文字エンコーディング</span>
</pre></div>
</div>
</div>
<div class="section" id="xml">
<h3><a class="toc-backref" href="#id26">7.4.2.3.1.1.3.5. XML形式で指定可能なディレクティブ一覧</a><a class="headerlink" href="#xml" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>XMLデータ形式固有のディレクティブは存在いない。</p>
<p>以下に例を示す。</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span>file-type:      <span class="s2">&quot;XML&quot;</span>       <span class="c1"># xmlフォーマット</span>
text-encoding:  <span class="s2">&quot;utf-8&quot;</span>     <span class="c1"># 文字列型フィールドの文字エンコーディング</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="data-format-definition-record">
<span id="id10"></span><h2><a class="toc-backref" href="#id27">7.4.2.3.1.1.4. レコードフォーマット定義部</a><a class="headerlink" href="#data-format-definition-record" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p>レコードフォーマット定義部には、レコードを構成するフィールド(項目)の定義情報(レコード内での位置やデータ型など)を設定する。</p>
<p>レコードフォーマット定義例を以下に示す。</p>
<dl class="docutils">
<dt>ポイント</dt>
<dd><ul class="first last simple">
<li>レコードを識別するためのレコードタイプ名を <code class="docutils literal"><span class="pre">[</span></code> 、 <code class="docutils literal"><span class="pre">]</span></code> で囲んで定義する。</li>
<li>レコードタイプ名は、フォーマット定義ファイル内で一意となっていること。</li>
<li>レコードタイプ名は、任意の値を定義する。</li>
<li>レコードタイプの次の行から、レコード内のフィールド(項目)を定義する。</li>
<li>フィールド(項目)定義は、フィールド数分繰り返し定義する。</li>
<li>フィールド定義の書式については、 <a class="reference internal" href="#data-format-field-definition"><span>フィールド定義の書式</span></a> を参照。</li>
</ul>
</dd>
</dl>
<div class="highlight-bash"><div class="highlight"><pre><span></span><span class="o">[</span>data<span class="o">]</span>              <span class="c1"># レコードタイプ名:data</span>
<span class="m">1</span> name  N<span class="o">(</span><span class="m">100</span><span class="o">)</span>      <span class="c1"># 名前</span>
<span class="m">2</span> age   X9<span class="o">(</span><span class="m">3</span><span class="o">)</span>       <span class="c1"># 年齢</span>
</pre></div>
</div>
<div class="section" id="data-format-field-definition">
<span id="id11"></span><h3><a class="toc-backref" href="#id28">7.4.2.3.1.1.4.1. フィールド定義</a><a class="headerlink" href="#data-format-field-definition" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>フィールド定義は、以下の形式で定義する。</p>
<div class="highlight-text"><div class="highlight"><pre><span></span>&lt;フィールド開始位置&gt; &lt;フィールド名&gt; &lt;多重度&gt; &lt;フィールドタイプ&gt; &lt;フィールドコンバータ&gt;
</pre></div>
</div>
<p>フィールド定義の各要素の詳細は以下のとおり。</p>
<table border="1" class="colwidths-given white-space-normal docutils">
<colgroup>
<col width="30%" />
<col width="70%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td>フィールド開始位置 <code class="docutils literal"><span class="pre">必須</span></code></td>
<td><p class="first">データ形式毎以下のルールに従いフィールド開始位置を定義する。</p>
<table class="last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Fixed(固定長):</th><td class="field-body">フィールドの開始バイト数(1起算)を設定する。</td>
</tr>
<tr class="field-even field"><th class="field-name">Variable(可変長:</th><td class="field-body">フィールドの項目通番を設定する。</td>
</tr>
<tr class="field-odd field"><th class="field-name">JSON:</th><td class="field-body">フィールドの要素通番</td>
</tr>
<tr class="field-even field"><th class="field-name">XML:</th><td class="field-body">フィールドの要素通番</td>
</tr>
</tbody>
</table>
</td>
</tr>
<tr class="row-even"><td>フィールド名 <code class="docutils literal"><span class="pre">必須</span></code></td>
<td><p class="first">フィールドを識別するための名前を設定する。</p>
<p>フィールド名は、 本機能の入出力で使用する <a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/java/util/Map.html" title="java.util.Map">java.util.Map</a> のキーとなる。</p>
<p>フィールド名の先頭に <code class="docutils literal"><span class="pre">?</span></code> を付加した場合、その項目は入力時には <a class="reference external" href="http://docs.oracle.com/javase/8/docs/api/java/util/Map.html" title="java.util.Map">java.util.Map</a> には読み込まれない。
例えば、ホストでよく扱われる固定長ファイルのfiller項目に使用することで、余計な項目を入力対象除外できる。</p>
<div class="admonition important">
<p class="first admonition-title">重要</p>
<p class="last">数字のみのフィールド名は定義できないので注意すること。</p>
</div>
<p>XMLデータ形式の場合、フィールド名の先頭に <code class="docutils literal"><span class="pre">&#64;</span></code> を付加することで、その項目を属性値として扱うことが出来る。</p>
<p>以下に例を示す。</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span><span class="o">[</span>tagName<span class="o">]</span>
@attr
</pre></div>
</div>
<p>上記に対応したXMLは、以下のようになる。</p>
<div class="last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;tagName</span> <span class="na">attr=</span><span class="s">&quot;val&quot;</span><span class="nt">&gt;</span>
・・・
<span class="nt">&lt;/tagName&gt;</span>
</pre></div>
</div>
</td>
</tr>
<tr class="row-odd"><td>多重度 <code class="docutils literal"><span class="pre">任意</span></code></td>
<td><p class="first">フィールドの定義可能数を指定する。</p>
<p>この値は、JSON及びXMLデータ形式の場合のみ指定できる。</p>
<dl class="docutils">
<dt>記述ルールは以下のとおり。</dt>
<dd><ul class="first last simple">
<li>定義可能数は、 <code class="docutils literal"><span class="pre">[</span></code> 、 <code class="docutils literal"><span class="pre">]</span></code> で囲んで記述する。</li>
<li>下限と上限がある場合は、下限と上限の間に <code class="docutils literal"><span class="pre">..</span></code> を記述する。</li>
<li>上限がない場合は <code class="docutils literal"><span class="pre">*</span></code> を記述する。</li>
<li>省略した場合は、 <code class="docutils literal"><span class="pre">[1]</span></code> となる。</li>
</ul>
</dd>
</dl>
<p>以下に指定例を示す。</p>
<div class="highlight-bash"><div class="highlight"><pre><span></span>address <span class="o">[</span><span class="m">1</span>..3<span class="o">]</span>    <span class="c1"># 1から3の定義が可能</span>
address           <span class="c1"># 省略しているので1つだけ可能</span>
address <span class="o">[</span><span class="m">0</span>..*<span class="o">]</span>    <span class="c1"># 条件なし(0から無制限)</span>
address <span class="o">[</span>*<span class="o">]</span>       <span class="c1"># 条件なし(0から無制限)</span>
address <span class="o">[</span><span class="m">1</span>..*<span class="o">]</span>    <span class="c1"># 1以上</span>
</pre></div>
</div>
<p>以下のxmlの場合、 <code class="docutils literal"><span class="pre">address</span></code> フィールドの定義数は <code class="docutils literal"><span class="pre">2</span></code> となる。</p>
<div class="highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;person&gt;</span>
  <span class="nt">&lt;address&gt;</span>自宅住所<span class="nt">&lt;/address&gt;</span>
  <span class="nt">&lt;address&gt;</span>勤務先住所<span class="nt">&lt;/address&gt;</span>
<span class="nt">&lt;/person&gt;</span>
</pre></div>
</div>
<p>以下のJSONの場合、 <code class="docutils literal"><span class="pre">address</span></code> フィールドの要素数は、<code class="docutils literal"><span class="pre">3</span></code> となる。</p>
<div class="last highlight-json"><div class="highlight"><pre><span></span><span class="p">{</span>
  <span class="nt">&quot;address&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;自宅住所&quot;</span><span class="p">,</span> <span class="s2">&quot;勤務先住所&quot;</span><span class="p">,</span> <span class="s2">&quot;送付先住所&quot;</span><span class="p">]</span>
<span class="p">}</span>
</pre></div>
</div>
</td>
</tr>
<tr class="row-even"><td>フィールドタイプ <code class="docutils literal"><span class="pre">必須</span></code></td>
<td><p class="first">フィールドのデータ型を定義する。</p>
<p class="last">デフォルトで指定可能なフィールドタイプは、 <a class="reference internal" href="#data-format-field-type-list"><span>フィールドタイプ一覧</span></a> を参照。</p>
</td>
</tr>
<tr class="row-odd"><td>フィールドコンバータ <code class="docutils literal"><span class="pre">任意</span></code></td>
<td><p class="first">フィールドタイプに対するオプションの指定やデータ変換などの入出力の事前処理の内容を定義する。</p>
<p>デフォルトで指定可能なフィールドタイプは、 <a class="reference internal" href="#data-format-field-convertor-list"><span>フィールドコンバータ一覧</span></a> を参照。</p>
<p class="last">フィールドコンバータは、複数設定することも出来る。</p>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="data-format-multi-layout-data">
<span id="id12"></span><h3><a class="toc-backref" href="#id29">7.4.2.3.1.1.4.2. マルチフォーマット形式のレコードを定義する</a><a class="headerlink" href="#data-format-multi-layout-data" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>マルチフォーマット形式のデータの場合は、フォーマット定義ファイル上に複数のレコードフォーマットを定義する。</p>
<p>入出力データが、どのレコードフォーマットかは、特定のフィールドの値によって自動的に判定される。
もし、入出力対象のデータが、どのレコードタイプにもマッチしない場合は、不正データ扱いとし処理を異常終了する。</p>
<p>以下にマルチフォーマット形式のフォーマット定義例を示す。</p>
<dl class="docutils">
<dt>ポイント</dt>
<dd><ul class="first last simple">
<li>レコード識別フィールドを定義する。レコードタイプ名は <code class="docutils literal"><span class="pre">Classifier</span></code> とする。</li>
<li>各レコード定義のレコードタイプ名直下に、レコードと判断するための条件を定義する。</li>
<li>レコード識別(Classifier)に定義したフィールドは、レコード定義内に存在している必要がある。</li>
</ul>
</dd>
</dl>
<div class="highlight-bash"><div class="highlight"><pre><span></span>file-type:        <span class="s2">&quot;Fixed&quot;</span> <span class="c1"># 固定長</span>
text-encoding:    <span class="s2">&quot;MS932&quot;</span> <span class="c1"># 文字列型フィールドの文字エンコーディング</span>
record-length:    <span class="m">40</span>      <span class="c1"># 各レコードの長さ</span>
record-separator: <span class="s2">&quot;\r\n&quot;</span>  <span class="c1"># 改行コード(crlf)</span>

<span class="c1"># レコード識別条件の定義</span>
<span class="o">[</span>Classifier<span class="o">]</span>
<span class="m">1</span> dataKbn X<span class="o">(</span><span class="m">1</span><span class="o">)</span>      <span class="c1"># 先頭1バイトのフィールドを使用してどのレコードかを判定する</span>

<span class="c1"># ヘッダーレコードの定義</span>
<span class="o">[</span>header<span class="o">]</span>
<span class="nv">dataKbn</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span>         <span class="c1"># dataKbnが&quot;1&quot;の場合ヘッダーレコード</span>
<span class="m">1</span> dataKbn X<span class="o">(</span><span class="m">1</span><span class="o">)</span>
<span class="m">2</span> data    X<span class="o">(</span><span class="m">39</span><span class="o">)</span>

<span class="c1"># データレコードの定義</span>
<span class="o">[</span>data<span class="o">]</span>
<span class="nv">dataKbn</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>        <span class="c1"># dataKbnが&quot;2&quot;の場合データレコード</span>
<span class="m">1</span> dataKbn X<span class="o">(</span><span class="m">1</span><span class="o">)</span>
<span class="m">2</span> data    X<span class="o">(</span><span class="m">39</span><span class="o">)</span>
</pre></div>
</div>
<p>マルチフォーマットの定義サンプルは、以下のリンク先を参照。</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="multi_format_example.html">7.4.2.3.1.1.4.2.1. Fixed(固定長)のマルチフォーマット定義のサンプル集</a></li>
<li class="toctree-l1"><a class="reference internal" href="multi_format_example.html#variable">7.4.2.3.1.1.4.2.2. Variable(可変長)でマルチフォーマット定義のサンプル集</a></li>
</ul>
</div>
<div class="admonition tip">
<p class="first admonition-title">補足</p>
<p class="last">JSON及びXMLデータ形式には、レコードの概念が存在しないため、
マルチフォーマット形式のフォーマット定義には対応していない。</p>
</div>
</div>
<div class="section" id="data-format-field-type-list">
<span id="id13"></span><h3><a class="toc-backref" href="#id30">7.4.2.3.1.1.4.3. フィールドタイプ一覧</a><a class="headerlink" href="#data-format-field-type-list" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>標準で提供するデータタイプ定義一覧を以下に示す。</p>
<dl class="docutils">
<dt>Fixed(固定長)データ形式で利用可能なフィールドタイプ一覧</dt>
<dd><table border="1" class="colwidths-given white-space-normal first last docutils">
<colgroup>
<col width="13%" />
<col width="15%" />
<col width="72%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">タイプ</th>
<th class="head">Java型</th>
<th class="head">説明</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><p class="first last" id="data-format-field-type-single-byte-character-string">X</p>
</td>
<td>String</td>
<td><p class="first">シングルバイト文字列(バイト長 = 文字列長)</p>
<p>デフォルトでは、半角空白による右トリム及びパディングが行われる。</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">引数:</th><td class="field-body">バイト長(数値) <code class="docutils literal"><span class="pre">必須</span></code></td>
</tr>
</tbody>
</table>
<p>出力対象の値が <code class="docutils literal"><span class="pre">null</span></code> の場合、値を空文字に変換してから処理を行う。</p>
<p class="last">読み込んだ値が空文字列の場合は、 <code class="docutils literal"><span class="pre">null</span></code> に変換する。
空文字列を <code class="docutils literal"><span class="pre">null</span></code> に変換したくない場合は、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/dataformat/convertor/FixedLengthConvertorSetting.html#setConvertEmptyToNull-boolean-" title="nablarch.core.dataformat.convertor.FixedLengthConvertorSetting.setConvertEmptyToNull(boolean)">convertEmptyToNull</a> に <code class="docutils literal"><span class="pre">false</span></code> を設定する。</p>
</td>
</tr>
<tr class="row-odd"><td>N</td>
<td>String</td>
<td><p class="first">ダブルバイト文字列 (バイト長 = 文字数 ÷ 2)</p>
<p>デフォルトでは、全角空白による右トリム・パディングを行う。</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">引数:</th><td class="field-body">バイト長(数値) <code class="docutils literal"><span class="pre">必須</span></code></td>
</tr>
</tbody>
</table>
<p>※バイト長が2の倍数でない場合は構文エラーとなる。</p>
<p class="last">出力対象の値が <code class="docutils literal"><span class="pre">null</span></code> の場合や、読み込んだ値が空文字列の場合の扱いは、
<a class="reference internal" href="#data-format-field-type-single-byte-character-string"><span>シングルバイト文字列のフィールドタイプ</span></a> と同じ。</p>
</td>
</tr>
<tr class="row-even"><td>XN</td>
<td>String</td>
<td><p class="first">マルチバイト文字列</p>
<p>UTF-8のようにバイト長の異なる文字が混在するフィールドを扱う場合に、このフィールドタイプを指定する。</p>
<p>また、全角文字列（ダブルバイト文字列）のパディングに半角スペースを使用する場合にも本フィールドタイプを使用する。</p>
<p>デフォルトでは、半角空白による右トリム・パディングを行う。</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">引数:</th><td class="field-body">バイト長(数値) <code class="docutils literal"><span class="pre">必須</span></code></td>
</tr>
</tbody>
</table>
<p class="last">出力対象の値が <code class="docutils literal"><span class="pre">null</span></code> の場合や、読み込んだ値が空文字列の場合の扱いは、
<a class="reference internal" href="#data-format-field-type-single-byte-character-string"><span>シングルバイト文字列のフィールドタイプ</span></a> と同じ。</p>
</td>
</tr>
<tr class="row-odd"><td><p class="first last" id="data-format-field-type-zoned-decimal">Z</p>
</td>
<td>BigDecimal</td>
<td><p class="first">ゾーン数値(バイト長 = 桁数)</p>
<p>デフォルトでは、 <code class="docutils literal"><span class="pre">0</span></code> による左トリム・パディングを行う。</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">引数1:</th><td class="field-body">バイト長(数値) <code class="docutils literal"><span class="pre">必須</span></code></td>
</tr>
<tr class="field-even field"><th class="field-name">引数2:</th><td class="field-body">小数点以下桁数(数値) <code class="docutils literal"><span class="pre">任意</span></code> デフォルト: <code class="docutils literal"><span class="pre">0</span></code></td>
</tr>
</tbody>
</table>
<p>出力対象の値が <code class="docutils literal"><span class="pre">null</span></code> の場合、値を <code class="docutils literal"><span class="pre">0</span></code> に変換してから処理を行う。</p>
<p class="last">読み込んだ値のバイト数が <code class="docutils literal"><span class="pre">0</span></code> の場合は、 <code class="docutils literal"><span class="pre">null</span></code> に変換する。
バイト数が <code class="docutils literal"><span class="pre">0</span></code> の場合に <code class="docutils literal"><span class="pre">null</span></code> に変換したくない場合は、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/dataformat/convertor/FixedLengthConvertorSetting.html#setConvertEmptyToNull-boolean-" title="nablarch.core.dataformat.convertor.FixedLengthConvertorSetting.setConvertEmptyToNull(boolean)">convertEmptyToNull</a> に <code class="docutils literal"><span class="pre">false</span></code> を設定する。</p>
</td>
</tr>
<tr class="row-even"><td>SZ</td>
<td>BigDecimal</td>
<td><p class="first">符号付きゾーン数値 (バイト長 = 桁数)</p>
<p>デフォルトでは、 <code class="docutils literal"><span class="pre">0</span></code> による左トリム・パディングを行う。</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">引数1:</th><td class="field-body">バイト長(数値) <code class="docutils literal"><span class="pre">必須</span></code></td>
</tr>
<tr class="field-even field"><th class="field-name">引数2:</th><td class="field-body">少数点以下桁数(数値) <code class="docutils literal"><span class="pre">任意</span></code> デフォルト: <code class="docutils literal"><span class="pre">0</span></code></td>
</tr>
<tr class="field-odd field"><th class="field-name">引数3:</th><td class="field-body">ゾーン部に設定する正符号(16進表記の文字列) <code class="docutils literal"><span class="pre">任意</span></code></td>
</tr>
<tr class="field-even field"><th class="field-name">引数4:</th><td class="field-body">ゾーン部に設定する負符号(16進表記の文字列) <code class="docutils literal"><span class="pre">任意</span></code></td>
</tr>
</tbody>
</table>
<p>引数3及び引数4は、 <a class="reference internal" href="#data-format-positive-zone-sign-nibble"><span>符号付きゾーン数値の正符号</span></a> 及び
<a class="reference internal" href="#data-format-negative-zone-sign-nibble"><span>符号付きゾーン数値の負符号</span></a> を上書きする場合に設定する。</p>
<p class="last">出力対象の値が <code class="docutils literal"><span class="pre">null</span></code> の場合や、読み込んだ値のバイト数が <code class="docutils literal"><span class="pre">0</span></code> の場合の扱いは、
<a class="reference internal" href="#data-format-field-type-zoned-decimal"><span>ゾーン数値のフィールドタイプ</span></a> と同じ。</p>
</td>
</tr>
<tr class="row-odd"><td>P</td>
<td>BigDecimal</td>
<td><p class="first">パック数値 (バイト長 = 桁数 ÷ 2 [端数切り上げ])</p>
<p>デフォルトでは、 <code class="docutils literal"><span class="pre">0</span></code> による左トリム・パディングを行う。</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">引数1:</th><td class="field-body">バイト長(数値) <code class="docutils literal"><span class="pre">必須</span></code></td>
</tr>
<tr class="field-even field"><th class="field-name">引数2:</th><td class="field-body">少数点以下桁数(数値) <code class="docutils literal"><span class="pre">任意</span></code> デフォルト: <code class="docutils literal"><span class="pre">0</span></code></td>
</tr>
</tbody>
</table>
<p class="last">出力対象の値が <code class="docutils literal"><span class="pre">null</span></code> の場合や、読み込んだ値のバイト数が <code class="docutils literal"><span class="pre">0</span></code> の場合の扱いは、
<a class="reference internal" href="#data-format-field-type-zoned-decimal"><span>ゾーン数値のフィールドタイプ</span></a> と同じ。</p>
</td>
</tr>
<tr class="row-even"><td>SP</td>
<td>BigDecimal</td>
<td><p class="first">符号付きパック数値 (バイト長 = (桁数 + 1) ÷ 2 [端数切り上げ])</p>
<p>デフォルトでは、 <code class="docutils literal"><span class="pre">0</span></code> による左トリム・パディングを行う。</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">引数1:</th><td class="field-body">バイト長(数値) <code class="docutils literal"><span class="pre">必須</span></code></td>
</tr>
<tr class="field-even field"><th class="field-name">引数2:</th><td class="field-body">少数点以下桁数(数値) <code class="docutils literal"><span class="pre">任意</span></code> デフォルト: <code class="docutils literal"><span class="pre">0</span></code></td>
</tr>
<tr class="field-odd field"><th class="field-name">引数3:</th><td class="field-body">符号ビットに設定する正符号 (16進表記の文字列) <code class="docutils literal"><span class="pre">任意</span></code></td>
</tr>
<tr class="field-even field"><th class="field-name">引数4:</th><td class="field-body">符号ビットに設定する負符号 (16進表記の文字列) <code class="docutils literal"><span class="pre">任意</span></code></td>
</tr>
</tbody>
</table>
<p>引数3及び引数4は、 <a class="reference internal" href="#data-format-positive-pack-sign-nibble"><span>符号付きパック数値の正符号</span></a> 及び
<a class="reference internal" href="#data-format-negative-pack-sign-nibble"><span>符号付きパック数値の負符号</span></a> を上書きする場合に設定する。</p>
<p class="last">出力対象の値が <code class="docutils literal"><span class="pre">null</span></code> の場合や、読み込んだ値のバイト数が <code class="docutils literal"><span class="pre">0</span></code> の場合の扱いは、
<a class="reference internal" href="#data-format-field-type-zoned-decimal"><span>ゾーン数値のフィールドタイプ</span></a> と同じ。</p>
</td>
</tr>
<tr class="row-odd"><td>B</td>
<td>byte[]</td>
<td><p class="first">バイナリ列</p>
<p>パディングやトリムは行わない。</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">引数:</th><td class="field-body">バイト長(数値) <code class="docutils literal"><span class="pre">必須</span></code></td>
</tr>
</tbody>
</table>
<p>出力対象の値が <code class="docutils literal"><span class="pre">null</span></code> の場合の変換仕様はアプリケーションごとに様々である。
そのため、本フィールドタイプではその場合でも値の変換は行わず、
<a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/dataformat/InvalidDataFormatException.html" title="nablarch.core.dataformat.InvalidDataFormatException">InvalidDataFormatException</a>
を送出する。</p>
<p class="last">本フィールドタイプを使用する場合、要件に合わせてアプリケーション側で明示的に値を設定すること。</p>
</td>
</tr>
<tr class="row-even"><td>X9</td>
<td>BigDecimal</td>
<td><p class="first">符号無し数値文字列 (バイト長 = 文字数)</p>
<p>フィールド中のシングルバイト文字列(X)を数値として扱う。</p>
<p>デフォルトでは、 <code class="docutils literal"><span class="pre">0</span></code> による左トリム・パディングを行う。
文字列中に小数点記号( <code class="docutils literal"><span class="pre">.</span></code> )を含めることできる。</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">引数1:</th><td class="field-body">バイト長(数値) <code class="docutils literal"><span class="pre">必須</span></code></td>
</tr>
<tr class="field-even field"><th class="field-name">引数2:</th><td class="field-body">固定小数点の場合の小数点以下桁数(数値) <code class="docutils literal"><span class="pre">任意</span></code> デフォルト: <code class="docutils literal"><span class="pre">0</span></code></td>
</tr>
</tbody>
</table>
<p>出力対象の値が <code class="docutils literal"><span class="pre">null</span></code> の場合の扱いは、
<a class="reference internal" href="#data-format-field-type-zoned-decimal"><span>ゾーン数値のフィールドタイプ</span></a> と同じ。</p>
<p class="last">読み込んだ値が空文字列の場合の扱いは、
<a class="reference internal" href="#data-format-field-type-single-byte-character-string"><span>シングルバイト文字列のフィールドタイプ</span></a> と同じ。</p>
</td>
</tr>
<tr class="row-odd"><td>SX9</td>
<td>BigDecimal</td>
<td><p class="first">符号付き数値文字列 (バイト長 = 文字数)</p>
<p>フィールド中のシングルバイト文字列(X)を符号付き数値として扱う。
デフォルトでは、 <code class="docutils literal"><span class="pre">0</span></code> による左トリム・パディングを行う。</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">引数1:</th><td class="field-body">バイト長(数値) <code class="docutils literal"><span class="pre">必須</span></code></td>
</tr>
<tr class="field-even field"><th class="field-name">引数2:</th><td class="field-body">固定小数点の場合の小数点以下桁数(数値) <code class="docutils literal"><span class="pre">任意</span></code> デフォルト: <code class="docutils literal"><span class="pre">0</span></code></td>
</tr>
</tbody>
</table>
<p>出力対象の値が <code class="docutils literal"><span class="pre">null</span></code> の場合の扱いは、
<a class="reference internal" href="#data-format-field-type-zoned-decimal"><span>ゾーン数値のフィールドタイプ</span></a> と同じ。</p>
<p>読み込んだ値が空文字列の場合の扱いは、
<a class="reference internal" href="#data-format-field-type-single-byte-character-string"><span>シングルバイト文字列のフィールドタイプ</span></a> と同じ。</p>
<p>符号文字(<code class="docutils literal"><span class="pre">+</span></code> 、<code class="docutils literal"><span class="pre">-</span></code>)を変更したい場合は、以下のクラスの実装を参考にプロジェクト固有のフィールドタイプを作成して対応する。</p>
<ul class="simple">
<li><a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/dataformat/convertor/datatype/SignedNumberStringDecimal.html" title="nablarch.core.dataformat.convertor.datatype.SignedNumberStringDecimal">SignedNumberStringDecimal</a></li>
</ul>
<p class="last">フィールドタイプの追加については、 <a class="reference internal" href="../data_format.html#data-format-field-type-add"><span>フィールドタイプを追加する</span></a> を参照。</p>
</td>
</tr>
</tbody>
</table>
</dd>
<dt>Variable(可変長)データ形式で利用可能フィールドタイプ一覧</dt>
<dd><table border="1" class="colwidths-given white-space-normal first last docutils">
<colgroup>
<col width="13%" />
<col width="15%" />
<col width="72%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">タイプ</th>
<th class="head">Java型</th>
<th class="head">説明</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>X <br/>
N <br/>
XN <br/>
X9 <br/>
SX9</td>
<td>String</td>
<td><p class="first">可変長データ形式では、すべてのフィールドを文字列（String）として読み書きする。</p>
<p>どのタイプ識別子を指定しても動作は変わらない。
また、フィールド長の概念が無いので、引数は不要である。</p>
<p>もし、文字列を数値形式(BigDecimal)として読み書きしたい場合は、
<a class="reference internal" href="#data-format-number-convertor"><span>numberコンバータ</span></a>
または <a class="reference internal" href="#data-format-signed-number-convertor"><span>signed_numberコンバータ</span></a> を使用すること。</p>
<p>出力対象の値が <code class="docutils literal"><span class="pre">null</span></code> の場合、値を空文字に変換してから処理を行う。</p>
<p class="last">読み込んだ値が空文字列の場合は、 <code class="docutils literal"><span class="pre">null</span></code> に変換する。
空文字列を <code class="docutils literal"><span class="pre">null</span></code> に変換したくない場合は、 <a class="reference external" href="https://nablarch.github.io/docs/LATEST/javadoc/nablarch/core/dataformat/convertor/VariableLengthConvertorSetting.html#setConvertEmptyToNull-boolean-" title="nablarch.core.dataformat.convertor.VariableLengthConvertorSetting.setConvertEmptyToNull(boolean)">convertEmptyToNull</a> に <code class="docutils literal"><span class="pre">false</span></code> を設定する。</p>
</td>
</tr>
</tbody>
</table>
</dd>
<dt>JSONおよびXMLデータ形式で利用可能なフィールドタイプ一覧</dt>
<dd><table border="1" class="colwidths-given white-space-normal first last docutils">
<colgroup>
<col width="13%" />
<col width="15%" />
<col width="72%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">タイプ</th>
<th class="head">Java型</th>
<th class="head">説明</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><p class="first last" id="data-format-field-type-nullable-string">X <br/>
N <br/>
XN</p>
</td>
<td>String</td>
<td><p class="first">文字列データタイプ</p>
<p>パディングなどの編集は行わない。</p>
<p>JSONの場合は、出力時に値がダブルクォート <code class="docutils literal"><span class="pre">&quot;</span></code> で括られる。</p>
<p class="last">出力対象の値が <code class="docutils literal"><span class="pre">null</span></code> の場合、JSONでは値の変換は行わなず、
XMLでは空文字に変換する。</p>
</td>
</tr>
<tr class="row-odd"><td>X9 <br/>
SX9 <br/></td>
<td>String</td>
<td><p class="first">数値文字列タイプ</p>
<p>パディングなどのデータ編集は行わない。出力時は値がそのまま出力される。</p>
<p>もし、文字列を数値形式(BigDecimal)として読み書きしたい場合は、
<a class="reference internal" href="#data-format-number-convertor"><span>numberコンバータ</span></a>
または <a class="reference internal" href="#data-format-signed-number-convertor"><span>signed_numberコンバータ</span></a> 使用すること。</p>
<p class="last">出力対象の値が <code class="docutils literal"><span class="pre">null</span></code> の場合の扱いは、
<a class="reference internal" href="#data-format-field-type-nullable-string"><span>文字列データタイプのフィールドタイプ</span></a> と同じ。</p>
</td>
</tr>
<tr class="row-even"><td>BL</td>
<td>String</td>
<td><p class="first">文字列（ <code class="docutils literal"><span class="pre">true</span></code> or <code class="docutils literal"><span class="pre">false</span></code> を文字列で表したもの）</p>
<p>パディングなどのデータ編集は行わない。出力時は値がそのまま出力される。</p>
<p class="last">出力対象の値が <code class="docutils literal"><span class="pre">null</span></code> の場合の扱いは、
<a class="reference internal" href="#data-format-field-type-nullable-string"><span>文字列データタイプのフィールドタイプ</span></a> と同じ。</p>
</td>
</tr>
<tr class="row-odd"><td><p class="first last" id="data-format-nest-object">OB</p>
</td>
<td>-</td>
<td><p class="first">ネストされたレコードタイプを指定する場合に使用する。</p>
<p>フィールド名に対応した、レコードタイプがネストした要素として入出力される。</p>
<p>出力対象の値が <code class="docutils literal"><span class="pre">null</span></code> の場合の扱いは、
<a class="reference internal" href="#data-format-field-type-nullable-string"><span>文字列データタイプのフィールドタイプ</span></a> と同じ。</p>
<p>以下に使用例を示す。</p>
<dl class="docutils">
<dt>json</dt>
<dd><div class="first last highlight-json"><div class="highlight"><pre><span></span><span class="p">{</span>
  <span class="nt">&quot;users&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&quot;name&quot;</span>    <span class="p">:</span> <span class="s2">&quot;名前&quot;</span><span class="p">,</span>
      <span class="nt">&quot;age&quot;</span>     <span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
      <span class="nt">&quot;address&quot;</span> <span class="p">:</span> <span class="s2">&quot;住所&quot;</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="nt">&quot;name&quot;</span>    <span class="p">:</span> <span class="s2">&quot;名前1&quot;</span><span class="p">,</span>
      <span class="nt">&quot;age&quot;</span>     <span class="p">:</span> <span class="mi">31</span><span class="p">,</span>
      <span class="nt">&quot;address&quot;</span> <span class="p">:</span> <span class="s2">&quot;住所1&quot;</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</pre></div>
</div>
</dd>
<dt>xml</dt>
<dd><div class="first last highlight-xml"><div class="highlight"><pre><span></span><span class="nt">&lt;users&gt;</span>
  <span class="nt">&lt;user&gt;</span>
    <span class="nt">&lt;name&gt;</span>名前<span class="nt">&lt;/name&gt;</span>
    <span class="nt">&lt;age&gt;</span>30<span class="nt">&lt;/age&gt;</span>
    <span class="nt">&lt;address&gt;</span>住所<span class="nt">&lt;/address&gt;</span>
  <span class="nt">&lt;/user&gt;</span>
  <span class="nt">&lt;user&gt;</span>
    <span class="nt">&lt;name&gt;</span>名前1<span class="nt">&lt;/name&gt;</span>
    <span class="nt">&lt;age&gt;</span>31<span class="nt">&lt;/age&gt;</span>
    <span class="nt">&lt;address&gt;</span>住所1<span class="nt">&lt;/address&gt;</span>
  <span class="nt">&lt;/user&gt;</span>
<span class="nt">&lt;/users&gt;</span>
</pre></div>
</div>
</dd>
</dl>
<p>上記のjson及びxmlに対応したフォーマット定義ファイルは以下のとおり。</p>
<div class="last highlight-bash"><div class="highlight"><pre><span></span><span class="o">[</span>users<span class="o">]</span>       <span class="c1"># ルート要素</span>
<span class="m">1</span> user <span class="o">[</span><span class="m">1</span>..*<span class="o">]</span> OB

<span class="o">[</span>user<span class="o">]</span>        <span class="c1"># ネストした要素</span>
<span class="m">1</span> name    N   <span class="c1"># 最下層の要素</span>
<span class="m">2</span> age     X9
<span class="m">3</span> address N
</pre></div>
</div>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
</div>
<div class="section" id="data-format-field-convertor-list">
<span id="id14"></span><h3><a class="toc-backref" href="#id31">7.4.2.3.1.1.4.4. フィールドコンバータ一覧</a><a class="headerlink" href="#data-format-field-convertor-list" title="このヘッドラインへのパーマリンク">¶</a></h3>
<p>標準で提供するデータコンバータ一覧を以下に示す。</p>
<table border="1" class="colwidths-given white-space-normal docutils">
<colgroup>
<col width="20%" />
<col width="30%" />
<col width="50%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">コンバータ名</th>
<th class="head">型変換仕様</th>
<th class="head">説明</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>pad</td>
<td>型変換無し</td>
<td><p class="first">パディング及びトリムする文字を設定する。</p>
<p>パディング及びトリム位置は、フィールドタイプ毎に以下のように動作する。</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">X:</th><td class="field-body">右トリム、右パディング</td>
</tr>
<tr class="field-even field"><th class="field-name">N:</th><td class="field-body">右トリム、右パディング</td>
</tr>
<tr class="field-odd field"><th class="field-name">XN:</th><td class="field-body">右トリム、右パディング</td>
</tr>
<tr class="field-even field"><th class="field-name">Z:</th><td class="field-body">左トリム・左パディング</td>
</tr>
<tr class="field-odd field"><th class="field-name">SZ:</th><td class="field-body">左トリム・左パディング</td>
</tr>
<tr class="field-even field"><th class="field-name">P:</th><td class="field-body">左トリム・左パディング</td>
</tr>
<tr class="field-odd field"><th class="field-name">SP:</th><td class="field-body">左トリム・左パディング</td>
</tr>
<tr class="field-even field"><th class="field-name">X9:</th><td class="field-body">左トリム・左パディング</td>
</tr>
<tr class="field-odd field"><th class="field-name">SX9:</th><td class="field-body">左トリム・左パディング</td>
</tr>
</tbody>
</table>
<p>フィールドタイプの詳細は、 <a class="reference internal" href="#data-format-field-type-list"><span>フィールドタイプ一覧</span></a> を参照。</p>
<table class="last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">引数:</th><td class="field-body">パディング・トリムの対象となる値 <code class="docutils literal"><span class="pre">必須</span></code></td>
</tr>
</tbody>
</table>
</td>
</tr>
<tr class="row-odd"><td>encoding</td>
<td>型変換なし</td>
<td><p class="first">文字列型フィールドの文字エンコーディングを設定する。</p>
<p>特定フィールドのみ共通設定( <a class="reference internal" href="#data-format-directive-text-encoding"><span>text-encoding</span></a> )を上書きする場合に設定する。</p>
<p><code class="docutils literal"><span class="pre">X</span></code> 、 <code class="docutils literal"><span class="pre">N</span></code> 、 <code class="docutils literal"><span class="pre">XN</span></code> フィールドのみに使用することが出来る。
それ以外のフィールドタイプに設定した場合は、無視される。</p>
<table class="last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">引数:</th><td class="field-body">エンコーディング名(文字列) <code class="docutils literal"><span class="pre">必須</span></code></td>
</tr>
</tbody>
</table>
</td>
</tr>
<tr class="row-even"><td>リテラル値</td>
<td>型変換なし</td>
<td><p class="first">出力時のデフォルト値を設定する。</p>
<p>出力時に、値が未設定であった場合に、指定されたリテラル値を出力する。</p>
<p class="last">入力時には、この設定値は使用しない。</p>
</td>
</tr>
<tr class="row-odd"><td><p class="first last" id="data-format-number-convertor">number</p>
</td>
<td>String &lt;-&gt; BigDecimal</td>
<td><p class="first">数字文字列を数値(BigDecimal)に変換する場合に設定する。</p>
<table class="last docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">入力時:</th><td class="field-body">入力された数字文字列が符号なし数値形式であることをチェックし、BigDecimal型に変換する。</td>
</tr>
<tr class="field-even field"><th class="field-name">出力時:</th><td class="field-body">出力する値を文字列に変換し、符号なし数値形式であることをチェック後に出力する。</td>
</tr>
</tbody>
</table>
</td>
</tr>
<tr class="row-even"><td><p class="first last" id="data-format-signed-number-convertor">signed_number</p>
</td>
<td>String &lt;-&gt; BigDecimal</td>
<td><p class="first">符号付きの数字文字列を数値(BigDecimal)に変換する場合に設定する。</p>
<p class="last">符号が許可される点以外は、 <a class="reference internal" href="#data-format-number-convertor"><span>numberコンバータ</span></a> と同じ仕様となる。</p>
</td>
</tr>
<tr class="row-odd"><td><p class="first last" id="data-format-replacement-convertor">replacement</p>
</td>
<td>型変換なし</td>
<td><p class="first">入出力とも、置換え対象文字を変換先の文字に置換して返す。</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">引数:</th><td class="field-body">置き換えタイプ名 <code class="docutils literal"><span class="pre">任意</span></code></td>
</tr>
</tbody>
</table>
<p class="last">詳細は、 <a class="reference internal" href="../data_format.html#data-format-replacement"><span>文字の置き換え(寄せ字)を行う</span></a> を参照。</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="section" id="id15">
<h2><a class="toc-backref" href="#id32">7.4.2.3.1.1.5. 項目定義の省略について</a><a class="headerlink" href="#id15" title="このヘッドラインへのパーマリンク">¶</a></h2>
<p>フォーマット定義ファイルの項目定義と実際のデータの項目定義が合わない場合の振る舞いについて説明する。</p>
<dl class="docutils">
<dt>固定長及び可変長データの場合</dt>
<dd>固定長及び可変長データの場合は、実際のデータとフォーマット定義の項目定義は厳密に一致させる必要がある。
このため、アプリケーションで不要となる項目が存在しているような場合でも、フォーマット定義ファイル上には項目を定義する必要がある。</dd>
<dt>JSON及びXMLデータの場合</dt>
<dd>JSON及びXMLの場合には、フォーマット定義ファイル上に定義されていない項目は、読み取り対象外となる。
このため、実際のデータ上に存在している項目でも、アプリケーションで不要なのであれば項目定義を行わなくてもよい。</dd>
</dl>
</div>
</div>


           </div>
           <div class="articleComments">
            
           </div>
          </div>
          <footer>

    <hr/>

    <div role="contentinfo">
        <p>
            &copy; Copyright 2010-2021, TIS Inc.
        </p>
    </div>
    Built with <a href="http://sphinx-doc.org/">Sphinx</a> using a <a href="https://github.com/snide/sphinx_rtd_theme">theme</a> provided by <a href="https://readthedocs.org">Read the Docs</a>.

</footer>

        </div>
      </div>

    </section>

  </div>
  


  

    <script type="text/javascript">
        var DOCUMENTATION_OPTIONS = {
            URL_ROOT:'../../../../../',
            VERSION:'5u19',
            COLLAPSE_INDEX:false,
            FILE_SUFFIX:'.html',
            HAS_SOURCE:  true,
            SOURCELINK_SUFFIX: ''
        };
    </script>
      <script type="text/javascript" src="../../../../../_static/jquery.js"></script>
      <script type="text/javascript" src="../../../../../_static/underscore.js"></script>
      <script type="text/javascript" src="../../../../../_static/doctools.js"></script>
      <script type="text/javascript" src="../../../../../_static/custom.js"></script>
      <script type="text/javascript" src="../../../../../_static/translations.js"></script>

  

  
  
    <script type="text/javascript" src="../../../../../_static/js/theme.js"></script>
  

  
  
  <script type="text/javascript">
      jQuery(function () {
          SphinxRtdTheme.StickyNav.enable();
      });
  </script>
   

</body>
</html>